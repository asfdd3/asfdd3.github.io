[{"title":"IPSec","url":"/2025/05/18/ipsec/","content":"IPSec1.IPSec 简介起源随着Internet的发展，越来越多的企业直接通过Internet进行互联，但由于IP协议未考虑安全性，而且Internet上有大量的不可靠用户和网络设备，所以用户业务数据要穿越这些未知网络，根本无法保证数据的安全性，数据易被伪造、篡改或窃取。因此，迫切需要一种兼容IP协议的通用的网络安全方案。为了解决上述问题，IPSec（Internet Protocol Security）应运而生。IPSec是对IP的安全性补充，其工作在IP层，为IP网络通信提供透明的安全服务。\n定义IPSec是IETF（Internet Engineering Task Force）制定的一组开放的网络安全协议。它并不是一个单独的协议，而是一系列为IP网络提供安全性的协议和服务的集合，包括认证头AH（Authentication Header）和封装安全载荷ESP（Encapsulating SecurityPayload）两个安全协议、密钥交换和用于验证及加密的一些算法等。通过这些协议，在两个设备之间建立一条IPSec隧道。数据通过IPSec隧道进行转发，实现保护数据的安全性。\n受益IPSec通过加密与验证等方式，从以下几个方面保障了用户业务数据在Internet中的安全传输：\n\n数据来源验证：接收方验证发送方身份是否合法。\n数据加密：发送方对数据进行加密，以密文的形式在Internet上传送，接收方对接收的加密数据进行解密后处理或直接转发。\n数据完整性：接收方对接收的数据进行验证，以判定报文是否被篡改。\n抗重放：接收方拒绝旧的或重复的数据包，防止恶意用户通过重复发送捕获到的数据包所进行的攻击。\n\n2.IPSec原理描述2.1IPSec 协议框架2.1.1安全联盟安全联盟SA（Security Association）是通信对等体间对某些要素的协定，它描述了对等体间如何利用安全服务（例如加密）进行安全的通信。这些要素包括对等体间使用何种安全协议、要保护的数据流特征、对等体间传输的数据的封装模式、协议采用的加密和验证算法，以及用于数据安全转换、传输的密钥和SA的生存周期等。IPSec安全传输数据的前提是在IPSec对等体（即运行IPSec协议的两个端点）之间成功建立安全联盟。IPSec安全联盟简称IPSec SA，由一个三元组来唯一标识，这个三元组包括安全参数索引SPI（Security Parameter Index）、目的IP地址和使用的安全协议号（AH或ESP）。其中，SPI是为唯一标识SA而生成的一个32位比特的数值，它被封装在AH和ESP头中。IPSec SA是单向的逻辑连接，通常成对建立（Inbound和Outbound）。因此两个IPSec对等体之间的双向通信，最少需要建立一对IPSec SA形成一个安全互通的IPSec隧道，分别对两个方向的数据流进行安全保护。另外，IPSec SA的个数还与安全协议相关。如果只使用AH或ESP来保护两个对等体之间的流量，则对等体之间就有两个SA，每个方向上一个。如果对等体同时使用了AH和ESP，那么对等体之间就需要四个SA，每个方向上两个，分别对应AH和ESP。建立IPSec SA有两种方式：手工方式和IKE方式。二者的主要差异如表所示。\n\n\n\n对比项\n手工方式建立IPSec SA\nIKE方式自动建立IPSec SA\n\n\n\n加密&#x2F;验证密钥管理\n手工配置、手动刷新，易出错\n通过DH算法动态生成并自动刷新\n\n\n密钥管理成本\n高（需人工维护所有节点密钥）\n低（自动协商和轮换）\n\n\nSPI（安全参数索引）\n手工配置\n随机生成\n\n\n生存周期\n无限制，SA永久存在（除非手动删除）\n由生存周期参数控制，SA自动过期和重建\n\n\n安全性\n低（静态密钥易被破解，无前向保密）\n高（动态密钥、支持PFS、抗重放攻击）\n\n\n适用场景\n小型网络、临时测试环境\n中小型至大型网络、生产环境\n\n\n2.1.2安全协议IPSec使用认证头AH（Authentication Header）和封装安全载荷ESP EncapsulatingSecurity Payload）两种IP传输层协议来提供认证或加密等安全服务。\n\nAH协议：AH仅支持认证功能，不支持加密功能。AH在每一个数据包的标准IP报头后面添加一个AH报文头。AH对数据包和认证密钥进行Hash计算，接收方收到带有计算结果的数据包后，执行同样的Hash计算并与原计算结果比较，传输过程中对数据的任何更改将使计算结果无效，这样就提供了数据来源认证和数据完整性校验。AH协议的完整性验证范围为整个IP报文。\n\nESP协议：ESP支持认证和加密功能。ESP在每一个数据包的标准IP报头后面添加一个ESP报文头，并在数据包后面追加一个ESP尾（ESP Trailer和ESP Auth data）。与AH不同的是，ESP将数据中的有效载荷进行加密后再封装到数据包中，以保证数据的机密性，但ESP没有对IP头的内容进行保护，除非IP头被封装在ESP内部（采用隧道模式）。\n\n\nAH协议与ESP协议的比较如下所示：\n\n\n\n安全特性\nAH (认证头)\nESP (封装安全载荷)\n\n\n\n协议号\n51\n50\n\n\n数据完整性校验\n支持（验证整个IP报文）\n支持（传输模式：不验证IP头；隧道模式：验证整个IP报文）\n\n\n数据源验证\n支持\n支持\n\n\n数据加密\n不支持\n支持\n\n\n防报文重放攻击\n支持\n支持\n\n\nNAT-T (NAT穿越)\n不支持\n支持\n\n\nAH报文头结构\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| 下一个头部 (8 bits) | 载荷长度 (8 bits) |  保留 (16 bits)         |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                   安全参数索引 (SPI, 32 bits)                   |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                   序列号 (Sequence Number, 32 bits)            |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                                                               ||                认证数据 (可变长度，32 bits的整数倍)               ||                                                               |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n AH 报文头字段含义\n\n\n\n字段名\n长度\n含义\n\n\n\n下一头部\n8 bits\n标识 AH 报文头后面的负载类型： - 传输模式：被保护的上层协议（TCP&#x2F;UDP）或 ESP 协议编号 - 隧道模式：IP 协议或 ESP 协议编号（当 AH 与 ESP 同时使用时，下一头部为 ESP 报文头）\n\n\n负载长度\n8 bits\n以 32 比特为单位的 AH 报文头长度减 2（缺省值：4）\n\n\n保留字段\n16 bits\n保留将来使用，缺省为 0\n\n\nSPI\n32 bits\nIPSec 安全参数索引，唯一标识安全联盟（SA）\n\n\n序列号\n32 bits\n从 1 开始的单向递增计数器，防止重放攻击\n\n\n认证数据\n变长字段（32 比特整数倍，通常 96 bits）\n包含完整性校验值（ICV），用于接收方校验数据完整性。认证算法：- ✅ 推荐：SHA2、SM3- ⚠️ 不安全：MD5、SHA1（存在安全隐患）\n\n\nESP 报文结构\n+-----------------------------------------------+ &lt;-- ESP头部| 安全参数索引（SPI）                              |+-----------------------------------------------+| 序列号                                         |+-----------------------------------------------+ &lt;-- 加密部分开始|                                               || 负载数据（Payload，变长）                        ||                                               |+-----------------------------------------------+| 填充字段（0～255字节 Padding）                   |+-----------------------------------------------+| 填充长度（1B） | 下一头部（1B）                   |+-----------------------------------------------+ &lt;-- ESP尾部（加密部分结束）|                                               || 认证数据（ICV，完整性校验值，变长                  ||                                               |+-----------------------------------------------+ &lt;-- ESP认证部分\n\n ESP 报文头字段含义\n\n\n\n字段名\n长度\n含义\n\n\n\nSPI\n32 bits\nIPSec 安全参数索引，唯一标识安全联盟（SA）\n\n\n序列号\n32 bits\n从 1 开始的单向递增计数器，防止重放攻击\n\n\n负载数据\n变长\n原始 IP 报文中的可变长度数据内容（保护内容类型由下一头部字段标识）\n\n\n填充字段\n0-255 字节\n用于补齐加密算法要求的块长度\n\n\n填充长度\n8 bits\n表示填充字段的字节数（0 表示无填充）\n\n\n下一头部\n8 bits\n标识下一个负载类型：- 传输模式：上层协议编号（如 TCP&#x3D;6&#x2F;UDP&#x3D;17）- 隧道模式：IP 协议（IPv4&#x3D;4&#x2F;IPv6&#x3D;41）\n\n\n认证数据\n变长\n完整性校验值（ICV），需 32 位对齐\n\n\n2.1.3封装模式封装模式是指将AH或ESP相关的字段插入到原始IP报文中，以实现对报文的认证和加密，封装模式有传输模式和隧道模式两种。\n传输模式\n在传输模式中，AH头或ESP头被插入到IP头与传输层协议头之间，保护TCP&#x2F;UDP&#x2F;ICMP负载。由于传输模式未添加额外的IP头，所以原始报文中的IP地址在加密后报文的IP头中可见。以TCP报文为例，原始报文经过传输模式封装后，报文格式如下所示。\n\n隧道模式\n在隧道模式下，AH头或ESP头被插到原始IP头之前，另外生成一个新的报文头放到AH头或ESP头之前，保护IP头和负载。以TCP报文为例，原始报文经隧道模式封装后的报文结构如下图所示。\n\n隧道模式下，与AH协议相比，ESP协议的完整性验证范围不包括新IP头，无法保证新IP头的安全。\n传输模式和隧道模式比较\n传输模式和隧道模式的区别在于：\n\n从安全性来讲，隧道模式优于传输模式。它可以完全地对原始IP数据包进行验证和加密。隧道模式下可以隐藏内部IP地址，协议类型和端口。\n从性能来讲，隧道模式因为有一个额外的IP头，所以它将比传输模式占用更多带宽。\n从场景来讲，传输模式主要应用于两台主机或一台主机和一台VPN网关之间通信；隧道模式主要应用于两台VPN网关之间或一台主机与一台VPN网关之间的通信。当安全协议同时采用AH和ESP时，AH和ESP协议必须采用相同的封装模式。\n\n2.1.4 加密和验证IPSec提供了两种安全机制：加密和验证。加密机制保证数据的机密性，防止数据在传输过程中被窃听；验证机制能保证数据真实可靠，防止数据在传输过程中被仿冒和篡改。\n加密\nIPSec采用对称加密算法对数据进行加密和解密。如下图所示，数据发送方和接收方使用相同的密钥进行加密、解密。\n用于加密和解密的对称密钥可以手工配置，也可以通过IKE协议自动协商生成。常用的对称加密算法包括：数据加密标准DES（Data Encryption Standard）、3DES（Triple Data Encryption Standard）、先进加密标准AES（Advanced EncryptionStandard）国密算法（SM1和SM4）。其中，DES和3DES算法安全性低，存在安全风险，不推荐使用。\n验证\nIPSec的加密功能，无法验证解密后的信息是否是原始发送的信息或完整。IPSec采用HMAC（Keyed-Hash Message Authentication Code）功能，比较完整性校验值ICV进行数据包完整性和真实性验证。通常情况下，加密和验证通常配合使用。如图所示，在IPSec发送方，加密后的报文通过验证算法和对称密钥生成完整性校验值ICV，IP报文和完整性校验值ICV同时发给对端；在IPSec接收方，使用相同的验证算法和对称密钥对加密报文进行处理，同样得到完整性校验值ICV，然后比较完整性校验值ICV进行数据完整性和真实性验证，验证不通过的报文直接丢弃，验证通过的报文再进行解密。\n\n同加密一样，用于验证的对称密钥也可以手工配置，或者通过IKE协议自动协商生成。常用的验证算法包括：消息摘要MD5（Message Digest 5）、安全散列算法SHA1（Secure Hash Algorithm 1）、SHA2、国密算法SM3（Senior Middle 3）。其中，MD5、SHA1算法安全性低，存在安全风险，不推荐使用。\n2.1.5  密钥交换使用对称密钥进行加密、验证时，如何安全地共享密钥是一个很重要的问题。有两种方法解决这个问题：\n\n带外共享密钥在发送、接收设备上手工配置静态的加密、验证密钥。双方通过带外共享的方式（例如通过电话或邮件方式）保证密钥一致性。这种方式的缺点是安全性低，可扩展性差，在点到多点组网中配置密钥的工作量成倍增加。另外，为提升网络安全性需要周期性修改密钥，这种方式下也很难实施。\n使用一个安全的密钥分发协议通过IKE协议自动协商密钥。IKE采用DH算法在不安全的网络上安全地分发密钥。这种方式配置简单，可扩展性好，特别是在大型动态的网络环境下此优点更加突出。同时，通信双方通过交换密钥交换材料来计算共享的密钥，即使第三方截获了双方用于计算密钥的所有交换数据，也无法计算出真正的密钥，这样极大地提高了安全性。\n\nIKE 协议因特网密钥交换IKE（Internet Key Exchange）协议建立在Internet安全联盟和密钥管理协议ISAKMP定义的框架上，是基于UDP（User Datagram Protocol）的应用层协议。它为IPSec提供了自动协商密钥、建立IPSec安全联盟的服务，能够简化IPSec的配置和维护工作。IKE与IPSec的关系如图所示，对等体之间建立一个IKE SA完成身份验证和密钥信息交换后，在IKE SA的保护下，根据配置的AH&#x2F;ESP安全协议等参数协商出一对IPSecSA。此后，对等体间的数据将在IPSec隧道中加密传输。IKE SA是一个双向的逻辑连接，两个对等体间只建立一个IKE SA。\n\nIKE安全机制\nIKE具有一套自保护机制，可以在网络上安全地认证身份、分发密钥、建立IPSec SA：\n\n身份认证身份认证确认通信双方的身份（对等体的IP地址或名称），包括预共享密钥PSK（pre-shared key）认证、数字证书RSA（rsa-signature）认证和数字信封认证。在预共享密钥认证中，通信双方采用共享的密钥对报文进行Hash计算，判断双方的计算结果是否相同。如果相同，则认证通过；否则认证失败。当有1个对等体对应多个对等体时，需要为每个对等体配置预共享的密钥。该方法在小型网络中容易建立，但安全性较低。在数字证书认证中，通信双方使用CA证书进行数字证书合法性验证，双方各有自己的公钥（网络上传输）和私钥（自己持有）。发送方对原始报文进行Hash计算，并用自己的私钥对报文计算结果进行加密，生成数字签名。接收方使用发送方的公钥对数字签名进行解密，并对报文进行Hash计算，判断计算结果与解密后的结果是否相同。如果相同，则认证通过；否则认证失败。使用数字证书安全性高，但需要CA来颁发数字证书，适合在大型网络中使用。在数字信封认证中，发送方首先随机产生一个对称密钥，使用接收方的公钥对此对称密钥进行加密（被公钥加密的对称密钥称为数字信封），发送方用对称密钥加密报文，同时用自己的私钥生成数字签名。接收方用自己的私钥解密数字信封得到对称密钥，再用对称密钥解密报文，同时根据发送方的公钥对数字签名进行解密，验证发送方的数字签名是否正确。如果正确，则认证通过；否则认证失败。数字信封认证用于设备需要符合国家密码管理局要求时使用，此认证方法只能在IKEv1的主模式协商过程中支持。IKE支持的认证算法有：MD5、SHA1、SHA2-256、SHA2-384、SHA2-512、SM3。\n\n身份保护身份数据在密钥产生之后加密传送，实现了对身份数据的保护。IKE支持的加密算法有：DES、3DES、AES-128、AES-192、AES-256、SM1和SM4。\n\nDHDH是一种公共密钥交换方法，它用于产生密钥材料，并通过ISAKMP消息在发送和接收设备之间进行密钥材料交换。然后，两端设备各自计算出完全相同的对称密钥。该对称密钥用于计算加密和验证的密钥。在任何时候，通信双方都不交换真正的密钥。DH密钥交换是IKE的精髓所在。\n\nPFS完善的前向安全性PFS（Perfect Forward Secrecy）通过执行一次额外的DH交换，确保即使IKE SA中使用的密钥被泄露，IPSec SA中使用的密钥也不会受到损害。\n\n\n2.2IPSec 基本原理IPSec通过在IPSec对等体间建立双向安全联盟形成一个安全互通的IPSec隧道，并通过定义IPSec保护的数据流将要保护的数据引入该IPSec隧道，然后对流经IPSec隧道的数据通过安全协议进行加密和验证，进而实现在Internet上安全传输指定的数据。IPSec安全联盟可以手工建立，也可以通过IKEv1或IKEv2协议自动协商建立。本文重点介绍如何定义IPSec保护的数据流、IKE自动协商建立安全联盟的过程。\n2.2.1 定义 IPSec 保护的数据流IPSec是基于定义的感兴趣流触发对特定数据的保护，至于什么样的数据是需要IPSec保护的，可以通过以下两种方式定义。其中IPSec感兴趣流即需要IPSec保护的数据流。\n\nACL方式手工方式和IKE自动协商方式建立的IPSec隧道是由ACL来指定要保护的数据流范围，筛选出需要进入IPSec隧道的报文，ACL规则允许（permit）的报文将被保护，未匹配任何permit规则的报文将不被保护。这种方式可以利用ACL的丰富配置功能，根据IP地址、端口、协议类型等对报文进行过滤进而灵活制定IPSec的保护方法。\n路由方式通过IPSec虚拟隧道接口建立IPSec隧道，将所有路由到IPSec虚拟隧道接口的报文都进行IPSec保护，根据该路由的目的地址确定哪些数据流需要IPSec保护。其中IPSec虚拟隧道接口是一种三层逻辑接口。路由方式具有以下优点：\n通过路由将需要IPSec保护的数据流引到虚拟隧道接口，不需使用ACL定义待\n加&#x2F;解密的流量特征，简化了IPSec配置的复杂性。\n支持动态路由协议。\n通过GRE over IPSec支持对组播流量的保护。\n\n\n\n2.2.2 IKEv1 协商安全联盟的过程IKEv1 协商阶段1\nIKEv1协商阶段1的目的是建立IKE SA。IKE SA建立后对等体间的所有ISAKMP（一个框架 IKE是一种实现）消息都将通过加密和验证，这条安全通道可以保证IKEv1第二阶段的协商能够安全进行。IKEv1协商阶段1支持两种协商模式：主模式（Main Mode）和野蛮模式（AggressiveMode）。主模式包含三次双向交换，用到了六条ISAKMP信息，协商过程如下图所示。这三次交换分别是：\n\n消息①和②用于提议交换发起方发送一个或多个IKE安全提议，响应方查找最先匹配的IKE安全提议，并将这个IKE安全提议回应给发起方。匹配的原则为协商双方具有相同的加密算法、认证算法、认证方法和DH组标识。\n消息③和④用于密钥信息交换\n双方交换DH(一种密钥交换算法，不暴露私钥的情况下，计算出一个共享密钥)公共值和nonce(一个随机值)值，用于IKE SA的认证和加密密钥在这个阶段产生。消息⑤和⑥用于身份和认证信息交换（双方使用生成的密钥发送信息），双方进行身份认证和对整个主模式交换内容的认证。\n\n野蛮模式只用到三条信息，前两条消息①和②用于协商IKE安全提议，交换DH公共值、必需的辅助信息以及身份信息并且消息②中还包括响应方发送身份信息供发起方认证，消息③用于响应方认证发起方。IKEv1协商阶段1的协商过程如下图所示。\n\n与主模式相比，野蛮模式减少了交换信息的数目，提高了协商的速度，但是没有对身份信息进行加密保护。\nIKEv1 协商阶段 2\nIKEv1协商阶段2的目的就是建立用来安全传输数据的IPSec SA，并为数据传输衍生出密钥。这一阶段采用快速模式（Quick Mode）。该模式使用IKEv1协商阶段1中生成的密钥对ISAKMP消息的完整性和身份进行验证，并对ISAKMP消息进行加密，故保证了交换的安全性。IKEv1协商阶段2的协商过程如下图所示。\n\nIKEv1协商阶段2通过三条ISAKMP消息完成双方IPSec SA的建立：\n\n协商发起方发送本端的安全参数和身份认证信息。安全参数包括被保护的数据流和IPSec安全提议等需要协商的参数。身份认证信息包括第一阶段计算出的密钥和第二阶段产生的密钥材料等，可以再次认证对等体。\n协商响应方发送确认的安全参数和身份认证信息并生成新的密钥。IPSec SA数据传输需要的加密、验证密钥由第一阶段产生的密钥、SPI、协议等参数衍生得出，以保证每个IPSec SA都有自己独一无二的密钥。如果启用PFS，则需要再次应用DH算法计算出一个共享密钥，然后参与上述计算，因此在参数协商时要为PFS协商DH密钥组。\n发送方发送确认信息，确认与响应方可以通信，协商结束。\n\n2.2.3 IKEv2 协商安全联盟的过程采用IKEv2协商安全联盟比IKEv1协商过程要简化的多。要建立一对IPSec SA，IKEv1需要经历两个阶段：“主模式＋快速模式”或者“野蛮模式＋快速模式”，前者至少需要交换9条消息，后者也至少需要6条消息。而IKEv2正常情况使用2次交换共4条消息就可以完成一对IPSec SA的建立，如果要求建立的IPSec SA大于一对时，每一对IPSec SA只需额外增加1次创建子SA交换，也就是2条消息就可以完成。IKEv2定义了三种交换：初始交换（Initial Exchanges）、创建子SA交换（Create_Child_SA Exchange）以及通知交换（Informational Exchange）。\n初始交换\n正常情况下，IKEv2通过初始交换就可以完成第一对IPSec SA的协商建立。IKEv2初始交换对应IKEv1的第一阶段，初始交换包含两次交换四条消息，如下图所示。\n消息①和②属于第一次交换（称为IKE_SA_INIT交换），以明文方式完成IKE SA的参数协商，包括协商加密和验证算法，交换临时随机数和DH交换。IKE_SA_INIT交换后生成一个共享密钥材料，通过这个共享密钥材料可以衍生出IPSec SA的所有密钥。消息③和④属于第二次交换（称为IKE_AUTH交换），以加密方式完成身份认证、对前两条信息的认证和IPSec SA的参数协商。IKEv2支持RSA签名认证、预共享密钥认证以及扩展认证方法EAP（Extensible Authentication Protocol）。发起者通过在消息3中省去认证载荷来表明需要使用EAP认证。\n创建子 SA 交换\n当一个IKE SA需要创建多对IPSec SA时，需要使用创建子SA交换来协商多于一对的IPSec SA。另外，创建子SA交换还可以用于IKE SA的重协商。创建子SA交换包含一个交换两条消息，对应IKEv1协商阶段2，交换的发起者可以是初始交换的协商发起方，也可以是初始交换的协商响应方。创建子SA交换必须在初始交换完成后进行，交换消息由初始交换协商的密钥进行保护。类似于IKEv1，如果启用PFS，创建子SA交换需要额外进行一次DH交换，生成新的密钥材料。生成密钥材料后，子SA的所有密钥都从这个密钥材料衍生出来。\n通知交换\n运行IKE协商的两端有时会传递一些控制信息，例如错误信息或者通告信息，这些信息在IKEv2中是通过通知交换完成的，如下图所示。通知交换必须在IKE SA保护下进行，也就是说通知交换只能发生在初始交换之后。控制信息可能是IKE SA的，那么通知交换必须由该IKE SA来保护进行；也可能是某子SA的，那么该通知交换必须由生成该子SA的IKE SA来保护进行。\n\n","categories":["网络协议学习"],"tags":["IPSec"]},{"title":"VFS虚拟文件系统","url":"/2025/05/19/VFS%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/","content":"VFS(虚拟文件系统)1.什么是VFSLinux 需要支持多种不同的文件系统（因为不同的文件系统有不同的特点），同时还要为用户提供一组统一的接口，因此要实现这个目的，就要将对各种不同文件系统和管理纳入到一个统一的框架中，也就是同一组系统调用，对各种不同的文件系统进行操作，这就是存在VFS的目的。\n这样，就可以对用户程序隐去各种不同文件系统的细节，为用户程序提供一个统一的、抽象的、虚拟的文件系统，这就是所谓“虚拟文件系统” - VFS（Virtual Filesystem Switch）。这个抽象层由一组标准的、抽象的文件操作构成，以系统调用的形式提供于用户程序，如read（）、write（）、lseek（）等等。这样，用户程序就可以 把所有的文件都看作一致的、抽象的“VFS文件”，通过这些系统调用对文件进行操作，而无需关心具体的文件属于什么文件系统以及具体文件系统的设计和实现,也就是说VFS是一个内核软件层，使应用程序与具体的文件系统解耦。\n举一个例子：在编写应用程序时，会经常使用到write（）系统调用，也就是向一个文件中写入数据。函数的原型为 ssize_t write(int fd, const void *buf, size_t count); 用户程序调用write（f, &amp;buf, len）的含义为向文件描述符为f的文件中，写入len个字节数据，。下图为write（）将数据写入到设备上的宏观流程。我们看到首先通过虚拟文件系统VFS，然后根据不同文件系统的write（）方法将数据写入物理设备上，宏观的调用流程如下图所示：\n\n2.VFS 整体架构虚拟文件系统作为内核中的一个抽象层，起到一个中间层的作用，对上(应用程序)提供统一接口，应用程序只需使用标准的文件操作（如 open、read、write1），无需关心底层是哪种文件系统（EXT4、NTFS、FAT等），对下为各种具体的文件系统（如 ext4、XFS 等）提供了统一的接口（其实就是实现不同文件系统的ops集合），VFS在内核中的整体架构如下所示。\n\n\n\n上述图片为VFS整体架构图，图片中各个组件作用大概如下：\n\nAPP：用户程序通过系统调用读写文件\nPage Cache：缓存文件的数据内容，例如次读取文件时从磁盘加载到页缓存，后续直接读缓存，避免磁盘I&#x2F;O。\nDirectory cache：缓存文件路径到Dentry的映射，减少频繁解析路径的开销。\nInode缓存：缓存文件的元数据（权限、大小、数据块位置等）\nBuffer Cache：缓存磁盘块的原始数据（已逐步被Page Cache取代，但在某些场景仍用于块设备操作）\n磁盘文件系统（ext2&#x2F;ext3&#x2F;ext4）：\next2：早期非日志式文件系统，简单但易崩溃损坏。\next3：增加日志功能，提升崩溃恢复能力。\next4：支持更大文件&#x2F;分区、延迟分配等高级特性。\n\n\n伪文件系统：\nproc：虚拟文件系统，动态暴露内核状态（如 &#x2F;proc&#x2F;cpuinfo）\nsysfs：提供设备&#x2F;驱动信息的统一接口（如 &#x2F;sys&#x2F;class）\n\n\n\n3.VFS关键数据结构VFS中包含着向物理文件系统转换的一系列数据结构，Linux中VFS层依靠四个主要的数据结构来述其结构信息，分别为超级块、索引结点、目录项和文件对象。这四个数据结构作用如下：\n3.1 Superblock（超级块）\n功能：超级块(块指的是存储和管理数据的基本单位)对象由各自的文件系统实现，用来存储文件系统的信息，如块大小、块数量等。这个对象对应为文件系统超级块或者文件系统控制块，它存储在磁盘特定的扇区上。不是基于磁盘的文件系统临时生成超级块，并保存在内存中，注意：所有超级块对象都以双向循环链表的形式链接在一起被管理。\n\n用途： \n\n超级块与物理文件系统一一对应。\n在挂载时初始化，帮助管理文件系统。\n\n\n\n管理超级块的结构体如下所示：\nstruct super_block &#123;    struct list_head    s_list;               // 指向链表的指针    dev_t               s_dev;                // 设备标识符    unsigned long       s_blocksize;          // 以字节为单位的块大小    loff_t              s_maxbytes;           // 文件大小上限    struct file_system_type    *s_type;       // 文件系统类型    const struct super_operations    *s_op;   // SuperBlock 操作函数，write_inode、put_inode 等    const struct dquot_operations    *dq_op;  // 磁盘限额函数    struct dentry        *s_root;             // 根目录&#125;\n\n3.2 Inode(索引节点)\n功能：每个文件都有一个唯一的inode，存储了文件的元数据，如文件大小、权限、访问时间等。它是文件系统中文件的抽象表示，不包含文件名。\n特点：inode存储在磁盘中（伪文件系统除外），在需要的时候会被加载到内存中，具体情况如下：inode 是文件系统的元数据结构，直接存储在磁盘上，用于长期保存文件的元信息（如权限、大小、块位置等）例如在Ext4文件系统中，inode集中存放在磁盘的固定区域。当访问某个文件时，会根据具体的磁盘上的inode(也就是磁盘中的inode, 比如ext4_inode_info)，来填充VFS的创建的inode(用私有指针指一下)。\n\nVFS管理的inode结构如下所示：\nstruct inode &#123;    umode_t                 i_mode;          // 文件权限及类型    kuid_t                  i_uid;           // user id    kgid_t                  i_gid;           // group id    const struct inode_operations    *i_op;  // inode 操作函数，如 create，mkdir，lookup，rename 等    struct super_block      *i_sb;           // 所属的 SuperBlock    loff_t                  i_size;          // 文件大小    struct timespec         i_atime;         // 文件最后访问时间    struct timespec         i_mtime;         // 文件最后修改时间    struct timespec         i_ctime;         // 文件元数据最后修改时间（包括文件名称）    const struct file_operations    *i_fop;  // 文件操作函数，open、write 等    void                    *i_private;      // 文件系统的私有数据&#125;\n\n3.3 Dentry(目录项)Dentry的核心作用是在内存中建立文件名（路径）与 inode 之间的高效映射。每个 Dentry 代表路径中一个特定部分。对于“&#x2F;bin&#x2F;ls”、“&#x2F;”、“bin”和“ls”都是目录项对象。前面是两个目录，最后一个是普通文件。在路径中， 包括普通文件在内，每一个部分都是目录项对象。目录项是描述文件的逻辑属性，只存在于内存中，举个例子，当调用open()函数打开一个文件时，内核会第一时间根据文件路径到 DEntry Cache 里面寻找相应的 DEntry，找到了就直接构造一个file对象并返回。如果该文件不在缓存中，那么 VFS 会根据找到的最近目录一级一级地向下加载，直到找到相应的文件。期间 VFS 会缓存所有被加载生成的dentry。注意:一个 INode 可能被多个 DEntry 所关联，即相当于为某一文件创建了多个文件路径.\nVFS管理的Dentry结构如下所示：\nstruct dentry &#123;    struct dentry *d_parent;     // 父目录    struct qstr d_name;          // 文件名称    struct inode *d_inode;       // 关联的 inode    struct list_head d_child;    // 父目录中的子目录和文件    struct list_head d_subdirs;  // 当前目录中的子目录和文件&#125;\n\n3.4 file 文件对象虚拟文件系统最后一个主要对象是文件对象，文件对象表示进程已打开的文件，每个进程都持有一个fd[]数组，数组里面存放的是指向file结构体的指针，同一进程的不同fd可以指向同一个file对象，file是内核中的数据结构，表示一个被进程打开的文件，和进程相关联。当应用程序调用open()函数的时候，VFS 就会创建相应的file对象。注意： file会通过Dentry找到inode，file的ops集合（read，write等）其实就是inode的i_fops; 这样感觉就实现了进程和文件系统之间的解耦。\nfile结构如下所示：\nstruct file &#123;    struct path                   f_path;    struct inode                  *f_inode;    const struct file_operations  *f_op;    unsigned int                  f_flags;    fmode_t                       f_mode;    loff_t                        f_pos;    struct fown_struct            f_owner;&#125;\n\n下图为上述四个关键数据结构的关系图：\n\n4.挂载4.1 什么叫挂载挂载（Mounting） 是将存储设备（如硬盘、U盘）或文件系统（如Ext4、NTFS）关联到Linux目录树中某个目录（称为挂载点）的过程。挂载后，访问该目录实际指向目标设备或文件系统的内容，而原目录下的文件会被临时隐藏。例如，将U盘挂载到&#x2F;mnt&#x2F;usb后，访问此目录即访问U盘数据，卸载后恢复原目录内容。内核通过虚拟文件系统（VFS）管理挂载表，动态路由路径解析，实现对多文件系统的统一访问。简言之，挂载是让外部存储“接入”目录树的机制，用户通过目录操作文件，无需关心物理设备细节。\n挂载是在用户态发起mount命令，该命令执行的时候需要指定文件系统的类型（例如Ext2）和文件系统数据的位置（也就是dev）。通过这些关键信息，VFS就可以完成Ext2文件系统的初始化，并将其关联到当前已经存在的文件系统当中，也就是建立起下面所示的文件系统树。\n\n如上图所示，该系统根文件系统是Ext4文件系统，而在其&#x2F;mnt目录下面又分别挂载了Ext4文件系统和XFS文件系统。最后形成了一个由多个文件系统组成的文件系统树。\n4.2 挂载点 挂载点（Mount Point）是 Linux系统中用于将外部存储设备或文件系统接入到目录树的一个空目录。通过挂载操作，该目录会成为访问目标文件系统的入口，原有内容会被临时隐藏，转而显示被挂载设备或文件系统的内容。\n一个挂载点用一个vfsmount来表示，属于VFS层的一部分，在用户执行mount系统调用的时候会被创建，它记录了文件系统实例与目录树的关联关系，是挂载机制的核心实现，作用如下：\n\n关联挂载点与超级块：记录被挂载的超级块，其实就是知道被挂载的是哪个文件系统\n支持路径解析：当用户访问路径时，VFS 通过 vfsmount 确定目标文件系统的位置。例如，当访问&#x2F;mnt&#x2F;data&#x2F;file.txt时VFS 发现 &#x2F;mnt&#x2F;data 是挂载点（进而可以拿到超级块的信息）进而调用目标文件系统的方法继续查找要操作的文件。\n\nvfsmount结构如下所示：\nstruct vfsmount &#123;\tstruct dentry *mnt_root;\t//挂载的目录\tstruct super_block *mnt_sb;\t//指向超级块\tint mnt_flags;\tstruct mnt_idmap *mnt_idmap;&#125; __randomize_layout;\n","categories":["文件系统学习"],"tags":["VFS"]},{"title":"moudle_init()原理学习","url":"/2025/05/28/module_init%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/","content":"moudle_init()原理学习1.静态加载与动态加载内核模块代码的例子#include &lt;linux/module.h&gt;#include &lt;linux/init.h&gt; static int hello_init(void)&#123;    printk(KERN_ALERT &quot;Hello World\\n&quot;);    return 0;&#125; static void hello_exit(void)&#123;    printk(KERN_ALERT &quot;Bye Bye World\\n&quot;);&#125; module_init(hello_init);module_exit(hello_exit);\n上述编写的内核模块有两种运行方式，一是静态编译链接进内核，在系统启动过程中进行初始化；一是编译成可动态加载的module，通过insmod动态加载重定位到内核。这两种方式可以在Makefile中通过obj-y或obj-m选项进行选择。\n动态加载：\n\n可根据系统需要运行动态加载模块，以扩充内核功能，不需要时将其卸载，以释放内存空间；\n当需要修改内核功能时，只需编译相应模块，而不必重新编译整个内核。\n\n静态加载但是有些模块必须要编译到内核，随内核一起运行，从不卸载，如 vfs等\n2.动态加载与静态加载实现原理同样的内核代码通过对moudle_init这个宏的不同展开来实现动态加载与卸载下面看一下moudle_init这个宏的实现：\n#ifndef MODULE#define module_init(x)\t__initcall(x);#define module_exit(x)\t__exitcall(x);#else /* MODULE */.../* Each module must use one module_init(). */#define module_init(initfn)\t\t\t\t\t\\\tstatic inline initcall_t __maybe_unused __inittest(void)\t\t\\\t&#123; return initfn; &#125;\t\t\t\t\t\\\tint init_module(void) __copy(initfn)\t\t\t\\\t\t__attribute__((alias(#initfn)));\t\t\\\t___ADDRESSABLE(init_module, __initdata);/* This is only required if you want to be unloadable. */#define module_exit(exitfn)\t\t\t\t\t\\\tstatic inline exitcall_t __maybe_unused __exittest(void)\t\t\\\t&#123; return exitfn; &#125;\t\t\t\t\t\\\tvoid cleanup_module(void) __copy(exitfn)\t\t\\\t\t__attribute__((alias(#exitfn)));\t\t\\\t___ADDRESSABLE(cleanup_module, __exitdata);#endif\n\n从上面代码可以发现moudle_init宏的不同展开方式取决于MODULE是否被定义，也就是通过Makefile控制的，上面部分用于将模块静态编译连接进内核，下面部分用于编译可动态加载的模块。\n2.1静态加载静态加载moudle_init宏经过一系列宏展开后如下所示：\n// 静态断言（确保函数类型匹配）static_assert(__same_type(initcall_t, &amp;hello_init));// 汇编部分：将函数地址存入特定节asm volatile (    &quot;.section    \\&quot;.initcall6.init\\&quot;, \\&quot;a\\&quot;        \\n&quot;  // 定义节    &quot;__initcall_hello__0_10_hello_init6:          \\n&quot;  // 标签    &quot;.long       hello_init - .                   \\n&quot;  //函数地址与标签地址的偏移量    &quot;.previous                                   \\n&quot;    // 恢复默认节);\n\n上述这段汇编代码的作用就是在 .initcall6.init 节中定义一个条目（entry），条目内容就是 hello_init 函数的相对偏移量。具体逻辑如下：\n切换到名为 .initcall6.init 的 ELF 段（Section）。.initcall6.init 是内核用于存储初始化函数指针的特殊段，数字 6 表示优先级（数字越小优先级越高）。内核启动时，会按优先级顺序遍历这些段。__initcall_hello__0_10_hello_init6 ：定义一个标签，用于标识当前初始化函数的位置。.long       hello_init - .存储 hello_init 函数地址相对于当前标签的偏移量。\n上述存放于 .initcall6.init 段中的__initcall_hello__0_10_hello_init6 是在start_kernel(系统调用的第一个c语言程序)中调用。 具体调用流程如下所示：\nstart_kernel|--&gt; rest_init    |    --&gt; kernel_thread        |        --&gt; kernel_init            |            --&gt; kernel_init_freeable                |                --&gt; do_basic_setup                    |                    --&gt; do_initcalls                        |                        --&gt; do_initcall_level(level)                            |                            --&gt; do_one_initcall(initcall_t fn)\n\n其中do_initcalls可以理解为处理module_init的一个入口函数具体定义如下：\nstatic void __init do_initcalls(void)&#123;\tint level;//初始化级别，0-7,优先级由高到低\tsize_t len = saved_command_line_len + 1;\tchar *command_line;\tcommand_line = kzalloc(len, GFP_KERNEL);\tif (!command_line)\t\tpanic(&quot;%s: Failed to allocate %zu bytes\\n&quot;, __func__, len);\t//遍历不同的优先级\tfor (level = 0; level &lt; ARRAY_SIZE(initcall_levels) - 1; level++) &#123;\t\t/* Parser modifies command_line, restore it each time */\t\tstrcpy(command_line, saved_command_line);\t\t//执行单个级别的初始化函数\t\tdo_initcall_level(level, command_line);\t&#125;\tkfree(command_line);&#125;\ndo_initcalls 中调用do_initcall_level来​​执行某个特定级别的所有初始化函数，具体函数如下所示：\nstatic void __init do_initcall_level(int level, char *command_line)&#123;\tinitcall_entry_t *fn;\tparse_args(initcall_level_names[level],\t\t   command_line, __start___param,\t\t   __stop___param - __start___param,\t\t   level, level,\t\t   NULL, ignore_unknown_bootoption);\ttrace_initcall_level(initcall_level_names[level]);\tfor (fn = initcall_levels[level]; fn &lt; initcall_levels[level+1]; fn++)\t\tdo_one_initcall(initcall_from_entry(fn));&#125;\ndo_one_initcall中根据一个具体的level依次调用do_one_initcall执行某一个level中的所有初始化函数\n上面的initcall_levels[]是一个指针数组定义如下所示：\nstatic initcall_t *initcall_levels[] __initdata = &#123;    __initcall0_start,    __initcall1_start,    __initcall2_start,    __initcall3_start,    __initcall4_start,    __initcall5_start,    __initcall6_start,    __initcall7_start,    __initcall_end,&#125;\n上述指针数组中每个元素定义如下所示：\nextern initcall_entry_t __initcall_start[];extern initcall_entry_t __initcall0_start[];extern initcall_entry_t __initcall1_start[];extern initcall_entry_t __initcall2_start[];extern initcall_entry_t __initcall3_start[];extern initcall_entry_t __initcall4_start[];extern initcall_entry_t __initcall5_start[];extern initcall_entry_t __initcall6_start[];extern initcall_entry_t __initcall7_start[];extern initcall_entry_t __initcall_end[];\n这里 __initcallX_start 符号不是传统意义上的变量。它们的值是在内核链接时由链接器自动计算的 可以理解也就是module_init注册的函数的偏移量就存在上述的__initcall6_start[]数组中\n这里举个例子：1.驱动通过 module_init 注册\nstatic int __init usb_init(void) &#123; /* ... */ &#125;module_init(usb_init);  // 默认对应级别6\n2.译器会将其转换为：\n.section &quot;.initcall6.init&quot;, &quot;a&quot;  ; 放入级别6的段__initcall_usb_init:    .long usb_init - .  ; 存储偏移量（非直接地址）\n\n3.链接脚本（vmlinux.lds）将所有 .initcall6.init 段合并？？？\n.initcall6.init : &#123;    __initcall6_start = .;    *(.initcall6.init)  ; 包含所有级别6的驱动初始化条目    __initcall7_start = .;&#125;\n4.内核通过 initcall_levels 访问\n可以看到上面的do_initcall_level中参数为initcall_from_entry 这个函数实现了将存储在内核初始化表中的​​相对偏移量​​转换为​​实际的函数地址​，​具体定义如下：\nstatic inline initcall_t initcall_from_entry(initcall_entry_t *entry)&#123;\treturn offset_to_ptr(entry);&#125;\n\n最终的do_one_initcall完成了针对某一个level中的一个entry的初始化：\nint __init_or_module do_one_initcall(initcall_t fn)&#123;\tint count = preempt_count();\tchar msgbuf[64];\tint ret;\tif (initcall_blacklisted(fn))\t\treturn -EPERM;\tdo_trace_initcall_start(fn);    //这里执行具体的函数调用！！！\tret = fn();\tdo_trace_initcall_finish(fn, ret);\tmsgbuf[0] = 0;\tif (preempt_count() != count) &#123;\t\tsprintf(msgbuf, &quot;preemption imbalance &quot;);\t\tpreempt_count_set(count);\t&#125;\tif (irqs_disabled()) &#123;\t\tstrlcat(msgbuf, &quot;disabled interrupts &quot;, sizeof(msgbuf));\t\tlocal_irq_enable();\t&#125;\tWARN(msgbuf[0], &quot;initcall %pS returned with %s\\n&quot;, fn, msgbuf);\tadd_latent_entropy();\treturn ret;&#125;\n\n\n2.2动态加载动态加载通常通过insmod加载内核模块，原理就是执行了init_module这个系统调用。如果是动态加载，moudle_init宏展开如下所示：\nstatic inline initcall_t __maybe_unused __inittest(void) &#123;     return hello_init; &#125;int init_module(void) __attribute__((alias(&quot;hello_init&quot;)));___ADDRESSABLE(init_module, __initdata);\n\n上述__inittest 函数确保 hello_init 符合 initcall_t 类型（返回 int 且无参数）\n上述的alias 属性是 gcc 的特有属性，将定义 init_module 为函数 initfn 的别名。所以 module_init(hello_init) 的作用就是定义一个变量名 init_module，其地址和 hello_init 是一样的\n上述例子编译可动态加载模块过程中，会自动产生 HelloWorld.mod.c 文件(最终会合并所有.o链接生成一个.ko)，内容如下：\n#include &lt;linux/module.h&gt;#include &lt;linux/vermagic.h&gt;#include &lt;linux/compiler.h&gt; MODULE_INFO(vermagic, VERMAGIC_STRING); struct module __this_module__attribute__((section(&quot;.gnu.linkonce.this_module&quot;))) = &#123;    .name = KBUILD_MODNAME,    .init = init_module,#ifdef CONFIG_MODULE_UNLOAD    .exit = cleanup_module,#endif    .arch = MODULE_ARCH_INIT,&#125;; static const char __module_depends[]__used__attribute__((section(&quot;.modinfo&quot;))) =&quot;depends=&quot;;\n\n由上述代码可知，定义了一个类型为 module 的全局变量 __this_module，成员 init 为 init_module（即 hello_init），且该变量链接到 .gnu.linkonce.this_module 段中\n最终，通过执行insmod这个可执行程序会通过系统调用加载内核模块，具体流程如下：\nSYSCALL_DEFINE3(init_module, ...)|--&gt;load_module    |    --&gt; do_init_module(mod)        |        --&gt; do_one_initcall(mod-&gt;init);\n\n可以看到动态加载的方式最终也是调用到了do_one_initcall只不过传入的参数实际上就是hello_init\n","categories":["其他"],"tags":["linux内核"]},{"title":"skb操作函数(一)","url":"/2025/06/15/skb%E7%9A%84%E7%AE%A1%E7%90%86%E5%87%BD%E6%95%B0/","content":"skb预留和对齐数据的预留和对齐主要skb_reserve(),skb_put(),skb_push(),skb_pull这个几个函数来完成\nskb_reserve()skb_reserve() 是用于预留头部空间（headroom）的函数，它的作用是在 sk_buff 结构中提前空出一部分头部空间或者为了对齐，以便后续协议栈可以在这个位置添加协议头（如 MAC&#x2F;IP&#x2F;TCP 头）。\n注意skb_reserve()只能用于空的SKB，通常在分配SKB之后就会调用这个函数，注意此时的data和tail指针指向最初的位置。当skb在协议栈中向下传递的时候，data指针是向上移动的，然后复制需要封装的协议头部，最后更新skb的len字段，具体如下图：\n\nskb_reserve() 函数实现如下所示：\nstatic inline void skb_reserve(struct sk_buff *skb, int len)&#123;\tskb-&gt;data += len;\tskb-&gt;tail += len;&#125;\n\nskb_push()将数据指针 skb-&gt;data 向前移动（减少），为报文头腾出空间，并返回新位置的指针\n它通常用于：\n\n在已有 payload（有效负载）前添加协议头（如 IP、TCP 头）；\n构造完整报文时，按从上层到下层的顺序组装头部。\n\n函数原型如下：\nvoid *skb_push(struct sk_buff *skb, unsigned int len)&#123;\tskb-&gt;data -= len;\tskb-&gt;len  += len;\tif (unlikely(skb-&gt;data &lt; skb-&gt;head))\t\tskb_under_panic(skb, len, __builtin_return_address(0));\treturn skb-&gt;data;&#125;\n\n举个发送tcp数据包的例子，具体步骤如下：\n\n当发送TCP数据时，会根据一些条件，比如MSS申请一个skb\nTCP需要在申请的缓冲区头部预留足够的空间，用来填充各层首部，由于不知道各层首部的长度，比如是否存在ip选项等，会预留一个最大长度\n把TCP的payload复制到数据缓存区\n负载构建完成后封装TCP的首部\n交付给IP层，封装IP首部\n交付给链路层，封装链路层首部\n\n上述封装各层头之前，都需要用skb_push移动data指针来开辟一段空间，上述具体流程如下图所示：\n\nskb_put()在 sk_buff 缓冲区末尾“添加数据空间”，即将 skb-&gt;tail 向后移动，并增加 skb-&gt;len，为你写入数据腾出空间。\nskb-&gt;tail 表示当前写入数据的末尾；\nskb_put() 把 tail 向后移动 len 字节，表示“打算添加 len 字节数据”；\n返回原始 tail 地址，你可以在这个地址处填入数据（如 payload）；\n函数原型如下：\nvoid *skb_put(struct sk_buff *skb, unsigned int len)&#123;\tvoid *tmp = skb_tail_pointer(skb);\tSKB_LINEAR_ASSERT(skb);\tskb-&gt;tail += len;\tskb-&gt;len  += len;\tif (unlikely(skb-&gt;tail &gt; skb-&gt;end))\t\tskb_over_panic(skb, len, __builtin_return_address(0));\treturn tmp;&#125;\n\n调用skb_put()前后skb结构变化如下所示：\n\nskb_pull()将 skb-&gt;data 指针向后移动（跳过前面的数据），并减少 skb-&gt;len，通常用于跳过协议头或处理完某一层协议之后。\n函数原型如下：\nvoid *skb_pull(struct sk_buff *skb, unsigned int len)&#123;\treturn skb_pull_inline(skb, len);&#125;static inline void *skb_pull_inline(struct sk_buff *skb, unsigned int len)&#123;\treturn unlikely(len &gt; skb-&gt;len) ? NULL : __skb_pull(skb, len);&#125;static inline void *__skb_pull(struct sk_buff *skb, unsigned int len)&#123;\tskb-&gt;len -= len;\tBUG_ON(skb-&gt;len &lt; skb-&gt;data_len);\treturn skb-&gt;data += len;&#125;\n\n假设我们收到一个 IP 报文，skb-&gt;data 指向 IP 头，现在我们要把 IP 头跳过去，交给 TCP 层：\nstruct iphdr *iph = ip_hdr(skb);  // 当前 data 指向 IP 头skb_pull(skb, iph-&gt;ihl * 4);      // 跳过 IP 头struct tcphdr *tcph = (struct tcphdr *)skb-&gt;data;  // 现在 data 指向 TCP 头\n\n条用skb_pull前后skb结构变化如下所示：\n\n链表管理函数skb_queue_head_init()初始化 skb 队列（链表头）\nstatic inline void __skb_queue_head_init(struct sk_buff_head *list)&#123;\tlist-&gt;prev = list-&gt;next = (struct sk_buff *)list;\tlist-&gt;qlen = 0;&#125;static inline void skb_queue_head_init(struct sk_buff_head *list)&#123;\tspin_lock_init(&amp;list-&gt;lock);\t__skb_queue_head_init(list);&#125;\n\nskb_queue_head()将一个 sk_buff（网络数据包）添加到指定 sk_buff_head 队列的头部，并加锁保护\nvoid skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk)&#123;\tunsigned long flags;\tspin_lock_irqsave(&amp;list-&gt;lock, flags);\t__skb_queue_head(list, newsk);\tspin_unlock_irqrestore(&amp;list-&gt;lock, flags);&#125;static inline void __skb_queue_head(struct sk_buff_head *list,\t\t\t\t    struct sk_buff *newsk)&#123;\t__skb_queue_after(list, (struct sk_buff *)list, newsk);&#125;static inline void __skb_queue_after(struct sk_buff_head *list,\t\t\t\t     struct sk_buff *prev,\t\t\t\t     struct sk_buff *newsk)&#123;\t__skb_insert(newsk, prev, prev-&gt;next, list);&#125;\t\t\t\tstruct sk_buff *prev, struct sk_buff *next,\t\t\t\tstruct sk_buff_head *list)&#123;\t/* See skb_queue_empty_lockless() and skb_peek_tail()\t * for the opposite READ_ONCE()\t */\tWRITE_ONCE(newsk-&gt;next, next);\tWRITE_ONCE(newsk-&gt;prev, prev);\tWRITE_ONCE(next-&gt;prev, newsk);\tWRITE_ONCE(prev-&gt;next, newsk);\tlist-&gt;qlen++;&#125;\n\nskb_dequeue从一个 skb 队列（struct sk_buff_head）头部取出并移除一个 sk_buff（网络数据包）。\nstruct sk_buff *skb_dequeue(struct sk_buff_head *list)&#123;\tunsigned long flags;\tstruct sk_buff *result;\tspin_lock_irqsave(&amp;list-&gt;lock, flags);\tresult = __skb_dequeue(list);\tspin_unlock_irqrestore(&amp;list-&gt;lock, flags);\treturn result;&#125;static inline struct sk_buff *__skb_dequeue(struct sk_buff_head *list)&#123;\tstruct sk_buff *skb = skb_peek(list);\tif (skb)\t\t__skb_unlink(skb, list);\treturn skb;&#125;static inline void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)&#123;\tstruct sk_buff *next, *prev;\tWRITE_ONCE(list-&gt;qlen, list-&gt;qlen - 1);\tnext\t   = skb-&gt;next;\tprev\t   = skb-&gt;prev;\tskb-&gt;next  = skb-&gt;prev = NULL;\tWRITE_ONCE(next-&gt;prev, prev);\tWRITE_ONCE(prev-&gt;next, next);&#125;\n\nskb_queue_purge释放并清空该 skb 队列中的所有 skb，其实就是出队+kfree skb\nvoid skb_queue_purge(struct sk_buff_head *list)&#123;\tstruct sk_buff *skb;\twhile ((skb = skb_dequeue(list)) != NULL)\t\tkfree_skb(skb);&#125;\n\nskb_queue_walk一个宏，遍历skb链表中每一个元素\n#define skb_queue_walk(queue, skb) \\\t\tfor (skb = (queue)-&gt;next;\t\t\t\t\t\\\t\t     skb != (struct sk_buff *)(queue);\t\t\t\t\\\t\t     skb = skb-&gt;next)\n\n","categories":["网络协议栈源码学习"],"tags":["skb"]},{"title":"skb操作函数(二)","url":"/2025/06/17/skb%E7%9A%84%E7%AE%A1%E7%90%86%E5%87%BD%E6%95%B0%E4%BA%8C/","content":"删除skb尾部数据skb_trim()skb_trim() 是 Linux 内核中一个用于截断数据包长度的函数，主要用于收缩 skb 的数据长度（通常是从尾部截断）\nvoid skb_trim(struct sk_buff *skb, unsigned int len);\n\nvoid skb_trim(struct sk_buff *skb, unsigned int len)&#123;\tif (skb-&gt;len &gt; len)\t\t__skb_trim(skb, len);&#125;static inline void __skb_trim(struct sk_buff *skb, unsigned int len)&#123;\t__skb_set_length(skb, len);&#125;static inline void __skb_set_length(struct sk_buff *skb, unsigned int len)&#123;\tif (WARN_ON(skb_is_nonlinear(skb)))\t\treturn;\tskb-&gt;len = len;\tskb_set_tail_pointer(skb, len);&#125;static inline void skb_set_tail_pointer(struct sk_buff *skb, const int offset)&#123;\t//注意这里是先将tail指向data，然后在偏移offset\tskb_reset_tail_pointer(skb);\tskb-&gt;tail += offset;&#125;\n\nskb_trim操作前后如下图所示：\n\npskb_trim()pskb_trim() 是 Linux 内核中用于“安全地裁剪 skb 长度”的函数，类似于 skb_trim()，但它支持非线性（分页）skb，是一个更强大、更通用的版本。\nstatic inline int pskb_trim(struct sk_buff *skb, unsigned int len)&#123;\treturn (len &lt; skb-&gt;len) ? __pskb_trim(skb, len) : 0;&#125;static inline int __pskb_trim(struct sk_buff *skb, unsigned int len)&#123;\t//这里判断了是否存在了非线性部分的数据\tif (skb-&gt;data_len)\t\treturn ___pskb_trim(skb, len);\t__skb_trim(skb, len);\treturn 0;&#125;/* Trims skb to length len. It can change skb pointers. */int ___pskb_trim(struct sk_buff *skb, unsigned int len)&#123;\tstruct sk_buff **fragp;\tstruct sk_buff *frag;\tint offset = skb_headlen(skb); //线性的长度\tint nfrags = skb_shinfo(skb)-&gt;nr_frags; //有几个页\tint i;\tint err;\t//如果有别人在使用这个skb 调用pskb_expand_head 复制skb\tif (skb_cloned(skb) &amp;&amp;\t    unlikely((err = pskb_expand_head(skb, 0, 0, GFP_ATOMIC))))\t\treturn err;\ti = 0;\t//线性长度大于要阶段的部分，那就直接drop page就可以了\tif (offset &gt;= len)\t\tgoto drop_pages;\tfor (; i &lt; nfrags; i++) &#123;\t\tint end = offset + skb_frag_size(&amp;skb_shinfo(skb)-&gt;frags[i]);\t\t//没到na&#x27;gepage就continue\t\tif (end &lt; len) &#123;\t\t\toffset = end;\t\t\tcontinue;\t\t&#125;\t\tskb_frag_size_set(&amp;skb_shinfo(skb)-&gt;frags[i++], len - offset);drop_pages:\t\tskb_shinfo(skb)-&gt;nr_frags = i;\t\tfor (; i &lt; nfrags; i++)\t\t\tskb_frag_unref(skb, i);\t\t//如果有fraglist非线性部分，释放fraglist\t\tif (skb_has_frag_list(skb))\t\t\tskb_drop_fraglist(skb);\t\tgoto done;\t&#125;\t//处理没有page只有fraglist的情况\tfor (fragp = &amp;skb_shinfo(skb)-&gt;frag_list; (frag = *fragp);\t     fragp = &amp;frag-&gt;next) &#123;\t\tint end = offset + frag-&gt;len;\t\tif (skb_shared(frag)) &#123;\t\t\tstruct sk_buff *nfrag;\t\t\tnfrag = skb_clone(frag, GFP_ATOMIC);\t\t\tif (unlikely(!nfrag))\t\t\t\treturn -ENOMEM;\t\t\tnfrag-&gt;next = frag-&gt;next;\t\t\tconsume_skb(frag);\t\t\tfrag = nfrag;\t\t\t*fragp = frag;\t\t&#125;\t\tif (end &lt; len) &#123;\t\t\toffset = end;\t\t\tcontinue;\t\t&#125;\t\tif (end &gt; len &amp;&amp;\t\t    unlikely((err = pskb_trim(frag, len - offset))))\t\t\treturn err;\t\tif (frag-&gt;next)\t\t\tskb_drop_list(&amp;frag-&gt;next);\t\tbreak;\t&#125;done://设置skb的len相关的字段\tif (len &gt; skb_headlen(skb)) &#123;\t\tskb-&gt;data_len -= skb-&gt;len - len;\t\tskb-&gt;len       = len;\t&#125; else &#123;\t\tskb-&gt;len       = len;\t\tskb-&gt;data_len  = 0;\t\tskb_set_tail_pointer(skb, len);\t&#125;\tif (!skb-&gt;sk || skb-&gt;destructor == sock_edemux)\t\tskb_condense(skb);\treturn 0;&#125;\n\npskb_trim操作前后如下所示：\n\n\n分割skbskb_split把一个大的 skb 分裂成两个 skb：保留前半段在原 skb 中，后半段移到新的 skb 中返回。这里具体可以分为两种情况，第一种，被拆分的数据包的线性部分就够用了。第二种，被拆分的数据包线性部分不够用，那就需要额外处理非线性部分\n注意:tcp分段中会用到这个函数，问题，为什么没考虑fraglist呢？跟如何调用这个函数有关？？\n**skb_split**() 函数原型如下：\nvoid skb_split(struct sk_buff *skb, struct sk_buff *skb1, const u32 len)&#123;\tint pos = skb_headlen(skb);\t//拷贝原本数据包的tx_flag\tskb_shinfo(skb1)-&gt;tx_flags |= skb_shinfo(skb)-&gt;tx_flags &amp;\t\t\t\t      SKBTX_SHARED_FRAG;\tskb_zerocopy_clone(skb1, skb, 0);//tcp zc 或者xdp 会有相应的处理\tif (len &lt; pos)\t/* Split line is inside header. *///\t//第一种情况， len的长度小于非线性部分的长度\t\tskb_split_inside_header(skb, skb1, len, pos);\telse\t\t/* Second chunk has no header, nothing to copy. */\t//第二种情况，需要处理非线性部分\t\tskb_split_no_header(skb, skb1, len, pos);&#125;\n\n上面的skb和skb1说明：\n\n原始大包在 skb 里；\n“拆出后半部分”放到新的 skb —— 就是 skb1；\n\nskb_split_inside_header 逻辑就是，把原本skb中除了要拆分出去的数据，都交友skb1去管理\nstatic inline void skb_split_inside_header(struct sk_buff *skb,\t\t\t\t\t   struct sk_buff* skb1,\t\t\t\t\t   const u32 len, const int pos)&#123;\tint i;\t//从原始 skb 的线性区中，从偏移len开始的位置，拷贝 pos - len 字节的数据到 新 skb1 的线性区尾部。\tskb_copy_from_linear_data_offset(skb, len, skb_put(skb1, pos - len),\t\t\t\t\t pos - len);\t/* And move data appendix as is. */\tfor (i = 0; i &lt; skb_shinfo(skb)-&gt;nr_frags; i++)\t\tskb_shinfo(skb1)-&gt;frags[i] = skb_shinfo(skb)-&gt;frags[i];\t//这里其实就是把原本skb的非线性部分，被新的skb1给引用了\tskb_shinfo(skb1)-&gt;nr_frags = skb_shinfo(skb)-&gt;nr_frags;\tskb_shinfo(skb)-&gt;nr_frags  = 0;\tskb1-&gt;data_len\t\t   = skb-&gt;data_len;\tskb1-&gt;len\t\t   += skb1-&gt;data_len;\tskb-&gt;data_len\t\t   = 0;\tskb-&gt;len\t\t   = len;\tskb_set_tail_pointer(skb, len);&#125;\n\n第二种情况skb_split_no_header() 用于将一个 skb 数据包在线性数据区 不需要拷贝 header 的情况下 进行拆分（split）的。此时拆分点 len 已经在非线性区域，所以只处理 frags。\nstatic inline void skb_split_no_header(struct sk_buff *skb,\t\t\t\t       struct sk_buff* skb1,\t\t\t\t       const u32 len, int pos)&#123;\tint i, k = 0;\tconst int nfrags = skb_shinfo(skb)-&gt;nr_frags;\tskb_shinfo(skb)-&gt;nr_frags = 0;\t//新的skb1的长度只有非线性部分了\tskb1-&gt;len\t\t  = skb1-&gt;data_len = skb-&gt;len - len;\t//原始的skb只保存len长度的数据\tskb-&gt;len\t\t  = len;\t//这里原始skb的非线性部分就是要保留的总长度减去一个头部 长度\tskb-&gt;data_len\t\t  = len - pos;\tfor (i = 0; i &lt; nfrags; i++) &#123;\t\t//这里的size是每一个page的长度\t\tint size = skb_frag_size(&amp;skb_shinfo(skb)-&gt;frags[i]);\t\t//非线性部分+size还没到截断的长度话\t\tif (pos + size &gt; len) &#123;\t\t\t//这里skb引用了skb\t\t\tskb_shinfo(skb1)-&gt;frags[k] = skb_shinfo(skb)-&gt;frags[i];\t\t\tif (pos &lt; len) &#123;\t\t\t\t/* Split frag.\t\t\t\t * We have two variants in this case:\t\t\t\t * 1. Move all the frag to the second\t\t\t\t *    part, if it is possible. F.e.\t\t\t\t *    this approach is mandatory for TUX,\t\t\t\t *    where splitting is expensive.\t\t\t\t * 2. Split is accurately. We make this.\t\t\t\t */\t\t\t\tskb_frag_ref(skb, i);\t\t\t\tskb_frag_off_add(&amp;skb_shinfo(skb1)-&gt;frags[0], len - pos);\t\t\t\tskb_frag_size_sub(&amp;skb_shinfo(skb1)-&gt;frags[0], len - pos);\t\t\t\tskb_frag_size_set(&amp;skb_shinfo(skb)-&gt;frags[i], len - pos);\t\t\t\tskb_shinfo(skb)-&gt;nr_frags++;\t\t\t&#125;\t\t\tk++;\t\t&#125; else\t\t\tskb_shinfo(skb)-&gt;nr_frags++;\t\t//这里更新了pos\t\tpos += size;\t&#125;\t//设置skb1 nr_frag数量\tskb_shinfo(skb1)-&gt;nr_frags = k;&#125;\n\n\n拆分后：\n\n\n拆分后：\n\n其他函数pskb_may_pull核心作用是确保 skb 的线性区域中至少有 len 字节的数据。如果不够，它会尝试从非线性区（页片 frags 或 frag_list）中 拉取（pull）数据进线性区域。\nstatic inline bool pskb_may_pull(struct sk_buff *skb, unsigned int len)&#123;\tif (likely(len &lt;= skb_headlen(skb)))\t\treturn true;\tif (unlikely(len &gt; skb-&gt;len))\t\treturn false;\treturn __pskb_pull_tail(skb, len - skb_headlen(skb)) != NULL;&#125;\n\n\n\nskb_queue_empty判断skb的队列是否为空\nstatic inline int skb_queue_empty(const struct sk_buff_head *list)&#123;\treturn list-&gt;next == (const struct sk_buff *) list;&#125;\n\nskb_get增加引用计数\nstatic inline struct sk_buff *skb_get(struct sk_buff *skb)&#123;\trefcount_inc(&amp;skb-&gt;users);\treturn skb;&#125;\n\nskb_shared判断是否有多个引用\nstatic inline int skb_shared(const struct sk_buff *skb)&#123;\treturn refcount_read(&amp;skb-&gt;users) != 1;&#125;\n\nskb_shared_check()如果skb被引用，则clone此skb并返回得到的skb\nstatic inline struct sk_buff *skb_share_check(struct sk_buff *skb, gfp_t pri)&#123;\tmight_sleep_if(gfpflags_allow_blocking(pri));\tif (skb_shared(skb)) &#123;\t\tstruct sk_buff *nskb = skb_clone(skb, pri);\t\t//克隆后会对原来的skb引用计数-\t\tif (likely(nskb))\t\t\tconsume_skb(skb);\t\telse\t\t\tkfree_skb(skb);\t\tskb = nskb;\t&#125;\treturn skb;&#125;\n\nskb_unshare与skb_shared_check类似区别是一个是clone一个是copy\nstatic inline struct sk_buff *skb_unshare(struct sk_buff *skb,\t\t\t\t\t  gfp_t pri)&#123;\tmight_sleep_if(gfpflags_allow_blocking(pri));\tif (skb_cloned(skb)) &#123;\t\tstruct sk_buff *nskb = skb_copy(skb, pri);\t\t/* Free our shared copy */\t\tif (likely(nskb))\t\t\tconsume_skb(skb);\t\telse\t\t\tkfree_skb(skb);\t\tskb = nskb;\t&#125;\treturn skb;&#125;\n\nskb_orphan取消skb与sock结构的关联\nstatic inline void skb_orphan(struct sk_buff *skb)&#123;\tif (skb-&gt;destructor) &#123;\t\tskb-&gt;destructor(skb);\t\tskb-&gt;destructor = NULL;\t\tskb-&gt;sk\t\t= NULL;\t&#125; else &#123;\t\tBUG_ON(skb-&gt;sk);\t&#125;&#125;\n\nskb_cow(copy on wirte)确保skb有指定的头部空间，如果没有指定的头部空间，就重新分配。\nstatic inline int __skb_cow(struct sk_buff *skb, unsigned int headroom,\t\t\t    int cloned)&#123;\tint delta = 0;\t//不够的空间保存到delta中\tif (headroom &gt; skb_headroom(skb))\t\tdelta = headroom - skb_headroom(skb);\t//如果不够，或者skb是被clone过的\tif (delta || cloned)        //这里的第二个参数就是头部要扩充的空间，\t\treturn pskb_expand_head(skb, ALIGN(delta, NET_SKB_PAD), 0,\t\t\t\t\tGFP_ATOMIC);\treturn 0;&#125;\n\n","categories":["网络协议栈源码学习"],"tags":["skb"]},{"title":"skb_copy && skb_clone","url":"/2025/06/19/skb%E7%AE%A1%E7%90%86%E5%87%BD%E6%95%B0%E4%B8%89/","content":"skb_clone()skb_clone() 创建一个新的 sk_buff 结构体，共享原始 skb 的数据 buffer，但结构体本身是独立的。\nstruct sk_buff *skb_clone(struct sk_buff *skb, gfp_t gfp_mask)&#123;\t//这里先拿到flones，后面可能快速clone\tstruct sk_buff_fclones *fclones = container_of(skb,\t\t\t\t\t\t       struct sk_buff_fclones,\t\t\t\t\t\t       skb1);\tstruct sk_buff *n;\tif (skb_orphan_frags(skb, gfp_mask))\t\treturn NULL;\t//这里判断skb alloc的时候是否有skb2，如果有有直接用skb2\tif (skb-&gt;fclone == SKB_FCLONE_ORIG &amp;&amp;\t    refcount_read(&amp;fclones-&gt;fclone_ref) == 1) &#123;\t\tn = &amp;fclones-&gt;skb2;\t\trefcount_set(&amp;fclones-&gt;fclone_ref, 2);\t&#125; else &#123;\t\tif (skb_pfmemalloc(skb))\t\t\tgfp_mask |= __GFP_MEMALLOC;\t\t//这里分配一个skbi二狗提\t\tn = kmem_cache_alloc(skbuff_head_cache, gfp_mask);\t\tif (!n)\t\t\treturn NULL;\t\tn-&gt;fclone = SKB_FCLONE_UNAVAILABLE;\t&#125;\t//设置skb的字段\treturn __skb_clone(n, skb);&#125;\n\n上述函数返回时调用__skb_clone 设置各个字段\nstatic struct sk_buff *__skb_clone(struct sk_buff *n, struct sk_buff *skb)&#123;#define C(x) n-&gt;x = skb-&gt;x\t//断开链表\tn-&gt;next = n-&gt;prev = NULL;\tn-&gt;sk = NULL;\t//这里设置了原来的大部分元数据\t__copy_skb_header(n, skb);\tC(len);//总长度\tC(data_len);//非线性部分长度\tC(mac_len);//mac头长度\tn-&gt;hdr_len = skb-&gt;nohdr ? skb_headroom(skb) : skb-&gt;hdr_len;//如果是nohdr 就保存头部空间\tn-&gt;cloned = 1; //标识是clone出来的\tn-&gt;nohdr = 0;\tn-&gt;peeked = 0; //不是peek\tC(pfmemalloc);\tn-&gt;destructor = NULL;\t//直接指针指一下\tC(tail);\tC(end);\tC(head);\tC(head_frag);\tC(data);\tC(truesize);\trefcount_set(&amp;n-&gt;users, 1);\tatomic_inc(&amp;(skb_shinfo(skb)-&gt;dataref));//增加引用计数\tskb-&gt;cloned = 1;\treturn n;#undef C&#125;\n\n上述代码如下图所示：\n\npskb_copy复制 skb 的 线性部分（即 skb-&gt;data 到 skb-&gt;tail 的部分）， 对于非线性部分（如 frags[] 和 frag_list），只是保留引用，不复制数据。\nstatic inline struct sk_buff *pskb_copy(struct sk_buff *skb,\t\t\t\t\tgfp_t gfp_mask)&#123;\treturn __pskb_copy(skb, skb_headroom(skb), gfp_mask);&#125;static inline struct sk_buff *__pskb_copy(struct sk_buff *skb, int headroom,\t\t\t\t\t  gfp_t gfp_mask)&#123;\treturn __pskb_copy_fclone(skb, headroom, gfp_mask, false);&#125;\n\n上述__pskb_copy_fclone具体实现如下，主要就是申请一个skb，并复制线性部分的空间，非线性部分就是增加原来的的引用，之后复制原始skb的部分字段。\nstruct sk_buff *__pskb_copy_fclone(struct sk_buff *skb, int headroom,\t\t\t\t   gfp_t gfp_mask, bool fclone)&#123;\t//线性部分加原来数据包头部未使用的空间\tunsigned int size = skb_headlen(skb) + headroom;\t//是否需要fclone，如果需要，alloc的时候就申请两个skb\tint flags = skb_alloc_rx_flag(skb) | (fclone ? SKB_ALLOC_FCLONE : 0);\t//alloc一个skb\tstruct sk_buff *n = __alloc_skb(size, gfp_mask, flags, NUMA_NO_NODE);```cif (!n)\tgoto out;/* Set the data pointer *///设置data和tail指针skb_reserve(n, headroom);/* Set the tail pointer and length *///设置tail指针的位置skb_put(n, skb_headlen(skb));/* Copy the bytes *///memcpy一个线性部分skb_copy_from_linear_data(skb, n-&gt;data, n-&gt;len);n-&gt;truesize += skb-&gt;data_len;n-&gt;data_len  = skb-&gt;data_len;n-&gt;len\t     = skb-&gt;len;//处理非线性部分，就是加个引用if (skb_shinfo(skb)-&gt;nr_frags) &#123;\tint i;\t//zc相关大概率不会走\tif (skb_orphan_frags(skb, gfp_mask) ||\t    skb_zerocopy_clone(n, skb, gfp_mask)) &#123;\t\tkfree_skb(n);\t\tn = NULL;\t\tgoto out;\t&#125;\tfor (i = 0; i &lt; skb_shinfo(skb)-&gt;nr_frags; i++) &#123;\t\tskb_shinfo(n)-&gt;frags[i] = skb_shinfo(skb)-&gt;frags[i];\t\tskb_frag_ref(skb, i);\t&#125;\tskb_shinfo(n)-&gt;nr_frags = i;&#125;//如果哟fraglistif (skb_has_frag_list(skb)) &#123;\tskb_shinfo(n)-&gt;frag_list = skb_shinfo(skb)-&gt;frag_list;\t//加引用计数\tskb_clone_fraglist(n);&#125;//复制元数据skb_copy_header(n, skb);```out:\treturn n;&#125;\n\n拷贝后的skb如下图所示：\n\nskb_copyskb_copy() 是 Linux 内核中用于复制一个 sk_buff（socket buffer）的函数，作用是 深拷贝整个 skb 的内容 —— 包括线性部分（head 数据）和非线性部分（paged frags），注意这里拷贝后的skb就完全是一个线性的skb了，也就是没有非线性部分了。\nstruct sk_buff *skb_copy(const struct sk_buff *skb, gfp_t gfp_mask)&#123;\t//原来数据包的头部剩余空间\tint headerlen = skb_headroom(skb);\t//线性长度加非线性长度\tunsigned int size = skb_end_offset(skb) + skb-&gt;data_len;\t//直接申请了线性长度加非线性长度的大小，注意：这里直接线性部分变成了非线性部分\tstruct sk_buff *n = __alloc_skb(size, gfp_mask,\t\t\t\t\tskb_alloc_rx_flag(skb), NUMA_NO_NODE);\tif (!n)\t\treturn NULL;\t/* Set the data pointer */\t//设置data指针\tskb_reserve(n, headerlen);\t/* Set the tail pointer and length */\t//设置tail指针\tskb_put(n, skb-&gt;len);\t//这里把非线性部分的数据也给拷贝了，偏\tBUG_ON(skb_copy_bits(skb, -headerlen, n-&gt;head, headerlen + skb-&gt;len));\t//拷贝skb的字段\tskb_copy_header(n, skb);\treturn n;&#125;\n\n上述代码在申请skb时直接申请了线性长度加非线性长度的大小，然后调用skb_copy_bits完成真正的copy\n//offset为从哪开始拷贝，to是拷贝到那里，len是拷贝多长int skb_copy_bits(const struct sk_buff *skb, int offset, void *to, int len)&#123;\tint start = skb_headlen(skb);//线性部分长度\tstruct sk_buff *frag_iter;\tint i, copy;\tif (offset &gt; (int)skb-&gt;len - len)\t\tgoto fault;\t/* Copy header. */\t//复制线性部分\tif ((copy = start - offset) &gt; 0) &#123;\t\tif (copy &gt; len)\t\t\tcopy = len;\t\t//memcpy一个头部长度\t\tskb_copy_from_linear_data_offset(skb, offset, to, copy);\t\tif ((len -= copy) == 0)\t\t\treturn 0;\t\toffset += copy;\t\tto     += copy;\t&#125;\tfor (i = 0; i &lt; skb_shinfo(skb)-&gt;nr_frags; i++) &#123;\t\tint end;\t\tskb_frag_t *f = &amp;skb_shinfo(skb)-&gt;frags[i];//每一个page的管理结构\t\tWARN_ON(start &gt; offset + len);\t\t//线性部分的长度加上frag的长度，表示当前结束的位置(数据包当前page+线性部分)\t\tend = start + skb_frag_size(f);\t\t//是否有要高倍的数据\t\tif ((copy = end - offset) &gt; 0) &#123;\t\t\tu32 p_off, p_len, copied;\t\t\tstruct page *p;\t\t\tu8 *vaddr;\t\t\tif (copy &gt; len)\t\t\t\tcopy = len;\t\t\t//拷贝每一个页的数据\t\t\tskb_frag_foreach_page(f,\t\t\t\t\t      skb_frag_off(f) + offset - start,\t\t\t\t\t      copy, p, p_off, p_len, copied) &#123;\t\t\t\tvaddr = kmap_atomic(p);//映射页到虚拟地址\t\t\t\t//memcpy\t\t\t\tmemcpy(to + copied, vaddr + p_off, p_len);\t\t\t\tkunmap_atomic(vaddr);\t\t\t&#125;\t\t\t//如果非线性部分都拷贝完了，也就是没有fraglist就直接return了\t\t\tif ((len -= copy) == 0)\t\t\t\treturn 0;\t\t\toffset += copy;//更新offset和同也就是更新从哪开始复制，复制到哪去\t\t\tto     += copy;\t\t&#125;\t\tstart = end;//变成下一个页对应数据包长度的起始地址。\t&#125;\t//有fraglist的情况\tskb_walk_frags(skb, frag_iter) &#123;\t\tint end;\t\tWARN_ON(start &gt; offset + len);\t\tend = start + frag_iter-&gt;len;\t\tif ((copy = end - offset) &gt; 0) &#123;\t\t\tif (copy &gt; len)\t\t\t\tcopy = len;\t\t\tif (skb_copy_bits(frag_iter, offset - start, to, copy))\t\t\t\tgoto fault;\t\t\tif ((len -= copy) == 0)\t\t\t\treturn 0;\t\t\toffset += copy;\t\t\tto     += copy;\t\t&#125;\t\tstart = end;\t&#125;\tif (!len)\t\treturn 0;fault:\treturn -EFAULT;&#125;\n\n","categories":["网络协议栈源码学习"],"tags":["skb"]},{"title":"struct skb && alloc_skb","url":"/2025/06/11/sockbuff%E7%BB%93%E6%9E%84/","content":"skb结构体及各个字段如下所示：\nstruct sk_buff &#123;\tunion &#123;\t\t//联合体第一部分\t\tstruct &#123;\t\t\t/* These two members must be first. */\t\t//头尾指针拉成链，例如tcp的接收发送队列\t\t\tstruct sk_buff\t\t*next;  \t\t\tstruct sk_buff\t\t*prev;\t\t\t\t\tunion &#123;\t\t\t\tstruct net_device\t*dev; //skb所属的netdev由驱动设置，比如指向bond设备\t\t\t\t/* Some protocols might use this space to store information,\t\t\t\t * while device pointer would be NULL.\t\t\t\t * UDP receive path is one user.\t\t\t\t */\t\t\t\tunsigned long\t\tdev_scratch; //udp会复用这部分空间，比如存校验和信息\t\t\t&#125;;\t\t&#125;;\t\tstruct rb_node\t\trbnode; //红黑数节点，tcp的重传队列，或者ip重组，或者tc会用到\t\tstruct list_head\tlist; //网卡收包没送到协议栈前会用到\t&#125;;\tunion &#123;\t\tstruct sock\t\t*sk; //所属的sock\t\tint\t\t\tip_defrag_offset; //保存分片报文的offset\t&#125;;\tunion &#123;\t\tktime_t\t\ttstamp; //接收发送时候会设置时间戳，例如dev-ximt 或者netif_receive_skb\t\tu64\t\tskb_mstamp_ns;/ //tcp的tx_delay会把值赋值到这个字段上pacing相关，tcp_repair也会用到 \t&#125;;\t/*\t * This is the control buffer. It is free to use for every\t * layer. Please put your private variables there. If you\t * want to keep them across layers you have to do a skb_clone()\t * first. This is owned by whoever has the skb queued ATM.\t */\tchar\t\t\tcb[48] __aligned(8); //不同协议层的私有字段，48B\tunion &#123;\t\tstruct &#123;\t\t\tunsigned long\t_skb_refdst; //查找路由后会 设置dst\t\t\tvoid\t\t(*destructor)(struct sk_buff *skb); //skb的析构函数\t\t&#125;;\t\tstruct list_head\ttcp_tsorted_anchor;  //repair模式使用会链在tpsock的一个队列中，清重传队列会移除\t&#125;;#if defined(CONFIG_NF_CONNTRACK) || defined(CONFIG_NF_CONNTRACK_MODULE)\tunsigned long\t\t _nfct;#endif\tunsigned int\t\tlen,   //数据包线性部分加非线性部分的总长度\t\t\t\tdata_len; //非线性部分的长度\t__u16\t\t\tmac_len, //mac头长度\t\t\t\thdr_len;  //头部长度，好像只有clone时候会用到\t/* Following fields are _not_ copied in __copy_skb_header()\t * Note that queue_mapping is here mostly to fill a hole.\t */\t__u16\t\t\tqueue_mapping; //对应的硬件队列，通常是hash算出来的/* if you move cloned around you also must adapt those constants */#ifdef __BIG_ENDIAN_BITFIELD#define CLONED_MASK\t(1 &lt;&lt; 7)#else#define CLONED_MASK\t1#endif#define CLONED_OFFSET()\t\toffsetof(struct sk_buff, __cloned_offset)\t/* private: */\t__u8\t\t\t__cloned_offset[0]; //实际没有，类似一个占位符\t/* public: */\t__u8\t\t\tcloned:1,   //是否被克隆过\t\t\t\t\tnohdr:1,\t//是否有头部空间，noheadroom为1，表示不能给头部添加长度了，tcp会置1\t\t\t\t\tfclone:2, \t//标识使用的那种克隆\t\t\t\tpeeked:1,   //udp的peek\t\t\t\thead_frag:1,  //网卡驱动申请page的时候就会设置这个字段，好像就是标识是从page上分配的\t\t\t\tpfmemalloc:1; //申请存放数据报道page如果pfmemalloc 池分配的页  就 为1 ，\t\t\t\t\t\t\t\t//表示存在内存压力，有这个标志后协议栈会有特殊的处理#ifdef CONFIG_SKB_EXTENSIONS\t__u8\t\t\tactive_extensions;#endif\t/* fields enclosed in headers_start/headers_end are copied\t * using a single memcpy() in __copy_skb_header()\t */\t/* private: */\t__u32\t\t\theaders_start[0];//占位符\t/* public: *//* if you move pkt_type around you also must adapt those constants */#ifdef __BIG_ENDIAN_BITFIELD#define PKT_TYPE_MAX\t(7 &lt;&lt; 5)#else#define PKT_TYPE_MAX\t7#endif#define PKT_TYPE_OFFSET()\toffsetof(struct sk_buff, __pkt_type_offset)\t/* private: */\t__u8\t\t\t__pkt_type_offset[0]; //占位符\t/* public: */\t__u8\t\t\tpkt_type:3;  //驱动设置的，本地广播还是other\t__u8\t\t\tignore_df:1;  //为1表示允许分片，用于隧道和桥接等处理\t__u8\t\t\tnf_trace:1; //netfilter相关，置1后netfllter可以trace\t__u8\t\t\tip_summed:2; //标识是否硬件卸载校验和\t__u8\t\t\tooo_okay:1; //多队列场景下，如果tcp队列中没有数据，可以将这位置为1，表示可以乱序发送\t\t\t\t\t\t\t\t//发送后，在pick_tx的时候就可能会换一个硬件队列，实现负载均衡\t__u8\t\t\tl4_hash:1;  //skb的hash字段是否是4元组的hash值\t__u8\t\t\tsw_hash:1; //skb的hash是否是硬件算的，会通过描述符带上来\t__u8\t\t\twifi_acked_valid:1;\t__u8\t\t\twifi_acked:1;\t__u8\t\t\tno_fcs:1;   //驱动使用，通知硬件是否需要计算校验和\t/* Indicates the inner headers are valid in the skbuff. */\t__u8\t\t\tencapsulation:1;  //标识是否是隧道报文，接收方向由驱动设置\t__u8\t\t\tencap_hdr_csum:1;  //隧道报文外层头部 1为需要计算校验和\t__u8\t\t\tcsum_valid:1;  //校验和是否有效#ifdef __BIG_ENDIAN_BITFIELD#define PKT_VLAN_PRESENT_BIT\t7#else#define PKT_VLAN_PRESENT_BIT\t0#endif#define PKT_VLAN_PRESENT_OFFSET()\toffsetof(struct sk_buff, __pkt_vlan_present_offset)\t/* private: */\t__u8\t\t\t__pkt_vlan_present_offset[0];\t/* public: */\t__u8\t\t\tvlan_present:1;  //是否存在vlan\t__u8\t\t\tcsum_complete_sw:1; //checksum是否是软件算的\t__u8\t\t\tcsum_level:2;\t__u8\t\t\tcsum_not_inet:1;  //非标准的校验和，比如sctp\t__u8\t\t\tdst_pending_confirm:1;  //标识路由是否是pending状态，tcptransmit 时候可能会设置#ifdef CONFIG_IPV6_NDISC_NODETYPE\t__u8\t\t\tndisc_nodetype:2;#endif\t__u8\t\t\tipvs_property:1;   //四层负载均衡相关\t__u8\t\t\tinner_protocol_type:1;  //标识隧道包报文的内层是以太网还是ip头\t__u8\t\t\tremcsum_offload:1; //远程校验和卸载，用于隧道报文处理#ifdef CONFIG_NET_SWITCHDEV\t__u8\t\t\toffload_fwd_mark:1;\t__u8\t\t\toffload_l3_fwd_mark:1;#endif#ifdef CONFIG_NET_CLS_ACT\t__u8\t\t\ttc_skip_classify:1;\t__u8\t\t\ttc_at_ingress:1;#endif#ifdef CONFIG_NET_REDIRECT\t__u8\t\t\tredirected:1;\t__u8\t\t\tfrom_ingress:1;#endif#ifdef CONFIG_TLS_DEVICE\t__u8\t\t\tdecrypted:1;#endif#ifdef CONFIG_NET_SCHED\t__u16\t\t\ttc_index;\t/* traffic control index */#endif\tunion &#123;\t\t__wsum\t\tcsum;   //各层的checksum\t\tstruct &#123;\t\t\t__u16\tcsum_start;  //发送端计算校验和开始的地方\t\t\t__u16\tcsum_offset; //发送端计算校验和结束的地方\t\t&#125;;\t&#125;;\t__u32\t\t\tpriority; //用户配置，用于选择网卡硬件队列\tint\t\t\tskb_iif;  //netfreciverskb中设置，输入网口的索引\t__u32\t\t\thash; //数据包hash值硬件可以通过描述符带上来\t__be16\t\t\tvlan_proto; //vlan的type  //网卡支持vlan卸载的话就会把vlan字段赋值\t__u16\t\t\tvlan_tci; //16位 vlan id和优先级#if defined(CONFIG_NET_RX_BUSY_POLL) || defined(CONFIG_XPS)  //绕过软中断 直接轮询收包\tunion &#123;\t\tunsigned int\tnapi_id;\t\tunsigned int\tsender_cpu;\t&#125;;#endif#ifdef CONFIG_NETWORK_SECMARK\t__u32\t\tsecmark;#endif\tunion &#123;\t\t__u32\t\tmark;        //用户配置的？ 很多地方用到 iptable tc ovs\t\t__u32\t\treserved_tailroom;  //申请数据包的时候end - tail -size 也就是保留的空间\t&#125;;\tunion &#123;\t\t__be16\t\tinner_protocol; //隧道报文内内存协议类型\t\t__u8\t\tinner_ipproto;  //隧道报文内层i \t&#125;;\t__u16\t\t\tinner_transport_header;  //隧道报文4层头的偏移，用来直接找4层头\t__u16\t\t\tinner_network_header; //隧道报文3层头偏移，找3层投\t__u16\t\t\tinner_mac_header;//找二层头\t__be16\t\t\tprotocol;\t__u16\t\t\ttransport_header;\t__u16\t\t\tnetwork_header;\t__u16\t\t\tmac_header; //同上\t/* private: */\t__u32\t\t\theaders_end[0];\t/* public: */\t/* These elements must be at the end, see alloc_skb() for details.  */\tsk_buff_data_t\t\ttail;//有效数据尾部\tsk_buff_data_t\t\tend;  //缓冲区结尾\tunsigned char\t\t*head, //缓冲区头\t\t\t\t*data;  //数据头\tunsigned int\t\ttruesize; //skb结构体大小加缓冲区大小\trefcount_t\t\tusers; //引用技术#ifdef CONFIG_SKB_EXTENSIONS\t/* only useable after checking -&gt;active_extensions != 0 */\tstruct skb_ext\t\t*extensions;#endif&#125;;\n\nskb的申请通常调用的是封装了__alloc_skb的函数，比如网卡驱动使用netdev_alloc_skb，napi_alloc_skb， 或者build_skb()+alloc_pages()数据包 tcp_sendmsg_locked中使用alloc_skb_fclone 申请数据包，其实最终都调用 到__alloc_skb只不过传递的参数不同\n这里直接介绍__alloc_skb的实现\n函数原型：\nstruct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask, int flags, int node)\n\n\n\n\n参数\n含义\n\n\n\nsize\n希望为 skb 分配的数据区大小\n\n\ngfp_mask\n内存分配标志，例如 GFP_KERNEL 或 GFP_ATOMIC\n\n\nflags\nskb 分配标志，比如是否是 RX 或是否要 FCLONE\n\n\nnode\nNUMA 节点编号，在哪个节点上分配内存\n\n\nstruct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,\t\t\t    int flags, int node)&#123;\tstruct kmem_cache *cache;\tstruct skb_shared_info *shinfo;\tstruct sk_buff *skb;\tu8 *data;\tbool pfmemalloc;\t//这个根据flag的类型，选择不同的cache来分配skb，tcp发送就设置了这个标志，\t//flcone是直接申请两个skb因为tcp发送路径经常需要clone\tcache = (flags &amp; SKB_ALLOC_FCLONE)\t\t? skbuff_fclone_cache : skbuff_head_cache;\t//是否是低内存情况下分配的skb\tif (sk_memalloc_socks() &amp;&amp; (flags &amp; SKB_ALLOC_RX))\t\tgfp_mask |= __GFP_MEMALLOC;\t/* Get the HEAD */\t//这里真正申请了一个skb       结构  \tskb = kmem_cache_alloc_node(cache, gfp_mask &amp; ~__GFP_DMA, node);\tif (!skb)\t\tgoto out;\t//预取\tprefetchw(skb);\t/* We do our best to align skb_shared_info on a separate cache\t * line. It usually works because kmalloc(X &gt; SMP_CACHE_BYTES) gives\t * aligned memory blocks, unless SLUB/SLAB debug is enabled.\t * Both skb-&gt;head and skb_shared_info are cache line aligned.\t */\t //对齐\tsize = SKB_DATA_ALIGN(size);\t//注意这里的size加上了管理非线性部分的结构体\tsize += SKB_DATA_ALIGN(sizeof(struct skb_shared_info));\t// 这里用kmalloc分配了数据包缓冲区\tdata = kmalloc_reserve(size, gfp_mask, node, &amp;pfmemalloc);\tif (!data)\t\tgoto nodata;\t/* kmalloc(size) might give us more room than requested.\t * Put skb_shared_info exactly at the end of allocated zone,\t * to allow max possible filling before reallocation.\t */\t //这里减去了管理非线性部分的大小\tsize = SKB_WITH_OVERHEAD(ksize(data));\t//预取\tprefetchw(data + size);\t/*\t * Only clear those fields we need to clear, not those that we will\t * actually initialise below. Hence, don&#x27;t put any more fields after\t * the tail pointer in struct sk_buff!\t */\t //这里memst了\tmemset(skb, 0, offsetof(struct sk_buff, tail));\t/* Account for allocated memory : skb + skb-&gt;head */\t//这里是skb结构体大小，加管理非线性部分结构体大小加申请数据缓冲区大小的三者之和\tskb-&gt;truesize = SKB_TRUESIZE(size);\tskb-&gt;pfmemalloc = pfmemalloc; //是否是内存压力的情况下分配的内存\trefcount_set(&amp;skb-&gt;users, 1); //skb引用计数\tskb-&gt;head = data; \tskb-&gt;data = data;\tskb_reset_tail_pointer(skb);\tskb-&gt;end = skb-&gt;tail + size; //end始终指向缓冲区结束\tskb-&gt;mac_header = (typeof(skb-&gt;mac_header))~0U;\tskb-&gt;transport_header = (typeof(skb-&gt;transport_header))~0U;\t/* make sure we initialize shinfo sequentially */\tshinfo = skb_shinfo(skb);\tmemset(shinfo, 0, offsetof(struct skb_shared_info, dataref));\t//共享部分引用计数++\tatomic_set(&amp;shinfo-&gt;dataref, 1);\tif (flags &amp; SKB_ALLOC_FCLONE) &#123;\t\tstruct sk_buff_fclones *fclones;\t\tfclones = container_of(skb, struct sk_buff_fclones, skb1);\t\tskb-&gt;fclone = SKB_FCLONE_ORIG; //标记是fastclone中的原始标记\t\trefcount_set(&amp;fclones-&gt;fclone_ref, 1);\t\tfclones-&gt;skb2.fclone = SKB_FCLONE_CLONE; //设置skb2的fclone标记\t&#125;out:\treturn skb;nodata:\tkmem_cache_free(cache, skb);\tskb = NULL;\tgoto out;&#125;\n\n","categories":["网络协议栈源码学习"],"tags":["skb"]},{"title":"套接字层socket、sock、文件系统之间的关系","url":"/2025/05/21/socket_sock_file_%E6%A6%82%E5%BF%B5/","content":"1.概念内核套接字层（socket layer）是 Linux 网络协议栈中承上启下的一层，负责将用户空间的 socket API（如 socket(), bind(), send(), recv() 等）与内核中的协议栈对接，其核心作用在于实现应用层与传输层协议之间的解耦，为应用程序提供一种统一且抽象的网络通信方式，套接字机制最初由 BSD UNIX 引入，现已广泛应用于各类网络编程环境中。\n套接字层（sockets）在整个网络协议栈中的位置如下图所示：\n\n2.关键数据结构套接字层使用的关键数据结构以及作用如下：\n2.1struct socket作用：是用户空间 socket 文件描述符在内核中的抽象\n核心字段如下所示：\nstruct socket &#123;    socket_state          state;     // 套接字状态    short                 type;      // SOCK_STREAM、SOCK_DGRAM 等    struct sock          *sk;        // 指向内核协议栈的 sock 结构    const struct proto_ops *ops;     // 指向协议操作函数表，如 inet_stream_ops    ...&#125;;\n\n\n\n2.2 struct sock作用：表示一个连接或一个套接字的协议控制块（protocol control block），协议相关逻辑都在这里实现\n核心字段（以 TCP 为例）：\nstruct sock &#123;    struct socket        *sk_socket;    // 回指到 struct socket    struct proto         *sk_prot;      // 协议操作（如 tcp_prot）    struct sk_buff_head   sk_receive_queue; // 接收队列    struct sk_buff_head   sk_write_queue;   // 发送队列    int                   sk_state;     // TCP 状态，如 ESTABLISHED 等    ...&#125;;\n\n2.3 、struct proto_ops作用：socket 操作函数表，对应 socket() 返回的文件描述符上的各种操作，如 send(), recv(), bind()\n核心字段：\nstruct proto_ops &#123;    int (*release)(struct socket *);    int (*bind)(struct socket *, struct sockaddr *, int);    int (*connect)(struct socket *, struct sockaddr *, int, int);    int (*sendmsg)(struct socket *, struct msghdr *, size_t);    int (*recvmsg)(struct socket *, struct msghdr *, size_t, int);    ...&#125;;\n\n2.4  struct proto作用：proto 是 面向传输层抽象设计的接口，把具体协议（TCP、UDP）与上层逻辑解耦，让上层只调用函数指针，而不用管协议细节\nstruct proto &#123;    struct sock *(*alloc)(struct net *, struct socket *, int, gfp_t);    void (*close)(struct sock *sk, long timeout);    int  (*connect)(struct sock *sk, struct sockaddr *uaddr, int addr_len);    int  (*sendmsg)(struct sock *sk, struct msghdr *msg, size_t len);    int  (*recvmsg)(struct sock *sk, struct msghdr *msg, size_t len, int noblock, int flags, int *addr_len);    ...&#125;;\n\n2.5struct file虽不专属于 socket 层，但与 socket 强相关。\n每个 socket 在内核中表现为一个文件，用户空间调用 socket() 后返回的文件描述符 fd 会指向一个 struct file，其 private_data 就是 &#96;struct socket\n2.6 整体关系图下图展示了上述结构体的关系图，其中task_struct对应一个进程，其files指向file_struct结构，该结构的主要功能是管理fd_arry 里面的每个fd对应一个打开的文件，其中的private指针指向的是I&#x2F;O对象的专有数据，对于socket层而言，就是socket结构，socket中的ops可以理解为用户态系统调用的实现。而sock的prot则是根据协议类型，进一步更为具体的实现。\n\n","categories":["网络协议栈源码学习"],"tags":["socket"]},{"title":"socket与文件描述符的映射","url":"/2025/05/27/socket%E4%B8%8E%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E6%98%A0%E5%B0%84/","content":"socket与文件描述符的映射1.socket与fd的映射应用层是通过文件描述符来找到内核的socket的一系列结构，因此在调用socket系统调用创建socket的过程中，会将一个fd与一个套接字相关联，对应的函数为__sys_socket函数中的sock_map_fd在sock_map_fd中，主要做了如下几个事情，获取一个空闲的文件描述符，创建一个file实例，将fd与file实例绑定，然后将这个file实例加入到进程打开的文件指针数组中，然后再将套接字与file相关连。这样fd，file，进程，socket四者之间就紧密的联系在了一起。代码如下：\nstatic int sock_map_fd(struct socket *sock, int flags)&#123;\tstruct file *newfile;\t//从当前进程获取一个未使用的文件描述符fd\tint fd = get_unused_fd_flags(flags);\tif (unlikely(fd &lt; 0)) &#123;\t\tsock_release(sock);\t\treturn fd;\t&#125;\t//创建一个文件对象\tnewfile = sock_alloc_file(sock, flags, NULL);\t//关联fd和文件对象\tif (!IS_ERR(newfile)) &#123;\t\tfd_install(fd, newfile);\t\treturn fd;\t&#125;\t//有错误，将fd标记为未使用\tput_unused_fd(fd);\treturn PTR_ERR(newfile);&#125;\n\n上述代码调用get_unused_fd_flags是一个包裹函数最终调用return alloc_fd(0, nofile, flags);获取一个未使用的文件描述符。\nstatic int alloc_fd(unsigned start, unsigned end, unsigned flags)&#123;\t//获取当前进程的文件描述副列表\tstruct files_struct *files = current-&gt;files;\tunsigned int fd;\tint error;\t//fd表，用来指向files_struct的fdtable\tstruct fdtable *fdt;\tspin_lock(&amp;files-&gt;file_lock);repeat:\t//这里指了一下\tfdt = files_fdtable(files);\tfd = start;\t//跳过已分配的fd\tif (fd &lt; files-&gt;next_fd)\t\tfd = files-&gt;next_fd;\tif (fd &lt; fdt-&gt;max_fds)\t//返回一个没有被使用的fd\t\tfd = find_next_fd(fdt, fd);\t/*\t * N.B. For clone tasks sharing a files structure, this test\t * will limit the total number of files that can be opened.\t */\terror = -EMFILE;\tif (fd &gt;= end)\t\tgoto out;\t//这里面会判断当前的fd是否大于max_fd,如果大于可能需要对​​文件描述符表的扩容\terror = expand_files(files, fd);\tif (error &lt; 0)\t\tgoto out;\t/*\t * If we needed to expand the fs array we\t * might have blocked - try again.\t */\t//可能会阻塞在试一次\tif (error)\t\tgoto repeat;\t//这里修改一下下一个要分配的fd，加速一下\tif (start &lt;= files-&gt;next_fd)\t\tfiles-&gt;next_fd = fd + 1;\t//设置已经使用的标志\t__set_open_fd(fd, fdt);\tif (flags &amp; O_CLOEXEC)\t\t__set_close_on_exec(fd, fdt);\telse\t\t__clear_close_on_exec(fd, fdt);\terror = fd;#if 1\t/* Sanity check */\tif (rcu_access_pointer(fdt-&gt;fd[fd]) != NULL) &#123;\t\tprintk(KERN_WARNING &quot;alloc_fd: slot %d not NULL!\\n&quot;, fd);\t\trcu_assign_pointer(fdt-&gt;fd[fd], NULL);\t&#125;#endifout:\tspin_unlock(&amp;files-&gt;file_lock);\treturn error;&#125;\n\n上述代码参数中的start为0,end为系统配置一个进程最多持有的描述数量，默认通常是1024，最大是多少？？如果文件描述副的fd大于了end则会报错打开了太多文件描述符。申请到fd之后在sock_map_fd中会调用sock_alloc_file创建文件对象，具体代码如下：\nstruct file *sock_alloc_file(struct socket *sock, int flags, const char *dname)&#123;\tstruct file *file;\tif (!dname)\t\tdname = sock-&gt;sk ? sock-&gt;sk-&gt;sk_prot_creator-&gt;name : &quot;&quot;;\t//alloc一个file绑定了socket_file_ops 回调函数集合 sock_mnt为一个挂在点\tfile = alloc_file_pseudo(SOCK_INODE(sock), sock_mnt, dname,\t\t\t\tO_RDWR | (flags &amp; O_NONBLOCK),\t\t\t\t&amp;socket_file_ops);\tif (IS_ERR(file)) &#123;\t\tsock_release(sock);\t\treturn file;\t&#125;\tfile-&gt;f_mode |= FMODE_NOWAIT;\tsock-&gt;file = file;\t//注意：这里关联了socket和file\tfile-&gt;private_data = sock;\t//标记为流式文件，不支持lseek(随机访问)？\tstream_open(SOCK_INODE(sock), file);\treturn file;&#125;\n\n上述sock_alloc_file中调用alloc_file_pseudo创建了一个file结构和dentry结构，并把sock对应的inode和denry相关联，然后在alloc_file_pseudo中将file的私有指针指向socket。这一系列逻辑完成了file，socket，inode，dentry，之间的关联和绑定了文件的ops，之后就可以通过file可以找到socket，通过dentry可以快速找到inode通过inode也可以找到socket。alloc_file_pseudo实现如下:\nstruct file *alloc_file_pseudo(struct inode *inode, struct vfsmount *mnt,\t\t\t\tconst char *name, int flags,\t\t\t\tconst struct file_operations *fops)&#123;\tstatic const struct dentry_operations anon_ops = &#123;\t\t.d_dname = simple_dname\t&#125;;\tstruct qstr this = QSTR_INIT(name, strlen(name));\tstruct path path;\tstruct file *file;\t//创建一个dentry\tpath.dentry = d_alloc_pseudo(mnt-&gt;mnt_sb, &amp;this);\tif (!path.dentry)\t\treturn ERR_PTR(-ENOMEM);\tif (!mnt-&gt;mnt_sb-&gt;s_d_op)\t\td_set_d_op(path.dentry, &amp;anon_ops);\t//给挂载点加一个引用计数\tpath.mnt = mntget(mnt);\t//关联denry和socket的inode 之后可以通过这个dentry快速找到inode\td_instantiate(path.dentry, inode);\t//申请一个file，同时挂上ops (也就是read，write)\tfile = alloc_file(&amp;path, flags, fops);\tif (IS_ERR(file)) &#123;\t\tihold(inode);\t\tpath_put(&amp;path);\t&#125;\treturn file;&#125;\n\n当申请了fd和file结构之后，会调用fd_install 完成文件描述fd与file的关联，此后用户就可以通过这个fd找到file，通过file找到socket，等等一系列信息。\nvoid fd_install(unsigned int fd, struct file *file)&#123;\tstruct files_struct *files = current-&gt;files;\tstruct fdtable *fdt;\trcu_read_lock_sched();\tif (unlikely(files-&gt;resize_in_progress)) &#123;\t\trcu_read_unlock_sched();\t\tspin_lock(&amp;files-&gt;file_lock);\t\tfdt = files_fdtable(files);\t\tBUG_ON(fdt-&gt;fd[fd] != NULL);\t\t//将fdt表的fd元素指向外面申请的file，这个file的私有结构就是socket！\t\trcu_assign_pointer(fdt-&gt;fd[fd], file);\t\tspin_unlock(&amp;files-&gt;file_lock);\t\treturn;\t&#125;\t/* coupled with smp_wmb() in expand_fdtable() */\tsmp_rmb();\tfdt = rcu_dereference_sched(files-&gt;fdt);\tBUG_ON(fdt-&gt;fd[fd] != NULL);\trcu_assign_pointer(fdt-&gt;fd[fd], file);\trcu_read_unlock_sched();&#125;\n\n2.根据文件描述符获取套接字当用户创建socket返回fd之后，执行bind，listen，send，recv都要传入上述提到的fd，内核会根据用户传入的fd找到对应的文件file，进而通过私有指针找到socket，对应的函数接口为sockfd_lookup_light\n//返回值为socketstatic struct socket *sockfd_lookup_light(int fd, int *err, int *fput_needed)&#123;\t\t//根据fd从进程管理的fdtable中找到对应的file，这里struct fd结构体中的一个字段为file\tstruct fd f = fdget(fd);\tstruct socket *sock;\t*err = -EBADF;\tif (f.file) &#123;\t\t//从file的私有指针中拿到socket\t\tsock = sock_from_file(f.file);\t\tif (likely(sock)) &#123;\t\t\t*fput_needed = f.flags &amp; FDPUT_FPUT;\t\t\treturn sock;\t\t&#125;\t\t*err = -ENOTSOCK;\t\tfdput(f);\t&#125;\treturn NULL;&#125;\n\n上述fdget最终调用到__fget_light，具体代码如下：\nstatic unsigned long __fget_light(unsigned int fd, fmode_t mask)&#123;\t//通过current宏获取文件描述符表\tstruct files_struct *files = current-&gt;files;\tstruct file *file;\t/*\t * If another thread is concurrently calling close_fd() followed\t * by put_files_struct(), we must not observe the old table\t * entry combined with the new refcount - otherwise we could\t * return a file that is concurrently being freed.\t *\t * atomic_read_acquire() pairs with atomic_dec_and_test() in\t * put_files_struct().\t */\t//判断当前进程的文件描述符表是否被其他进程共享，如果没有被共享，直接无锁查找\tif (atomic_read_acquire(&amp;files-&gt;count) == 1) &#123;\t\t//逻辑很简单，直接根据fd取对应的files\t\tfile = files_lookup_fd_raw(files, fd);\t\tif (!file || unlikely(file-&gt;f_mode &amp; mask))\t\t\treturn 0;\t\treturn (unsigned long)file;\t&#125; else &#123;\t\t//加rcu锁查找，多线程可能会走这里吧？？？\t\tfile = __fget(fd, mask);\t\tif (!file)\t\t\treturn 0;\t\treturn FDPUT_FPUT | (unsigned long)file;\t&#125;&#125;\n\n上述查找file的过程可以分为快速路径和慢速路径，当文件描述符表存在被多个线程访问时，需要加锁访问，否则直接走快速路径无锁拿到file(atomic_read_acquire(&amp;files-&gt;count))\n","categories":["网络协议栈源码学习"],"tags":["socket"]},{"title":"socket文件系统","url":"/2025/05/26/socket%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/","content":"1.套接字与文件系统每一种文件都有各自的文件类型，例如设备文件包括字符设备文件和块设备文件等，而与套接字关联的文件类型为套接字文件。\n1.1套接字文件系统的注册为了能够让套接字与文件描述符相关联，并支持特殊套接字曾的节点分配和释放，系统中增加了sockfs文件系统类型sock_fs_type,具体定义如下：\nstatic struct file_system_type sock_fs_type = &#123;\t.name =\t\t&quot;sockfs&quot;, //文件系统名字\t//挂载的时候会被调用，在kern_mount()被调用\t.init_fs_context = sockfs_init_fs_context,//初始化文件系统的回调函数，\t.kill_sb =\tkill_anon_super,//卸载文件系统&#125;;\nsock_fs_type类型的文件系统注册发生在sock_init()在start_kernel中经过一些列调用会被调到.\n//start_kernel会调用到它static int __init sock_init(void)&#123;    ...\t//注册socket类型的文件系统\terr = register_filesystem(&amp;sock_fs_type);\tif (err)\t\tgoto out;    //挂载这个文件系统，返回一个超级块\tsock_mnt = kern_mount(&amp;sock_fs_type);\tif (IS_ERR(sock_mnt)) &#123;\t\terr = PTR_ERR(sock_mnt);\t\tgoto out_mount;\t&#125;    ....&#125;\n\n在上述代码中首先调用register_filesystem(&amp;sock_fs_type);来注册socket文件系统，主要工作判断是否有相同名字文件系统并插入到链表中。然后调用kern_mount完成挂载操作并返回一个超级块，在创建socket的时候创建inode就是用的这个超级块的alloc_node回调函数。kern_mount函数定义如下\nstruct vfsmount *kern_mount(struct file_system_type *type)&#123;\tstruct vfsmount *mnt;\t//实际的挂载操作\tmnt = vfs_kern_mount(type, SB_KERNMOUNT, type-&gt;name, NULL);\tif (!IS_ERR(mnt)) &#123;\t\t/*\t\t * it is a longterm mount, don&#x27;t release mnt until\t\t * we unmount before file sys is unregistered\t\t*/\t\treal_mount(mnt)-&gt;mnt_ns = MNT_NS_INTERNAL;\t&#125;\treturn mnt;&#125;\n\n上述代码调用vfs_kern_mount中调用了vfs_kern_mount完成实际的挂载，返回的为一个挂载点，其中SB_KERNMOUNT表示表示该挂载属于内核内部命名空间。\n在vfs_kern_mount中的工作就是创建一个fs_context结构体，把具体文件系统的回调函数与ctx-&gt;ops相关联，，这里的ctx是fs的一个私有结构。然后通过fc_mount中的get_tree把sb与ctx-&gt;ops关联了起来\nstruct vfsmount *vfs_kern_mount(struct file_system_type *type,\t\t\t\tint flags, const char *name,\t\t\t\tvoid *data)&#123;\tstruct fs_context *fc;\t//mnt为返回的挂载点\tstruct vfsmount *mnt;\tint ret = 0;\tif (!type)\t\treturn ERR_PTR(-EINVAL);\t\t//分配一个fs结构，并初始化，这里把具体文件系统的回调函数与ctx-&gt;ops相关联\t//fs为ctx的一个私有结构\tfc = fs_context_for_mount(type, flags);\tif (IS_ERR(fc))\t\treturn ERR_CAST(fc);\tif (name)\t\tret = vfs_parse_fs_string(fc, &quot;source&quot;,\t\t\t\t\t  name, strlen(name));\tif (!ret)\t\tret = parse_monolithic_mount_data(fc, data);\tif (!ret)\t//分配并初始化超级块和挂载点\t//注意这里面的get_tree把超级块与ctx-&gt;ops关联了起来\t\tmnt = fc_mount(fc);\telse\t\tmnt = ERR_PTR(ret);\tput_fs_context(fc);\treturn mnt;&#125;\nfs_context_for_mount是一个包裹函数，最终实际调用的是alloc_fs_context 核心逻辑就是创建一个fs结构体并初始化然后调用文件系统注册的init_fs_context函数，将fs的ctx与文件系统的ops关联上。 函数原型如下：\nstatic struct fs_context *alloc_fs_context(struct file_system_type *fs_type,\t\t\t\t      struct dentry *reference,\t\t\t\t      unsigned int sb_flags,\t\t\t\t      unsigned int sb_flags_mask,\t\t\t\t      enum fs_context_purpose purpose)&#123;\tint (*init_fs_context)(struct fs_context *);\tstruct fs_context *fc;\tint ret = -ENOMEM;\t//分配一个fc\tfc = kzalloc(sizeof(struct fs_context), GFP_KERNEL_ACCOUNT);\tif (!fc)\t\treturn ERR_PTR(-ENOMEM);\tfc-&gt;purpose\t= purpose;\tfc-&gt;sb_flags\t= sb_flags;\tfc-&gt;sb_flags_mask = sb_flags_mask;\tfc-&gt;fs_type\t= get_filesystem(fs_type);\tfc-&gt;cred\t= get_current_cred();\tfc-&gt;net_ns\t= get_net(current-&gt;nsproxy-&gt;net_ns);\tfc-&gt;log.prefix\t= fs_type-&gt;name;\tmutex_init(&amp;fc-&gt;uapi_mutex);\tswitch (purpose) &#123;\tcase FS_CONTEXT_FOR_MOUNT:\t\tfc-&gt;user_ns = get_user_ns(fc-&gt;cred-&gt;user_ns);\t\tbreak;\tcase FS_CONTEXT_FOR_SUBMOUNT:\t\tfc-&gt;user_ns = get_user_ns(reference-&gt;d_sb-&gt;s_user_ns);\t\tbreak;\tcase FS_CONTEXT_FOR_RECONFIGURE:\t\tatomic_inc(&amp;reference-&gt;d_sb-&gt;s_active);\t\tfc-&gt;user_ns = get_user_ns(reference-&gt;d_sb-&gt;s_user_ns);\t\tfc-&gt;root = dget(reference);\t\tbreak;\t&#125;\t/* TODO: Make all filesystems support this unconditionally */\tinit_fs_context = fc-&gt;fs_type-&gt;init_fs_context;\tif (!init_fs_context)\t\tinit_fs_context = legacy_init_fs_context;\t//调用文件系统的init函数，将fs与文件系统的ops关联上。\tret = init_fs_context(fc);\tif (ret &lt; 0)\t\tgoto err_fc;\tfc-&gt;need_free = true;\treturn fc;err_fc:\tput_fs_context(fc);\treturn ERR_PTR(ret);&#125;\nret = init_fs_context(fc); 为上述文件系统注册的回调函数\nstatic int sockfs_init_fs_context(struct fs_context *fc)&#123;\tstruct pseudo_fs_context *ctx = init_pseudo(fc, SOCKFS_MAGIC);\tif (!ctx)\t\treturn -ENOMEM;\tctx-&gt;ops = &amp;sockfs_ops;//alloc_inode ,free_inode\tctx-&gt;dops = &amp;sockfs_dentry_operations;\tctx-&gt;xattr = sockfs_xattr_handlers;\treturn 0;&#125;\n\n上述init_pseudo()中主要zu了两件事，申请了ctx结构作为fs的私有结构，然后注册了get_tree回调函数。这个get_tree ，回调里面的逻辑就是创建一个超级块，然后将ctx的ops赋值给超级块的ops，在fc_mount中会调用这个回调函数，函数定义如下所示：\nstatic const struct fs_context_operations pseudo_fs_context_ops = &#123;\t.free\t\t= pseudo_fs_free,\t.get_tree\t= pseudo_fs_get_tree,//创建了一个超级块最终会调用err = fill_super(sb, fc);填充超级块&#125;;struct pseudo_fs_context *init_pseudo(struct fs_context *fc,\t\t\t\t\tunsigned long magic)&#123;\tstruct pseudo_fs_context *ctx;\tctx = kzalloc(sizeof(struct pseudo_fs_context), GFP_KERNEL);\tif (likely(ctx)) &#123;\t\tctx-&gt;magic = magic;\t\tfc-&gt;fs_private = ctx;//设置私有结构\t\tfc-&gt;ops = &amp;pseudo_fs_context_ops; //设置ops集合，如上述代码所示\t\tfc-&gt;sb_flags |= SB_NOUSER;\t\tfc-&gt;global = true;\t&#125;\treturn ctx;&#125;\n\n上述fs_context_for_mount函数在vfs_kern_mount中被调用后会调用fc_mount来申请一个超级块，并初始化相关字段\nstruct vfsmount *fc_mount(struct fs_context *fc)&#123;\t//创建并初始化超级块\tint err = vfs_get_tree(fc);\tif (!err) &#123;\t\tup_write(&amp;fc-&gt;root-&gt;d_sb-&gt;s_umount);\t\t//创建挂载点\t\treturn vfs_create_mount(fc);\t&#125;\treturn ERR_PTR(err);&#125;\nvfs_get_tree中调用fc-&gt;ops-&gt;get_tree(fc)创建并初始化了超级块，代码如下所示：\nint vfs_get_tree(struct fs_context *fc)&#123;\tstruct super_block *sb;\tint error;\tif (fc-&gt;root)\t\treturn -EBUSY;\t//这里创建了超级块\terror = fc-&gt;ops-&gt;get_tree(fc);\tif (error &lt; 0)\t\treturn error;\tif (!fc-&gt;root) &#123;\t\tpr_err(&quot;Filesystem %s get_tree() didn&#x27;t set fc-&gt;root\\n&quot;,\t\t       fc-&gt;fs_type-&gt;name);\t\t/* We don&#x27;t know what the locking state of the superblock is -\t\t * if there is a superblock.\t\t */\t\tBUG();\t&#125;\t//将申请的sb赋值给sb\tsb = fc-&gt;root-&gt;d_sb;\tWARN_ON(!sb-&gt;s_bdi);\tsuper_wake(sb, SB_BORN);\terror = security_sb_set_mnt_opts(sb, fc-&gt;security, 0, NULL);\tif (unlikely(error)) &#123;\t\tfc_drop_locked(fc);\t\treturn error;\t&#125;\tWARN((sb-&gt;s_maxbytes &lt; 0), &quot;%s set sb-&gt;s_maxbytes to &quot;\t\t&quot;negative value (%lld)\\n&quot;, fc-&gt;fs_type-&gt;name, sb-&gt;s_maxbytes);\treturn 0;&#125;","categories":["网络协议栈源码学习"],"tags":["VFS","socket"]},{"title":"socket系统调用","url":"/2025/05/13/socket%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/","content":"简介socket 是网络编程中最基本的系统调用之一，用于创建一个网络通信的“端点”（即套接字，socket）。\n一、函数原型int socket(int domain, int type, int protocol);\n\n\n\n\n参数\n说明\n\n\n\ndomain\n协议族，比如：AF_INET 表示 IPv4\n\n\ntype\n套接字类型，比如：SOCK_STREAM 表示 TCP\n\n\nprotocol\n指定使用的协议，通常填 0 让系统自动选择\n\n\n二、函数调用流程用户态程序调用 socket()        ↓glibc 中封装的socket接口        ↓内部通过 syscall 指令        ↓进入内核，执行 sys_socket()\n三、代码分析1. glibc层代码分析代码位置：glibc-2.40\\sysdeps\\unix\\sysv\\linux\\socket.c\nint __socket (int fd, int type, int domain)&#123;#ifdef __ASSUME_SOCKET_SYSCALL //是否支持单独的系统调用号，肯定支持  return INLINE_SYSCALL_CALL (socket, fd, type, domain);#else\t//32位的处理器会走这个分支  return SOCKETCALL (socket, fd, type, domain);#endif&#125;libc_hidden_def (__socket)//暴露给外部程序的符号为socket() 其实是__socket()的别名weak_alias (__socket, socket)\n\n用户应用程序调用socket()实际调用的的是上述glibc中的__socket，在__socket中 INLINE_SYSCALL_CALL宏经过一系列展开后变成宏__INLINE_SYSCALL4 ，这个宏会进一步再展开，如下所示：\n#define __INLINE_SYSCALL4(name, a1, a2, a3, a4) \\  INLINE_SYSCALL (name, 4, a1, a2, a3, a4)\n\n上述的INLINE_SYSCALL 展开，结果如下所示：\n#define INLINE_SYSCALL(name, nr, args...)\t\t\t\t\\  (&#123;\t//sc_ret为系统调用的返回值    long int sc_ret = INTERNAL_SYSCALL (name, nr, args);\t//对返回值好像要简单检查一下    __glibc_unlikely (INTERNAL_SYSCALL_ERROR_P (sc_ret))\t\t\\    ? SYSCALL_ERROR_LABEL (INTERNAL_SYSCALL_ERRNO (sc_ret))\t\t\\    : sc_ret;\t\t\t\t\t\t\t\t\\  &#125;)\n\nINTERNAL_SYSCALL 进一步在展开，会变成了internal_syscall3\n这里举个例子，例如，未展开前为INTERNAL_SYSCALL(socket, 3, AF_INET, SOCK_STREAM, 0) 展开后会变成\ninternal_syscall3(__NR_socket, AF_INET, SOCK_STREAM, 0)，如果在x86架构中宏__NR_socket为41\n在glibc-2.40\\sysdeps\\unix\\sysv\\linux\\x86_64\\64\\arch-syscall.h 中有定义\n#define __NR_socket 41\n\n总之，上述宏经过一系列展开后变成了如下函数，其中number为系统调用号，arg1, arg2, arg3 为传入的参数\n#define internal_syscall3(number, arg1, arg2, arg3)\t\t\t\\(&#123;\t\t\t\t\t\t\t\t\t\\    unsigned long int resultvar;\t\t\t\t\t\\    TYPEFY (arg3, __arg3) = ARGIFY (arg3);\t\t\t \t\\    TYPEFY (arg2, __arg2) = ARGIFY (arg2);\t\t\t \t\\    TYPEFY (arg1, __arg1) = ARGIFY (arg1);\t\t\t \t\\    register TYPEFY (arg3, _a3) asm (&quot;rdx&quot;) = __arg3;\t\t\t\\    register TYPEFY (arg2, _a2) asm (&quot;rsi&quot;) = __arg2;\t\t\t\\    register TYPEFY (arg1, _a1) asm (&quot;rdi&quot;) = __arg1;\t\t\t\\    asm volatile (\t\t\t\t\t\t\t\\    &quot;syscall\\n\\t&quot;\t\t\t\t\t\t\t\\    : &quot;=a&quot; (resultvar)\t\t\t\t\t\t\t\\    : &quot;0&quot; (number), &quot;r&quot; (_a1), &quot;r&quot; (_a2), &quot;r&quot; (_a3)\t\t\t\\    : &quot;memory&quot;, REGISTERS_CLOBBERED_BY_SYSCALL);\t\t\t\\    (long int) resultvar;\t\t\t\t\t\t\\&#125;)\n\n上述代码的作用是将系统调用号和 3 个参数分别放入规定的寄存器（RAX, RDI, RSI, RDX），然后执行 syscall 指令，并将返回值保存到 resultvar：\n“memory”, REGISTERS_CLOBBERED_BY_SYSCALL 的意思是告诉编译器不要优化这段代码\n下面附上x86-64 Linux 的 syscall 调用约定传参的寄存器\n\n\n\n参数\n寄存器\n\n\n\nsyscall 编号\nRAX\n\n\n参数1\nRDI\n\n\n参数2\nRSI\n\n\n参数3\nRDX\n\n\n参数4\nR10\n\n\n参数5\nR8\n\n\n参数6\nR9\n\n\n2.内核代码分析执行上述syscall指令后CPU 会根据 MSR 寄存器（Model Specific Registers）跳转到系统调用函数，例如，x86架构则会进入到系统调用的统一入口函数entry_SYSCALL_64\nentry_SYSCALL_64函数的注册（也就把地址写入MSR寄存器）在syscall_init中完成代码如下：\nvoid syscall_init(void)&#123;\twrmsr(MSR_STAR, 0, (__USER32_CS &lt;&lt; 16) | __KERNEL_CS);\t//把entry_SYSCALL_64 的地址写入MSR_LSTAR寄存器\twrmsrl(MSR_LSTAR, (unsigned long)entry_SYSCALL_64); \t...&#125;\n\n上述syscall_init 函数在start_kernel（）中被调用\n接下里看一下entry_SYSCALL_64的逻辑，\nSYM_CODE_START(entry_SYSCALL_64)\tUNWIND_HINT_EMPTY\t//这个是切换GS寄存器，这个寄存器是访问per-cpu变量的基址task_struct结构就依赖这个寄存器间接获得\tswapgs\t/* tss.sp2 is scratch space. */\t//将当前栈指针保存\tmovq\t%rsp, PER_CPU_VAR(cpu_tss_rw + TSS_sp2)\t//切换页表\tSWITCH_TO_KERNEL_CR3 scratch_reg=%rsp\t//切换当前栈指针到当前 CPU 的内核栈顶指针\tmovq\tPER_CPU_VAR(cpu_current_top_of_stack), %rspSYM_INNER_LABEL(entry_SYSCALL_64_safe_stack, SYM_L_GLOBAL)\t/* Construct struct pt_regs on stack */\t//把用户态的一些信息入栈（貌似就是pt_regs）\tpushq\t$__USER_DS\t\t\t\t/* pt_regs-&gt;ss */\tpushq\tPER_CPU_VAR(cpu_tss_rw + TSS_sp2)\t/* pt_regs-&gt;sp */\tpushq\t%r11\t\t\t\t\t/* pt_regs-&gt;flags */\tpushq\t$__USER_CS\t\t\t\t/* pt_regs-&gt;cs */\tpushq\t%rcx\t\t\t\t\t/* pt_regs-&gt;ip */SYM_INNER_LABEL(entry_SYSCALL_64_after_hwframe, SYM_L_GLOBAL)\t//这里存了系统调用号\tpushq\t%rax\t\t\t\t\t/* pt_regs-&gt;orig_ax */\t//其他寄存器的信息继续保存到栈中\tPUSH_AND_CLEAR_REGS rax=$-ENOSYS\t/* IRQs are off. */\t//把系统调用号放入 rdi → 作为函数的第 1 个参数\tmovq\t%rax, %rdi\t//把 pt_regs 地址放入 rsi → 作为第 2 个参数\tmovq\t%rsp, %rsi\t//调用do_syscall_64\tcall\tdo_syscall_64\t\t/* returns with IRQs disabled */\t...\tSYM_CODE_END(entry_SYSCALL_64)\n\n在用户执行 syscall 指令后，CPU 跳转到entry_SYSCALL_64，完成从用户态到内核态的切换、栈构造、参数准备，并调用 C 函数 do_syscall_64() 来处理系统调用。\n接下来看一下上述汇编代码中调用do_syscall_64 代码位于arch\\x86\\entry\\common.c中\n#ifdef CONFIG_X86_64__visible noinstr void do_syscall_64(unsigned long nr, struct pt_regs *regs)&#123;\t//这里开启了中断（进入系统调用前要先关中断在哪里没找到，好像sycall后会自动关）追踪，安全相关\tnr = syscall_enter_from_user_mode(regs, nr);\t//禁止插桩，\tinstrumentation_begin();\t//检查系统调用号是否在合法范围\tif (likely(nr &lt; NR_syscalls)) &#123;\t\tnr = array_index_nospec(nr, NR_syscalls);\t\t//nr存的是系统调用好，从系统调用表中找到对应的处理函数，然后将\t\t//返回值存入到regs-&gt;ax寄存器\t\tregs-&gt;ax = sys_call_table[nr](regs);        //32位#ifdef CONFIG_X86_X32_ABI\t&#125; else if (likely((nr &amp; __X32_SYSCALL_BIT) &amp;&amp;\t\t\t  (nr &amp; ~__X32_SYSCALL_BIT) &lt; X32_NR_syscalls)) &#123;\t\tnr = array_index_nospec(nr &amp; ~__X32_SYSCALL_BIT,\t\t\t\t\tX32_NR_syscalls);\t\tregs-&gt;ax = x32_sys_call_table[nr](regs);#endif\t&#125;\tinstrumentation_end();\tsyscall_exit_to_user_mode(regs);&#125;#endif\n\n上述代码中最关键的就是regs-&gt;ax = sys_call_table[nr](regs)找到对应的系统调用函数，并传入pt_regs，pt_regs保存了参数和用户的一些信息。\nsys_call_table[]就是一个函数指针，每个元素指向具体的函数实现，定义如下所示:\nasmlinkage const sys_call_ptr_t sys_call_table[__NR_syscall_max+1] = &#123;\t/*\t * Smells like a compiler bug -- it doesn&#x27;t work\t * when the &amp; below is removed.\t */\t[0 ... __NR_syscall_max] = &amp;__x64_sys_ni_syscall,//下面这个头文件貌似是编译生成的，include进来后就替换了上面的默认值#include &lt;asm/syscalls_64.h&gt;&#125;;\n\n上述 &lt;asm/syscalls_64.h&gt;是在编译过程中生成的，具体的流程如下：\nsyscall_64.tbl   ↓（作为输入）syscalltbl.sh 脚本   ↓（生成）syscalls_64.h   ↓（#include）用于填充 sys_call_table[]\n上述流程在\\arch\\x86\\entry\\syscalls中有体现。下面展示了部分syscall_64.tbl中的内容\n0\tcommon\tread\t\t\tsys_read1\tcommon\twrite\t\t\tsys_write2\tcommon\topen\t\t\tsys_open3\tcommon\tclose\t\t\tsys_close·········41\tcommon\tsocket\t\t\tsys_socket·········440\tcommon\tprocess_madvise\t\tsys_process_madvise\n\n系统调用号 41 对应的函数指针在 sys_call_table[]被syscalltbl.sh 处理后，最终指向 __x64_sys_socket 这个函数，而这个函数和SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol) 宏展开后是一个函数！\n","categories":["网络协议栈源码学习"],"tags":["socket"]},{"title":"sock的创建与初始化","url":"/2025/05/24/sock%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96/","content":"以IPv4协议族为例，当用户态执行socket系统调用后，会调用到inet_create(),在inet_create()中会创建与socket关联的sock结构体，具体代码如下：\nstatic int inet_create(struct net *net, struct socket *sock, int protocol,\t\t       int kern)&#123;    .....\t//注意： 这里申请一个sock结构，这个sock结构可以理解为传输层协议和socket之间的一个中间层\t//对上提供socket层的结构，\t//对下与具体的协议相关\t//kern 标识这个套接字是否是内核创建的\tsk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot, kern);\tif (!sk)\t\tgoto out;    .....\t//这里初始化了上面申请的sock结构体的各个字段\tsock_init_data(sock, sk);    .....&#125;\n\nsk_alloc()上述sk_alloc()其实就是使用slab分配其分配了prot-&gt;size大小的的内存，也就是说分配了一个比sock结构体size还要大的内存，举个例子，如果是TCP协议，则分配的大小为sizeof(tcp_sock),也就是说tcp_sock内嵌了sock结构体，类似继承的关系，关系如下图所示：\n\n接下来具体看一下sk_alloc()的实现：\nstruct sock *sk_alloc(struct net *net, int family, gfp_t priority,\t\t      struct proto *prot, int kern)&#123;\tstruct sock *sk;\t//调用slab 分配一个sk结构体，注意这个结构体的大小取决与prot参数的size字段\t//__GFP_ZERO表示为内存申请后需要清零的标志位\tsk = sk_prot_alloc(prot, priority | __GFP_ZERO, family);\tif (sk) &#123;\t\t//设置协议族\t\tsk-&gt;sk_family = family;\t\t/*\t\t * See comment in struct sock definition to understand\t\t * why we need sk_prot_creator -acme\t\t */\t\t//这里很关键，将具体协议的prot关联到了sock上\t\tsk-&gt;sk_prot = sk-&gt;sk_prot_creator = prot;\t\t//记录是否是内核创建的\t\tsk-&gt;sk_kern_sock = kern;\t\tsock_lock_init(sk);\t\t//如果是用户进程创建的，就增加网络命名空间的引用计数\t\tsk-&gt;sk_net_refcnt = kern ? 0 : 1;\t\t//更新当前core上所有活跃套接字的引用计数。\t\tif (likely(sk-&gt;sk_net_refcnt)) &#123;\t\t\tget_net_track(net, &amp;sk-&gt;ns_tracker, priority);\t\t\tsock_inuse_add(net, 1);\t\t&#125; else &#123;\t\t\t__netns_tracker_alloc(net, &amp;sk-&gt;ns_tracker,\t\t\t\t\t      false, priority);\t\t&#125;\t\t//将sock与网络命名空间关联\t\tsock_net_set(sk, net);\t\t//发送缓冲区引用计数加1\t\trefcount_set(&amp;sk-&gt;sk_wmem_alloc, 1);\t\tmem_cgroup_sk_alloc(sk);\t\tcgroup_sk_alloc(&amp;sk-&gt;sk_cgrp_data);\t\tsock_update_classid(&amp;sk-&gt;sk_cgrp_data);\t\tsock_update_netprioidx(&amp;sk-&gt;sk_cgrp_data);\t\tsk_tx_queue_clear(sk);\t&#125;\treturn sk;&#125;\n\n上述代码中调用sk_prot_alloc() 根据不同的prot(也就是不同的协议)申请sock，同时设置了__GFP_ZERO 标志，表示需要将申请的内存memset，sk_prot_alloc() 的具体实现如下：\nstatic struct sock *sk_prot_alloc(struct proto *prot, gfp_t priority,\t\tint family)&#123;\tstruct sock *sk;\tstruct kmem_cache *slab;\t//从slab分配器中拿一个结构体，这个slabchace是inet_init中初始化的\tslab = prot-&gt;slab;\tif (slab != NULL) &#123;\t\tsk = kmem_cache_alloc(slab, priority &amp; ~__GFP_ZERO);\t\tif (!sk)\t\t\treturn sk;\t\t//是否需要memset，可以看到这里的大小是objsize\t\tif (want_init_on_alloc(priority))\t\t\tsk_prot_clear_nulls(sk, prot-&gt;obj_size);\t&#125; else\t//如果没使用slab就用kmalloc，kamlloc不也是slab吗？\t\tsk = kmalloc(prot-&gt;obj_size, priority);\tif (sk != NULL) &#123;\t\t//安全相关\t\tif (security_sk_alloc(sk, family, priority))\t\t\tgoto out_free;\t\t//增加引用计数\t\tif (!try_module_get(prot-&gt;owner))\t\t\tgoto out_free_sec;\t&#125;\treturn sk;out_free_sec:\tsecurity_sk_free(sk);out_free:\tif (slab != NULL)\t\tkmem_cache_free(slab, sk);\telse\t\tkfree(sk);\treturn NULL;&#125;\n\n从上述代码可知是通过slab = prot-&gt;slab;获取了一个slab对象，这个slab管理的结构体大小是inet_init()中调用proto_register()创建slab时候确定的，具体函数如下所示：\nint proto_register(struct proto *prot, int alloc_slab)&#123;\t......\tif (alloc_slab) &#123;\t\tprot-&gt;slab = kmem_cache_create_usercopy(prot-&gt;name,\t\t\t\t\tprot-&gt;obj_size, 0,\t\t\t\t\tSLAB_HWCACHE_ALIGN | SLAB_ACCOUNT |\t\t\t\t\tprot-&gt;slab_flags,\t\t\t\t\tprot-&gt;useroffset, prot-&gt;usersize,\t\t\t\t\tNULL);\t&#125;\t.......&#125;\n\n可以看到在上面创建slab缓存时，指定的size大小为prot-&gt;obj_size，例如tcp协议的obj_size则为sizeof(tcp_sock)结构体的大小。注意到上述创建slab缓存使用的接口是kmem_cache_create_usercopy，这个usercopy的意义是允许指定对象拷贝到用户空间的内存区域。prot-&gt;useroffset指的是对象中允许拷贝到用户空间的数据区域的偏移。prot-&gt;usersize指的是允许拷贝到用户空间的数据区域的大小。（tcp等协议这个字段好像都是空）\nsock_init_data()上述创建了sock结构体后紧接着就会调用sock_init_data完成初始化，sock_init_data中先从socket结构体中关联的inode中获取uid然后调用sock_init_data_uid()完成初始化，上述两个函数的代码如下：\nvoid sock_init_data(struct socket *sock, struct sock *sk)&#123;\t//注意：这里的uid是在创建socket和inode的时候设置的\t//i_uid用于表示与该 inode 关联的文件或对象的所有者用户ID\tkuid_t uid = sock ?\t\tSOCK_INODE(sock)-&gt;i_uid :\t\tmake_kuid(sock_net(sk)-&gt;user_ns, 0);\tsock_init_data_uid(sock, sk, uid);&#125;\n\nvoid sock_init_data_uid(struct socket *sock, struct sock *sk, kuid_t uid)&#123;\tsk_init_common(sk);\tsk-&gt;sk_send_head\t=\tNULL;\ttimer_setup(&amp;sk-&gt;sk_timer, NULL, 0);\tsk-&gt;sk_allocation\t=\tGFP_KERNEL;\t//设置接收和发送默认缓冲区大小\tsk-&gt;sk_rcvbuf\t\t=\tREAD_ONCE(sysctl_rmem_default);\tsk-&gt;sk_sndbuf\t\t=\tREAD_ONCE(sysctl_wmem_default);\t//即使是udp也设置状态为TCP_CLOSE\tsk-&gt;sk_state\t\t=\tTCP_CLOSE;\t//好像跟内存分配相关\tsk-&gt;sk_use_task_frag\t=\ttrue;\t//这里关联了sock与socket\tsk_set_socket(sk, sock);\tsock_set_flag(sk, SOCK_ZAPPED);\tif (sock) &#123;\t\t//设置用户配置的type类型给sock\t\tsk-&gt;sk_type\t=\tsock-&gt;type;\t\t//初始化套接字的等待队列\t\tRCU_INIT_POINTER(sk-&gt;sk_wq, &amp;sock-&gt;wq);\t\tsock-&gt;sk\t=\tsk;\t&#125; else &#123;\t\tRCU_INIT_POINTER(sk-&gt;sk_wq, NULL);\t&#125;\t//设置sock的uid\tsk-&gt;sk_uid\t=\tuid;\t\t//锁相关，没看太懂\trwlock_init(&amp;sk-&gt;sk_callback_lock);\tif (sk-&gt;sk_kern_sock)\t\tlockdep_set_class_and_name(\t\t\t&amp;sk-&gt;sk_callback_lock,\t\t\taf_kern_callback_keys + sk-&gt;sk_family,\t\t\taf_family_kern_clock_key_strings[sk-&gt;sk_family]);\telse\t\tlockdep_set_class_and_name(\t\t\t&amp;sk-&gt;sk_callback_lock,\t\t\taf_callback_keys + sk-&gt;sk_family,\t\t\taf_family_clock_key_strings[sk-&gt;sk_family]);\tsk-&gt;sk_state_change\t=\tsock_def_wakeup; //唤醒睡眠的进程，比如tcp状态发生改变的时候调用\tsk-&gt;sk_data_ready\t=\tsock_def_readable; //软中断收到数据包，唤醒睡眠的进程\tsk-&gt;sk_write_space\t=\tsock_def_write_space;//有写的空间，唤醒,好像几乎不会被调用\tsk-&gt;sk_error_report\t=\tsock_def_error_report;\tsk-&gt;sk_destruct\t\t=\tsock_def_destruct; //销毁套接字的回调\tsk-&gt;sk_frag.page\t=\tNULL;\tsk-&gt;sk_frag.offset\t=\t0;\tsk-&gt;sk_peek_off\t\t=\t-1;  //peek的偏移量\tsk-&gt;sk_peer_pid \t=\tNULL; //对端的进程id，同一个主机上才有吧？\tsk-&gt;sk_peer_cred\t=\tNULL; //也是对端的信息\tspin_lock_init(&amp;sk-&gt;sk_peer_lock);\tsk-&gt;sk_write_pending\t=\t0;  //写缓存区没有空间了\tsk-&gt;sk_rcvlowat\t\t=\t1;  //唤醒相关的水位线？1表示一个字节也唤醒\tsk-&gt;sk_rcvtimeo\t\t=\tMAX_SCHEDULE_TIMEOUT; //设置接收的超时时间 全F\tsk-&gt;sk_sndtimeo\t\t=\tMAX_SCHEDULE_TIMEOUT; ////设置发送的超时时间 全F\tsk-&gt;sk_stamp = SK_DEFAULT_STAMP;#if BITS_PER_LONG==32\tseqlock_init(&amp;sk-&gt;sk_stamp_seq);#endif\tatomic_set(&amp;sk-&gt;sk_zckey, 0);#ifdef CONFIG_NET_RX_BUSY_POLL\tsk-&gt;sk_napi_id\t\t=\t0;\tsk-&gt;sk_ll_usec\t\t=\tREAD_ONCE(sysctl_net_busy_read);#endif\tsk-&gt;sk_max_pacing_rate = ~0UL;  //发送速率相关，tcp拥塞控制的时候会用到bbr算法会用到\tsk-&gt;sk_pacing_rate = ~0UL;\tWRITE_ONCE(sk-&gt;sk_pacing_shift, 10);\tsk-&gt;sk_incoming_cpu = -1;   //记录属于哪个cpu\tsk_rx_queue_clear(sk);\t/*\t * Before updating sk_refcnt, we must commit prior changes to memory\t * (Documentation/RCU/rculist_nulls.rst for details)\t */\tsmp_wmb();\trefcount_set(&amp;sk-&gt;sk_refcnt, 1);\tatomic_set(&amp;sk-&gt;sk_drops, 0);&#125;EXPORT_SYMBOL(sock_init_data_uid);\n\n上述代码主要做了如下几个个事情，调用sk_init_common 初始化sock的接受队列和发送队列，这个错误队列好像是ip层收到icmp的错误报文，会放到这个错误队列中。\nstatic void sk_init_common(struct sock *sk)&#123;\t//初始化接收，发送和错误队列。\tskb_queue_head_init(&amp;sk-&gt;sk_receive_queue);\tskb_queue_head_init(&amp;sk-&gt;sk_write_queue);\tskb_queue_head_init(&amp;sk-&gt;sk_error_queue);\trwlock_init(&amp;sk-&gt;sk_callback_lock);\t//锁相关没太懂\tlockdep_set_class_and_name(&amp;sk-&gt;sk_receive_queue.lock,\t\t\taf_rlock_keys + sk-&gt;sk_family,\t\t\taf_family_rlock_key_strings[sk-&gt;sk_family]);\tlockdep_set_class_and_name(&amp;sk-&gt;sk_write_queue.lock,\t\t\taf_wlock_keys + sk-&gt;sk_family,\t\t\taf_family_wlock_key_strings[sk-&gt;sk_family]);\tlockdep_set_class_and_name(&amp;sk-&gt;sk_error_queue.lock,\t\t\taf_elock_keys + sk-&gt;sk_family,\t\t\taf_family_elock_key_strings[sk-&gt;sk_family]);\tlockdep_set_class_and_name(&amp;sk-&gt;sk_callback_lock,\t\t\taf_callback_keys + sk-&gt;sk_family,\t\t\taf_family_clock_key_strings[sk-&gt;sk_family]);&#125;\n\n然后在sock_init_data_uid()中初始化了接收缓冲区和发送缓冲区的大小，将socket的sock字段指向当前的sock结构，然后注册唤醒进程睡眠的相关函数，例如收包的唤醒函数，有空间可写的回调函数，tcp状态发生改变的回调函数。\n","categories":["网络协议栈源码学习"],"tags":["sock"]},{"title":"struct sock","url":"/2025/06/22/sock%E7%BB%93%E6%9E%84%E4%BD%93/","content":"sock 结构体在 Linux 网络协议栈中的作用非常核心，它本质上是用于管理传输层连接状态和控制信息的内核数据结构\nsock 结构体的主要功能：1.  管理传输层连接状态\n记录 socket 状态，如 TCP 的 ESTABLISHED、LISTEN、SYN_SENT 等；\n维护连接生命周期。\n\n2. 数据收发管理\n接收队列：sk_receive_queue\n发送队列：sk_write_queue\nBacklog 队列：sk_backlog\n\n3. 缓冲区和流控\n接收缓冲区大小（sk_rcvbuf）\n发送缓冲区大小（sk_sndbuf）\n控制数据收发速率，避免内存耗尽。\n\n4. 定时器与超时管理\nsk_timer：重传、超时的定时器；\n如 TCP 的重传定时器（RTO）、保活定时器（keepalive）。\n\n5. 协议特定操作**\n每个协议（TCP&#x2F;UDP）定义自己的操作集，绑定到 sock 的 sk_prot 字段；\n例如 TCP 操作集合为 tcp_prot，UDP 为 udp_prot；\n提供 sendmsg()、recvmsg()、close() 等接口。\n\n6. 连接路由与缓存\n加速报文发送时的路由查询。\n\n7. 等待队列管理\nsk_wq：实现 select()、poll()、epoll() 等机制；\n用户空间程序等待 socket 可读&#x2F;可写事件时使用。\n\n具体字段如下所示：\nstruct sock &#123;\t/*\t * Now struct inet_timewait_sock also uses sock_common, so please just\t * don&#x27;t add nothing before this first member (__sk_common) --acme\t */\tstruct sock_common\t__sk_common;#define sk_node\t\t\t__sk_common.skc_node    //管理hash表的节点，比如udp绑定端口后会把它加入udp的hash表1#define sk_nulls_node\t\t__sk_common.skc_nulls_node //管理tcp hash表的节点#define sk_refcnt\t\t__sk_common.skc_refcnt\t\t\t\t\t//引用技术#define sk_tx_queue_mapping\t__sk_common.skc_tx_queue_mapping //选择网卡队列的时候会用到#ifdef CONFIG_SOCK_RX_QUEUE_MAPPING#define sk_rx_queue_mapping\t__sk_common.skc_rx_queue_mapping  //选择网卡队列的时候会用到#endif#define sk_dontcopy_begin\t__sk_common.skc_dontcopy_begin  //不可以复制的起始地址#define sk_dontcopy_end\t\t__sk_common.skc_dontcopy_end \t//不可以复制的结束地址，比如tcp建联的时候会用到sock_copy#define sk_hash\t\t\t__sk_common.skc_hash  //五元组hash值，比如说插入ehash时候会用到#define sk_portpair\t\t__sk_common.skc_portpair//下面两个字段的联合体#define sk_num\t\t\t__sk_common.skc_num    //本地port，比如说绑定端口的时候会设置#define sk_dport\t\t__sk_common.skc_dport  //目的port，比如建立连接的时候会设置#define sk_addrpair\t\t__sk_common.skc_addrpair //用不到这个字段，用于联合体优化布局#define sk_daddr\t\t__sk_common.skc_daddr  //目的ip地址，比如connect的时候会设置。#define sk_rcv_saddr\t\t__sk_common.skc_rcv_saddr //本地ip地址，比如connect的时候会设置。#define sk_family\t\t__sk_common.skc_family   //协议族比如afinet#define sk_state\t\t__sk_common.skc_state \t//tcp三次握手四次挥手用到的状态#define sk_reuse\t\t__sk_common.skc_reuse  //timewait相关#define sk_reuseport\t\t__sk_common.skc_reuseport \t//重用ip端口#define sk_ipv6only\t\t__sk_common.skc_ipv6only#define sk_net_refcnt\t\t__sk_common.skc_net_refcnt  //sock正在被使用的引用计数#define sk_bound_dev_if\t\t__sk_common.skc_bound_dev_if //输出网络设备的索引，比如用户指定了输出设备#define sk_bind_node\t\t__sk_common.skc_bind_node //tcp收包bhash的节点？#define sk_prot\t\t\t__sk_common.skc_prot \t//不同协议的ops集合#define sk_net\t\t\t__sk_common.skc_net  //对应的网络命名空间#define sk_v6_daddr\t\t__sk_common.skc_v6_daddr //ipv6#define sk_v6_rcv_saddr\t__sk_common.skc_v6_rcv_saddr //ipv6#define sk_cookie\t\t__sk_common.skc_cookie#define sk_incoming_cpu\t\t__sk_common.skc_incoming_cpu //收包cpu索引#define sk_flags\t\t__sk_common.skc_flags\t//一些标志#define sk_rxhash\t\t__sk_common.skc_rxhash //接收端的hash值\t/* early demux fields */\tstruct dst_entry __rcu\t*sk_rx_dst; //接收方向查找路由获取的dst\tint\t\t\tsk_rx_dst_ifindex;\t//收包网络设备索引\tu32\t\t\tsk_rx_dst_cookie;\t//ipv6相关\t\tsocket_lock_t\t\tsk_lock;\tatomic_t\t\tsk_drops;\t\t//缓冲区溢出的丢包统计\tint\t\t\tsk_rcvlowat;\t\t//​套接字接收数据最小阈值​\tstruct sk_buff_head\tsk_error_queue;\t\t//错误队列，收到icmp报文错误报文的时候就会放到这个队列\tstruct sk_buff_head\tsk_receive_queue;  //软中断放包的接收队列\t/*\t * The backlog queue is special, it is always used with\t * the per-socket spinlock held and requires low latency\t * access. Therefore we special case it&#x27;s implementation.\t * Note : rmem_alloc is in this structure to fill a hole\t * on 64bit arches, not because its logically part of\t * backlog.\t */\tstruct &#123;\t\tatomic_t\trmem_alloc;\t\tint\t\tlen;\t\tstruct sk_buff\t*head;\t\tstruct sk_buff\t*tail;\t&#125; sk_backlog; //后备队列，tcprecv会用到////skb的turesize总和，如果这个值大于缓冲区大小，就会丢弃，收包的时候会把skb的truesize累加上#define sk_rmem_alloc sk_backlog.rmem_alloc\tint\t\t\tsk_forward_alloc; // 缓冲区大小的一个标志，在申请skb的时候会增加，放入发送队列后会减少\tu32\t\t\tsk_reserved_mem;   //setsockopt配置，保留缓冲区的大小 //tcp存在内存压力的时候会用到 #ifdef CONFIG_NET_RX_BUSY_POLL\tunsigned int\t\tsk_ll_usec;\t/* ===== mostly read cache line ===== */\tunsigned int\t\tsk_napi_id;#endif\tint\t\t\tsk_rcvbuf;       //接收缓冲区大小，skb的turesize大于sk_rcvbuf就直接丢弃，sock初始化的时候读取系统配置设置的\tint\t\t\tsk_disconnects;   //记录断开连接的次数\tstruct sk_filter __rcu\t*sk_filter;\tunion &#123;\t\tstruct socket_wq __rcu\t*sk_wq;   //等待队列，多种调度需要\t\t/* private: */\t\tstruct socket_wq\t*sk_wq_raw;\t\t/* public: */\t&#125;;#ifdef CONFIG_XFRM\tstruct xfrm_policy __rcu *sk_policy[2];#endif\tstruct dst_entry __rcu\t*sk_dst_cache;  //sock关联的路由结构，在tcp建立连接或者发包的时候会设置\tatomic_t\t\tsk_omem_alloc;\tint\t\t\tsk_sndbuf;     //发送缓冲区大小，和rcvbuf一样，当在整个协议栈中使用内存大于这个值的时候，就回返回nobuf\t\t/* ===== cache line for TX ===== */\t// //发送队列中缓存数据包的大小，入队的时候会加turesize, 这里可以理解为没有交付到第三层的内存使用\t//就是发送队列使用的内存总量，比如果说TCP清重传队列的时候就会移除了\tint\t\t\tsk_wmem_queued;   \t//这个与上面的队列类似，但是是记录方向三个部分的内存，分别为传输层，tc，网卡队列中存的包总量\t//是在发送方向释放数据包的时候减少的，也就是网卡驱动释放数据包的时候减少的\trefcount_t\t\tsk_wmem_alloc;\t////tcp小发送队列的的标志，设置标志位后当协议站中发送缓冲区的数据大于这个队列的数据时不会立即发送会\t//用taskelt来调度发送。\tunsigned long\t\tsk_tsq_flags; \tunion &#123;\t\tstruct sk_buff\t*sk_send_head;\t\tstruct rb_root\ttcp_rtx_queue; //二叉树，管理tcp的重传队列\t&#125;;\tstruct sk_buff_head\tsk_write_queue; //发送队列\t__s32\t\t\tsk_peek_off;       //peek的偏移\tint\t\t\tsk_write_pending;      //记录当前套接字写操作的阻塞的数量\t__u32\t\t\tsk_dst_pending_confirm;   //标识路由是否需要验证，比如查看邻居表项是否有效，收到tcpack可能会置位\tu32\t\t\tsk_pacing_status; /* see enum sk_pacing */   //是否是tcppacing 状态，比如是否启用tcp_pacing\tlong\t\t\tsk_sndtimeo;   //发送方向缓冲区满的时候，允许等待的时间，如果哦时间到了就会返回nobuf\tstruct timer_list\tsk_timer;   //sock的定时器，例如tcp保活用到这个定时器\t__u32\t\t\tsk_priority;     //sock的优先级，可以通过setsockopt设置，会影响tc的调度\t__u32\t\t\tsk_mark;     //会影响路由或者ovs的差表逻辑，通过setsockopt设置，只能通过setsockopt设置吗\tunsigned long\t\tsk_pacing_rate; /* bytes per second */ //tcppacing速率\tunsigned long\t\tsk_max_pacing_rate;   //tcppacing的最大速率\t//alloc page后会用这个结构管理page 例如在ip_append中会alloc page,与skb的非线性部分密切相关\tstruct page_frag\tsk_frag;\t\t\t\tnetdev_features_t\tsk_route_caps;  //这里是设备支持的能力\tint\t\t\tsk_gso_type;\t\t\t//GSO的类型\tunsigned int\t\tsk_gso_max_size; //GSO分段的最大长度\tgfp_t\t\t\tsk_allocation;   //分配\t//   //发送方向的hash值作用是赋值到skb的txhash字段中，比如在xps的时候会用到，这个hash值好像是随机值\t__u32\t\t\tsk_txhash; \t\t/*\t * Because of non atomicity rules, all\t * changes are protected by socket lock.\t */\tu8\t\t\tsk_gso_disabled : 1,  //是否使能gso\t\t\t\tsk_kern_sock : 1, \t\t//是否是内核创建的socket\t\t\t\tsk_no_check_tx : 1,    //setsockopt设置，是否不需要计算校验和\t\t\t\tsk_no_check_rx : 1,\t\t//rx方向\t\t\t\tsk_userlocks : 4;      //几个标志位，设置后防止修改某些参数，比如缓冲区大小\tu8\t\t\tsk_pacing_shift;\t\t//tsq相关\tu16\t\t\tsk_type;\t\t\t\t//用户创建socket时候设置的type比如DGRAM\tu16\t\t\tsk_protocol;\t\t\t//用户创建socket时候设置的协议类型 比如UDP\tu16\t\t\tsk_gso_max_segs;\t\t//分段最大数量\tunsigned long\t        sk_lingertime;  //用于tcp的关闭中，不为0的时候会等待配置的时间等数据包发送完后关闭\tstruct proto\t\t*sk_prot_creator;   //具体协议的ops集合\trwlock_t\t\tsk_callback_lock;\tint\t\t\tsk_err,  \t\t\t\t// 保存错误类型\t\t\t\tsk_err_soft;\tu32\t\t\tsk_ack_backlog;  \t\t//TCP中三次握手完成，但是没有被accept的数量\tu32\t\t\tsk_max_ack_backlog;\t\t//这个是listen系统调用配置的\tkuid_t\t\t\tsk_uid;\t\t\t\t//用户的id创建socket的时候赋值的\tu8\t\t\tsk_txrehash;\t\t\t//setsockopt设置，是否需要重新计算发送的txhash值从而影响队列的选择#ifdef CONFIG_NET_RX_BUSY_POLL\tu8\t\t\tsk_prefer_busy_poll;\tu16\t\t\tsk_busy_poll_budget;#endif\tspinlock_t\t\tsk_peer_lock;   //setsockopt设置peer相关的时候用到的锁\tint\t\t\tsk_bind_phc;\tstruct pid\t\t*sk_peer_pid;   //unix用的？ 进程间通信\tconst struct cred\t*sk_peer_cred;  //安全相关\tlong\t\t\tsk_rcvtimeo;  //接收的超时时间\tktime_t\t\t\tsk_stamp;\t//时间戳，用户调用setsockopt的时候会设置，把skb的时间戳保存到这里#if BITS_PER_LONG==32\tseqlock_t\t\tsk_stamp_seq;#endif\tatomic_t\t\tsk_tskey;\t\t\t//当通过set_sockopt设置时间戳信息的时候会把这个字段赋值tcp的序列号\tatomic_t\t\tsk_zckey;\t\t//零拷贝相关，几乎用不到吧\tu32\t\t\tsk_tsflags;\t\t\t//时间戳的标志位，通过setsockopt设置，会根据标志把时间戳信息放到msg中给用户\tu8\t\t\tsk_shutdown;\tu8\t\t\tsk_clockid;\tu8\t\t\tsk_txtime_deadline_mode : 1, //setsockopt设置的没发现哪里使用\t\t\t\tsk_txtime_report_errors : 1, ////setsockopt设置的没发现哪里使用\t\t\t\tsk_txtime_unused : 6;\t\t//未使用的\tbool\t\t\tsk_use_task_frag;\t\t//表示是否从当前进程获取一个page的一部分，initsock的时候设置为true，ip_append_data中会用到\t\tstruct socket\t\t*sk_socket;  //关联的socket\tvoid\t\t\t*sk_user_data;#ifdef CONFIG_SECURITY\tvoid\t\t\t*sk_security;#endif\tstruct sock_cgroup_data\tsk_cgrp_data;  //cgroup相关\tstruct mem_cgroup\t*sk_memcg;\t\t\t//  //cgroup相关\tvoid\t\t\t(*sk_state_change)(struct sock *sk); //唤醒睡眠的进程，比如tcp状态发生改变的时候调用\tvoid\t\t\t(*sk_data_ready)(struct sock *sk); //软中断收到数据包，唤醒睡眠的进程\tvoid\t\t\t(*sk_write_space)(struct sock *sk);//有写的空间，唤醒,好像几乎不会被调用\tvoid\t\t\t(*sk_error_report)(struct sock *sk);\tint\t\t\t(*sk_backlog_rcv)(struct sock *sk,   //当sock被用户访问的时候，会把报放到后备队列\t\t\t\t\t\t  struct sk_buff *skb);#ifdef CONFIG_SOCK_VALIDATE_XMIT\tstruct sk_buff*\t\t(*sk_validate_xmit_skb)(struct sock *sk,\t\t\t\t\t\t\tstruct net_device *dev,\t\t\t\t\t\t\tstruct sk_buff *skb);#endif\tvoid                    (*sk_destruct)(struct sock *sk); //销毁套接字的回调\tstruct sock_reuseport __rcu\t*sk_reuseport_cb;#ifdef CONFIG_BPF_SYSCALL\tstruct bpf_local_storage __rcu\t*sk_bpf_storage;#endif\tstruct rcu_head\t\tsk_rcu;\t\t//rcu锁，好像没用到？？\tnetns_tracker\t\tns_tracker;   //网络命名空间，好像跟trace有关\tstruct hlist_node\tsk_bind2_node;  //tcp使用，比如连接的时候会把这个node与bhash和bhash2关联起来&#125;;\n\n","categories":["网络协议栈源码学习"],"tags":["sock"]},{"title":"x86汇编学习(三)","url":"/2025/06/03/x86%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/","content":"函数调用函数调用是一种代码封装机制，他通过参数和返回值实现特定的功能，隐藏实现的细节，提供清晰的接口\n实现函数调用需要提供以下机制：\n\n控制转移：跳转到被调用过程并在结束后返回原处；\n参数传递：将调用方的数据传给被调用方；\n返回值传递：将结果从被调用方传回；\n局部变量管理：分配并释放被调用过程所需的内存\n\nx86-64 架构的过程调用依赖一套特定的寄存器和内存使用规范，以减少开销和提高效率。\n栈帧栈帧就是每次函数调用时，在栈上分配的一块内存区域,里面通常会包含：\n\n\n\n内容\n作用\n\n\n\n参数区\n用来保存传入函数的参数（如果没用寄存器传）\n\n\n返回地址\n函数执行完后，跳回调用者的地方\n\n\n保存的寄存器\n保存调用者的寄存器内容，防止被破坏\n\n\n局部变量\n函数内部使用的变量（如 int x = 5;）\n\n\n临时空间\n编译器优化、对齐等需求\n\n\n对应的布局大体如下：\n↑ 高地址││ 调用者保存的返回地址      ← call 指令自动压入（跳回调用点）││ 可选：旧的基址指针 (%rbp)  ← 如果使用帧指针（frame pointer）││ 被调用者保存的寄存器      ← 被调用函数保存如 rbx, rbp, r12 等││ 对齐填充                  ← 保证16字节对齐要求││ 被调用者的局部变量        ← 编译器通过 sub rsp, XXX 分配空间││ 可选：超过6个参数的栈参数  ← 前6个参数通过寄存器传，其余在栈上传↓低地址\n\n\n\n\n\n一个简单的例子演示函数 P 调用 Q 时，两者的栈帧结构分别是什么样的\n// 被调用函数 Qint Q(int a, int b) &#123;    int sum = a + b;   // 局部变量    return sum;&#125;// 调用者函数 Pint P() &#123;    int x = 3, y = 4;    int result = Q(x, y);  // 调用 Q    return result + 1;&#125;\n\n栈帧分析\n内存高地址↑|-----------------------------------------|| main → call P 压入的返回地址            | ←  P 的返回地址|-----------------------------------------|| P 保存的寄存器（如 rbx）                 || P 的局部变量 y = 4                      || P 的局部变量 x = 3                      || P 的局部变量 result                     ||-----------------------------------------|| P → call Q 压入的返回地址               | ←  Q 的返回地址|-----------------------------------------|| Q 参数 a = 3（由 rdi 传，但可写入栈）     || Q 参数 b = 4（由 rsi 传，但可写入栈）     || Q 保存的寄存器（如 rbx）                 || Q 的局部变量 sum                        |↓内存低地址\n\n函数调用函数调用其实就是“跳转”到另一个地址，把控制权从函数 P 跳转到函数 Q，就是把程序计数器（PC）设置为 Q 函数起始地址。\n但跳转之后，返回原来位置怎么办？\n\n跳到 Q 之后，执行完 Q 后，还得回到 P 原来的地方继续执行。\n所以：调用时必须“记住”返回地址。\n\n在 x86-64 中，是怎么记住这个返回地址的？\n使用 call 指令\ncall Q\n\n做了两件事：\n\n把“下一条指令地址”压入栈（这就是“返回地址”）；\n跳转到 Q 函数的入口。\n\n这个压入栈的地址（称为 地址 A），就是 call Q 指令执行完后，应该继续执行的下一条指令地址。\n使用 ret 指令：\nret\n\n\n\n\n指令形式\n描述\n\n\n\ncall Label\n调用固定地址的函数（如 call Q）\n\n\ncall *Operand\n调用函数指针（如 call *%rax）\n\n\nret\n返回上一函数\n\n\n举个例子\nc语言代码如下:\nlong swap_add(long *xp, long *yp)&#123;    long x = *xp;  // 取出 *xp    long y = *yp;  // 取出 *yp    *xp = y;       // 交换 *xp 和 *yp 的值    *yp = x;    return x + y;  // 返回原值之和&#125;long caller()&#123;    long arg1 = 534;    long arg2 = 1057;    long sum = swap_add(&amp;arg1, &amp;arg2);    long diff = arg1 - arg2;    return sum * diff;&#125;\n\n对应的汇编代码如下：\nsubq $16, %rsp                  # 为局部变量 arg1 和 arg2 分配 16 字节栈空间movq $534, (%rsp)              # 把常量 534 存入栈顶 → arg1movq $1057, 8(%rsp)            # 把常量 1057 存入 [rsp + 8] → arg2leaq 8(%rsp), %rsi             # 加载 &amp;arg2 的地址到 %rsi → 作为第二个参数movq %rsp, %rdi                # 加载 &amp;arg1 的地址到 %rdi → 作为第一个参数call swap_add                  # 调用 swap_add 函数（结果保存在 %rax，返回地址被压栈）movq (%rsp), %rdx             # 把交换后的 arg1 取到 %rdxsubq 8(%rsp), %rdx            # 计算 diff = arg1 - arg2，结果保存在 %rdximulq %rdx, %rax              # sum * diff，结果保存在 %rax（作为最终返回值）addq $16, %rsp                # 恢复栈指针，释放之前为 arg1/arg2 分配的栈空间ret                           # 从 caller 函数返回，ret 会从栈中弹出返回地址并跳回\n\n数组C语言把数组实现得非常简单直接 —— 它其实就是一段连续内存块\n举例：\nchar A[12];char *B[8];int C[6];double *D[5];\n\n\n\n\n数组\n元素大小（字节）\n总大小（字节）\n起始地址\n第 i 个元素地址\n\n\n\nA\n1\n12\nx_A\nx_A + i\n\n\nB\n8\n64\nx_B\nx_B + 8i\n\n\nC\n4\n24\nx_C\nx_C + 4i\n\n\nD\n8\n40\nx_D\nx_D + 8i\n\n\n举例：\n在 x86-64 架构中，内存引用指令可以用来简化数组访问的实现。比如，假设 E 是一个 int 类型的数组，而我们想要计算 E[i] 的值。\n此时，E 的起始地址被存储在寄存器 %rdx 中，索引 i 存储在寄存器 %rcx 中。那么下面这条指令\nmovl (%rdx, %rcx, 4), %eax\n\n会执行地址计算：x_E + 4*i，读取该地址处的内存内容，并将这个值存入寄存器 %eax 中。\n指针的的运算C语言允许对指针做加法运算；\n表达式 p + i 并不是简单的“地址 + 数字”，而是地址 + i × L，其中 L 是该指针类型 T 的大小；\n\n比如 int *p，每加1其实是加4字节；\n比如 double *p，每加1是加8字节；\n\n举例：\n以表达式 E[i]（访问第 i 个元素）为例：\n\n假设 E 是一个 int 数组，起始地址在 %rdx，下标 i 存在 %rcx；\n那么 E[i] 就是从 rdx + 4*i 所在的内存读取；\n对应汇编是：\n\nmovl (%rdx, %rcx, 4), %eax\n\n说明：int 是 4 字节，所以用 movl（加载 4 字节）和缩放因子 4\n结构体C语言的 struct 用来定义一种聚合类型，它可以把多个不同类型的变量“组合成一个整体”。\n\n在内存中，结构体的所有成员是连续存放的；\n结构体变量其实就是一个内存块；\n结构体指针指向结构体起始地址，访问成员时靠偏移量；\n编译器会记录每个成员相对结构体首地址的偏移，用来计算成员地址。\n\n举例：\n假设有如下结构体\nstruct rec &#123;    int i;    int j;    int a[2];    int *p;&#125;;\n\n对应的各个字段的偏移如下所示：\n\n\n\n偏移量 (byte)\n字段内容\n\n\n\n0\ni\n\n\n4\nj\n\n\n8\na[0]\n\n\n12\na[1]\n\n\n16\np\n\n\n如果访问结构体字段 r-&gt;i 并将其存入 r-&gt;j，对应的汇编如下所示：\n假设 struct rec *r 的地址保存在 %rdi 中：\n# Registers: r in %rdimovl (%rdi), %eax        # 将 r-&gt;i 的值读入 %eaxmovl %eax, 4(%rdi)       # 把 r-&gt;i 的值写入 r-&gt;j（偏移 4 字节）\n\n","categories":["《深入理解计算机系统》"],"tags":["汇编语言"]},{"title":"x86汇编学习(一)","url":"/2025/05/27/x86%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/","content":"汇编语言GCC（C语言编译器）可以将程序编译为汇编代码的形式进行输出。汇编语言是机器指令的文本表示形式，它详细地列出了程序中每一条指令。然后GCC 会调用汇编器（assembler）和链接器（linker），根据这些汇编代码生成最终的可执行机器代码。\n本文基于x86-64架构,\t 它是现在最常见处理器的机器语言，也是驱动大型数据中心和超级计算机的最常见处理器的机器语言。这种语言的历史悠久，开始 于 Intel 公司 1978 年的第一个 16 位处理器，然后扩展为 32 位，最近又扩展到 64 位。\n1.x86的发展过程8086(1978 年， 29K 个晶体管）。它是第一代单芯片、 16 位微处理器之一。 \ni386(1985 年， 275K 个晶体管）。将体系结构扩展到 32 位。这是 Intel 系列中第一台全面支持 Unix操作系统的机器。\nPentium 4E(2004 年， 125M 个品体管）。增加了超线程(hyperthreading) , 这种技术可以在一个处理器上同时运行两个程序；还增加了 EM64T, 它是 Intel 对AMD提出的对 IA32 的 64 位扩展的实现，我们称之为 x86-64。\n2.程序编码假设一个C程序，有两个文件p1.c 和 p2.c 我们用 Unix命令行编译这些代码：\nlinux&gt; gcc -Og -o p p1.c p2.c \n\n命令 gcc 指的就是 GCC C 编译器。因为这是 Linux上默认的编译器。编译选项-Og告诉编译器使用的优化等级。\n实际上 gcc 命令调用了一整套的程序，将源代码转化成可执行代码。首先， C预处理器扩展源代码，插入所有用#include命令指定的文件，并展开所有用#define 声明指定的宏。其次，编译器产生两个源文件的汇编代码，名字分别为 p1.s 和 p2.s。接下来，汇编器会将汇编代码转化成二进制目标代码文件p1.a 和 p2.o。 目标代码是机器代码的一种形式，它包含所有指令的二进制表示，但是还没有填入全局值的地址（此时全局变量的地址应该没有确定）。最后，链接器将两个目标代码文件与实现库函数（例如printf)的代码合并，并产生最终的可执行代码文件p。\n虽然 C语言提供了一种模型，可以在内存中声明和分配各种数据类型的对象**，但是机器码只是简单地将内存看成一个很大的、按字节寻址的数组**。 C语言中的数据类型，例如数组和结构体，在机器代码中用一组连续的字节来表示。\n代码示例：\n假设我们写了一个 C 语言代码文件 mstore.c，包含如下的函数定义：\nlong mult2(long, long);void multstore(long x, long y, long *dest) &#123;    long t = mult2(x, y);    *dest = t;&#125;\n\n在命令行上使用 -S 选项，就能看到 C 语言编译器产生的汇编代码\nlinux&gt; gcc -Og -S mstore.c\n\n这会使 GCC 运行编译器，产生一个汇编文件 mstore.s，但是不做其他进一步的工作。（通常情况下，它还会继续调用汇编器产生目标代码文件）。\n汇编代码文件包含各种声明，包括下面几行：\nmultstore:    pushq   %rbx //把寄存器 %rbx 的值压栈，保存现场，防止被后面修改    movq    %rdx, %rbx //把第三个参数（dest 指针）保存到 %rbx 中，因为调用 mult2 之后 %rdx 可能会被破坏    call    mult2 //调用 mult2(x, y) 函数（参数 x 和 y 存在 %rdi 和 %rsi 中）。    movq    %rax, (%rbx) //将 mult2 的返回值（在 %rax 中）存储到 %rbx 指向的地址中，也就是 *dest = result。    popq    %rbx //恢复之前保存的 %rbx 的值，保持寄存器一致性。    ret\n\n要查看机器代码文件的内容，有一类称为反汇编器（disassembler）的程序非常有用。这些程序根据机器代码产生一种类似于汇编代码的格式。在 Linux 系统中，带 -d 命令行标志的程序 objdump（表示 “object dump”）可以充当这个角色：\nlinux&gt; objdump -d mstore.o\n\n结果如下\nDisassembly of function multstore in binary file mstore.o0000000000000000 &lt;multstore&gt;: Offset  Bytes         Equivalent assembly language----------------------------------------------------  0:     53            push   %rbx                ; 保存 %rbx 到栈中  1:     48 89 d3      mov    %rdx, %rbx          ; 把第三个参数 dest 存入 %rbx  4:     e8 00 00 00 00 callq  9 &lt;multstore+0x9&gt;  ; 调用 mult2(x, y)  9:     48 89 03      mov    %rax, (%rbx)        ; 把结果保存到 *dest 中  c:     5b            pop    %rbx                ; 恢复 %rbx  d:     c3            retq                       ; 返回\n\n\n\n然而生成实际可执行的代码需要对一组目标代码文件运行链接器，而这一组目标代码文件中必须含有一个main 函数。假设在文件 main.c 中有下面这样的函数：\n#include &lt;stdio.h&gt;void multstore(long, long, long *);int main() &#123;    long d;    multstore(2, 3, &amp;d);    printf(&quot;2 * 3 --&gt; %ld\\n&quot;, d);    return 0;&#125;long mult2(long a, long b) &#123;    long s = a * b;    return s;&#125;\n\n用如下命令成可执行文件prog:\nlinux&gt; gcc -Og -o prog main.c mstore.c\n\n我们也可以反汇编 prog 文件\nDisassembly of function sum multstore binary file prog0000000000400540 &lt;multstore&gt;: Offset     Bytes             Equivalent assembly language---------------------------------------------------------- 400540:    53                push   %rbx 400541:    48 89 d3          mov    %rdx, %rbx 400544:    e8 42 00 00 00    callq  40058b &lt;mult2&gt; 400549:    48 89 03          mov    %rax, (%rbx) 40054c:    5b                pop    %rbx 40054d:    c3                retq 40054e:    90                nop 40054f:    90                nop\n\n这段代码与 mstore.c 反汇编产生的代码几乎完全一样。其中一个主要的区别是左边列出的地址不同——链接器将这段代码的地址移动到了一段不同的地址范围中。第二个不同之处在于链接器填上了 callq 指令调用函数 mult2 需要使用的地址（反汇编代码第 4 行）。链接器的任务之一就是为函数调用匹配到可执行代码中函数的地址.（这里的地址0000000000400540应该就是虚拟内存中的地址）\n3.汇编伪指令假设我们用如下命令生成文件 mstore.s完整的汇编文件代码如下所示：\n\t.file\t&quot;010-mstore.c&quot; //告诉汇编器这个文件来源于哪个源文件（调试信息用）\t.text  \t\t\t\t\t//告诉汇编器后面的内容是程序代码\t.globl\tmultstore \t\t//使函数对其他文件可见（链接时可调用）\t.type\tmultstore, @function //\t指定符号类型是函数\t供链接器识别该符号为函数multstore:\tpushq\t%rbx\tmovq\t%rdx, %rbx\tcall\tmult2\tmovq\t%rax, (%rbx)\tpopq\t%rbx\tret\t.size\tmultstore, .-multstore //告诉链接器这个函数占用了多少字节。在 ELF 格式中，每个符号都可以带有大小信息\t.ident\t&quot;GCC: (Ubuntu 4.8.1-2ubuntu1~12.04) 4.8.1&quot; //加入一条标识信息，说明是用什么编译器编译的。\t.section\t.note.GNU-stack,&quot;&quot;,@progbits\n\n所有以 . 开头的行都是指导汇编器和链接器工作的伪指令。\n4.C 类型与汇编指令后缀对应表 Intel 用术语”字(word)” 表示 16 位数据类型。因此，称 32 位数为“双字”, 称 64 位数为“四字” 下表为C语言基本数据类型对应的 x86-64 表示：\n\n\n\nC 声明\nIntel 数据类型\n汇编代码后缀\n大小（字节）\n\n\n\nchar\n字节\nb（byte）\n1 字节\n\n\nshort\n字\nw（word）\n2 字节\n\n\nint\n双字\nl（long）\n4 字节\n\n\nlong\n四字\nq（quad）\n8 字节\n\n\nchar*\n四字（指针）\nq\n8 字节\n\n\nfloat\n单精度\ns（single）\n4 字节\n\n\ndouble\n双精度\nl（long）\n8 字节\n\n\n 汇编后缀的意义：\n在 x86-64 汇编中，许多指令都有后缀来说明操作数的数据大小：\n\nmovb：移动 1 字节（byte）\nmovw：移动 2 字节（word）\nmovl：移动 4 字节（long word）\nmovq：移动 8 字节（quad word）\n\n5.x86-64 架构下的通用寄存器通用寄存器：临时存储运算数据、函数参数、返回值、地址、计数、内存地址等各种信息，能够加快数据处理速度，减少内存读写等\n每个寄存器的用途（按调用约定）如下表所示：\n\n\n\n64位寄存器\n32位\n16位\n8位\n用途说明\n\n\n\n%rax\n%eax\n%ax\n%al\n返回值寄存器\n\n\n%rbx\n%ebx\n%bx\n%bl\n被调用者保存\n\n\n%rcx\n%ecx\n%cx\n%cl\n第4个参数\n\n\n%rdx\n%edx\n%dx\n%dl\n第3个参数\n\n\n%rsi\n%esi\n%si\n%sil\n第2个参数\n\n\n%rdi\n%edi\n%di\n%dil\n第1个参数\n\n\n%rbp\n%ebp\n%bp\n%bpl\n被调用者保存\n\n\n%rsp\n%esp\n%sp\n%spl\n栈指针\n\n\n%r8\n%r8d\n%r8w\n%r8b\n第5个参数\n\n\n%r9\n%r9d\n%r9w\n%r9b\n第6个参数\n\n\n%r10\n%r10d\n%r10w\n%r10b\n调用者保存\n\n\n%r11\n%r11d\n%r11w\n%r11b\n调用者保存\n\n\n%r12\n%r12d\n%r12w\n%r12b\n被调用者保存\n\n\n%r13\n%r13d\n%r13w\n%r13b\n被调用者保存\n\n\n%r14\n%r14d\n%r14w\n%r14b\n被调用者保存\n\n\n%r15\n%r15d\n%r15w\n%r15b\n被调用者保存\n\n\n所有这些寄存器本质上都是 64 位的，但我们可以只访问其中的低 32、16、8 位（如上表第二，第三，第四列所示）\n与专用寄存器的区别：\n\n\n\n类型\n说明\n例子\n\n\n\n通用寄存器\n用于各种灵活数据操作\n%rax, %rdi\n\n\n专用寄存器\n有固定用途\n%rip（指令指针），%cr3（控制）\n\n\n段寄存器\n用于段地址（早期保护模式）\n%cs, %ds\n\n\n标志寄存器\n保存运算结果标志\n%eflags\n\n\n6.x86 汇编寻址方式表寻址（Addressing）就是确定数据所在地址的过程，具体汇编的格式和含义如下表所示：\n\n\n\n类型\n格式\n操作数值表示\n名称（寻址方式）\n\n\n\n立即数\n$Imm\nImm\n立即数寻址（Immediate Addressing）\n\n\n寄存器\nr_a\nR[r_a]\n寄存器寻址（Register Addressing）\n\n\n存储器\nImm\nM[Imm]\n绝对寻址（Absolute Addressing）\n\n\n存储器\n(r_a)\nM[R[r_a]]\n间接寻址（Indirect Addressing）\n\n\n存储器\nImm(r_b)\nM[Imm + R[r_b]]\n基址 + 偏移量（Base + Offset）寻址\n\n\n存储器\n(r_b, r_i)\nM[R[r_b] + R[r_i]]\n变址寻址（Indexed Addressing）\n\n\n存储器\nImm(r_b, r_i)\nM[Imm + R[r_b] + R[r_i]]\n变址 + 偏移量寻址\n\n\n存储器\n(r_i, s)\nM[R[r_i] * s]\n比例变址寻址（Scaled Index）\n\n\n存储器\nImm(,r_i,s)\nM[Imm + R[r_i] * s]\n比例变址 + 偏移量寻址\n\n\n存储器\n(r_b, r_i, s)\nM[R[r_b] + R[r_i] * s]\n比例变址 + 基址寻址\n\n\n存储器\nImm(r_b, r_i, s)\nM[Imm + R[r_b] + R[r_i] * s]\n比例变址 + 基址 + 偏移量寻址\n\n\n格式指的是在汇编语言中书写一个操作数（比如常量、寄存器或内存地址）时，它的语法结构长什么样，也就是“写法”。\n操作数表示是指汇编语言中那个操作数在执行时真正的数值含义，如下表所示：\n\n\n\n概念\n意义\n举例\n\n\n\n格式\n汇编里写法\n8(%rbp)\n\n\n操作数表示\n真正要访问的值的含义\nM[8 + R[rbp]]\n\n\n举例：\n\n立即数寻址（Immediate Addressing）\n\nmov $5, %eax      # 把常量 5 移到寄存器 eax 中\n\n\n寄存器寻址（Register Addressing）\n\nmov %ebx, %eax    # 把 %ebx 里的值复制到 %eax\n\n\n间接寻址（Indirect Addressing)\n\nmov (%rbx), %eax  # 把 %rbx 指向的内存地址中的值加载到 %eax\n\n\n基址 + 偏移寻址（Base + Offset)\n\nmov 8(%rbp), %eax # 取栈帧中偏移 8 字节的变量到 %eax\n\n","categories":["《深入理解计算机系统》"],"tags":["汇编语言"]},{"title":"x86汇编学习(二)","url":"/2025/05/28/x86%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"汇编指令学习MOV指令 下表列出的是最简单形式的数据传送指令-MOV类。这些指令把数据从源位置复制到目的位置，不做任何变化。 MOV 类由四条指令组成： movb、 movw、 movl 和 movq。这些指令都执行同样的操作；主要区别在千它们操作的数据大小不同：分别是 1、 2 、 4 和 8 字节。\n\n\n\n指令\n效果\n描述\n\n\n\nMOV S, D\nD ← S\n传送\n\n\nmovb\n\n传送字节\n\n\nmovw\n\n传送字\n\n\nmovl\n\n传送双字\n\n\nmovq\n\n传送四字\n\n\nmovabsq I, R\nR ← I\n传送绝对的四字\n\n\n源操作数指定的值是一个立即数，存储在寄存器中或者内存中。目的操作数指定一个 位置，要么是一个寄存器或者，要么是一个内存地址。 x86-64 加了一条限制，传送指令的 两个操作数不能都指向内存位置。将一个值从一个内存位置复制到另一个内存位置需要两条指令——第一条指令将源值加载到寄存器中，第二条将该寄存器值写入目的位置。\n下面的 MOV指令示例给出了源和目的类型的五种可能的组合。第一个是源操作数，第二个是目的操作数：\n\n\n\n序号\n指令\n源类型 → 目的类型\n字节数\n\n\n\n1\nmovl $0x4050, %eax\nImmediate → Register\n4 bytes\n\n\n2\nmovw %bp, %sp\nRegister → Register\n2 bytes\n\n\n3\nmovb (%rdi, %rcx), %al\nMemory → Register\n1 byte\n\n\n4\nmovb $-17, (%rsp)\nImmediate → Memory\n1 byte\n\n\n5\nmovq %rax, -12(%rbp)\nRegister → Memory\n8 bytes\n\n\n数据扩展传送指令当你把一个小的数据（如 1 字节）存入一个大的寄存器（如 4 字节）时，需要决定怎么填补高位。 这个过程叫“扩展（Extend）”，有两种方式：\n\n\n\n扩展方式\n含义\n\n\n\n零扩展（Zero-Extend）\n高位填 0，不改变原数\n\n\n符号扩展（Sign-Extend）\n高位按符号位（最高位）填充，保持数值含义\n\n\n零扩展传送指令\n\n\n\n指令\n效果\n描述\n\n\n\nmovzbw\n把字节零扩展到字\n高位填 0，目标是16位\n\n\nmovzbl\n把字节零扩展到双字\n高位填 0，目标是32位\n\n\nmovzwl\n把字零扩展到双字\n把16位数扩展为32位\n\n\nmovzbq\n把字节零扩展到四字\n把8位扩展为64位（x86-64用）\n\n\nmovzwq\n把字零扩展到四字\n把16位扩展为64位（x86-64用）\n\n\n符号扩展传送指令\n\n\n\n指令\n效果\n描述\n\n\n\nmovsbw\n把字节符号扩展到字\n符号位复制到高位\n\n\nmovsbl\n把字节符号扩展到双字\n8 → 32 位，保持正负性\n\n\nmovswl\n把字符号扩展到双字\n16 → 32 位\n\n\nmovsbq\n把字节符号扩展到四字\n8 → 64 位\n\n\nmovswq\n把字符号扩展到四字\n16 → 64 位\n\n\nmovslq\n把双字符号扩展到四字\n32 → 64 位\n\n\ncltq\nrax ← sign_extend(eax)\n把 eax 的符号扩展复制到 rax\n\n\n示例\nC语言代码如下:\nlong exchange(long *xp, long y)&#123;    long x = *xp;    *xp = y;    return x;&#125;\n\n对应的汇编代码如下：\nexchange:    movq    (%rdi), %rax      # Get x at xp. Set as return value.    movq    %rsi, (%rdi)      # Store y at xp.    ret                       # Return.\n\n寄存器约定：\n\nxp 存放在 %rdi\ny  存放在 %rsi\n\n当过程开始执行时，过程参数 xp 和 y分别存储在寄存器%rdi 和%rsi 中。然后，指令 2 从内存中读出 x, 把它存放到寄存器%rax 中，直接实现了 C程序中的操作 x=*xp。然后用寄存器%rax从这个函数返回一个值，因而返回值就是 x。将 y写入到寄存器%rdi 中的 xp 指向的内存位置，直接实现了操作*xp=y。这个例子说明了如何用 MOV 指令从内存中读值到寄存器（第 2 行），如何从寄存器写到内存（第 3 行）。\n有两点值得注意。首先，我们看到 C语言中所谓的”指针”其实就是地址。间接引用指针就是将该指针放在一个寄存器中，然后在内存引用中使用这个寄存器。其次，像 x这样的局部变量通常是保存在寄存器中，而不是内存中。访问寄存器比访问内存要快得多。\nPUSH &amp;&amp; POP 指令pushq 把一个值压入栈中，popq 从栈中弹出一个值\n栈的基本概念：\n\n栈（stack）是一种先进后出（LIFO）的数据结构\n在 x86-64 架构中，栈是向低地址增长的\n栈的“顶”是当前栈的最新元素，指针 %rsp 指向这个栈顶\n\npushq 指令详解（压栈）把一个四字（8字节）值压入栈中\n实现步骤：\n\n先将 %rsp 减 8（因为栈向下生长）\n再把值存入新地址 [rsp]\n\n\n\n\n指令\n效果\n描述\n\n\n\npushq S\nR[%rsp] ← R[%rsp] - 8``M[R[%rsp]] ← S\n将四字压入栈\n\n\n因此，指令pushq %rbp等价于：\nsubq $8, %rspmovq %rbp, (%rsp)\n\n\n\npopq 指令详解（弹栈）从栈顶取出一个四字（8字节）值赋给寄存器\n实现步骤：\n\n从 [rsp] 读取值赋给目标寄存器\n再将 %rsp 加 8，栈顶上移\n\n\n\n\n指令\n效果\n描述\n\n\n\npopq D\nD ← M[R[%rsp]]``R[%rsp] ← R[%rsp] + 8\n将四字弹出栈\n\n\n因此，指令popq %rbp等价于：\nmovq (%rsp), %rbp     ; 把栈顶的值写入 %rbpaddq $8, %rsp         ; 栈指针回退，栈“弹出”一个值\n\n算术与逻辑指令\n\n\n指令\n效果\n描述\n\n\n\nleaq S, D\nD ← &amp;S\n加载有效地址\n\n\nINC D\nD ← D + 1\n加1\n\n\nDEC D\nD ← D - 1\n减1\n\n\nNEG D\nD ← -D\n取负\n\n\nNOT D\nD ← ~D\n取补\n\n\nADD S, D\nD ← D + S\n加法\n\n\nSUB S, D\nD ← D - S\n减法\n\n\nIMUL S, D\nD ← D * S\n乘法\n\n\nXOR S, D\nD ← D ^ S\n异或\n\n\nOR S, D\n&#96;D ← D\nS&#96;\n\n\nAND S, D\nD ← D &amp; S\n与\n\n\nSAL k, D\nD ← D &lt;&lt; k\n左移（算术）\n\n\nSHL k, D\nD ← D &lt;&lt; k\n左移（与SAL相同）\n\n\nSAR k, D\nD ← D &gt;&gt;a k\n算术右移（保留符号）\n\n\nSHR k, D\nD ← D &gt;&gt;l k\n逻辑右移（高位补0）\n\n\n上述加载有效地址（load effective address）指令 leaq 实际上是 movq 指令的变形。它的指令形式是从内存读数据到寄存器，但实际上它根本就没有引用内存。它的第一个操作数看上去是一个内存引用，但该指令并不是从指定的位置读入数据，而是将有效地址写入到目的操作数。类似于 C 语言中的 &amp;x —— 不是取变量的值，而是取变量的“地址”。\n特殊的算术操作当两个 64 位的整数相乘时，结果可能超过 64 位，因此需要 128 位 来表示结果。\nx86-64 指令集中支持这种情况的指令并不多，专门提供了一些用于处理 128 位乘积和除法 的指令。\n\n\n\n指令\n效果\n描述\n\n\n\nimulq S\n%rdx:%rax ← S × %rax（符号扩展）\n有符号乘法\n\n\nmulq S\n%rdx:%rax ← S × %rax（零扩展）\n无符号乘法\n\n\nclto\n%rdx ← 符号扩展(%rax)\n转换为八字\n\n\nidivq S\n%rax ← (%rdx:%rax) ÷ S``%rdx ← (%rdx:%rax) mod S\n有符号除法\n\n\ndivq S\n%rax ← (%rdx:%rax) ÷ S``%rdx ← (%rdx:%rax) mod S\n无符号除法\n\n\nimulq S：\n有符号乘法，将 S 与 %rax 相乘，结果保存在 %rdx:%rax 中。\n有“符号扩展”的作用，适用于带正负号的整数。\n\nmulq S：\n无符号乘法（没有正负号），同样保存在 %rdx:%rax。\n\n举例：\nmovq $5, %raxmovq $6, %rbximulq %rbx   ; S = %rbx\n\nRFLAGS寄存器除了整数寄存器之外，CPU 还维护一个单个位的条件码寄存器（flag），用来记录最近的操作是否：\n\n有溢出\n结果是否为 0\n是否是负数\n是否进位\n\n最常用的条件码有：\n\n\n\n条件码\n含义\n说明\n\n\n\nCF\nCarry Flag\n进位标志：无符号加法进位、减法借位\n\n\nZF\nZero Flag\n零标志：结果为 0\n\n\nSF\nSign Flag\n符号标志：结果为负（最高位为 1）\n\n\nOF\nOverflow Flag\n溢出标志：有符号加法或减法结果溢出（例如正数+正数得到负数）\n\n\n举例1：\nmov $0xFFFFFFFFFFFFFFFF, %raxadd $1, %rax     ; 溢出了\n\n%rax 原本是最大无符号值，加 1 会溢出，导致：\n\nCF = 1（发生进位）\nZF = 1（结果变为 0）\n\n举例2：\ncmp %rax, %rbx   ; 实际做的是: %rbx - %rax，设置条件码je equal_label   ; 如果 ZF == 1，跳转（即相等）\n\ncmp %rax, %rbx 会执行：%rbx - %rax，但不保存结果，只是设置条件码（flags）\n如果 结果为 0（即 %rax == %rbx），那么 ZF（Zero Flag）会被置为 1\n紧接着 je equal_label 会检查 ZF 是否为 1：\n\n如果是，跳转到标签 equal_label 处继续执行\n否则，顺序执行下一条指令\n\nSET指令指令是用来“读取条件码的状态”，并把它转换成布尔值（0 或 1）存入一个字节中（只能设置一个字节）。\n举例：\ncmp %rax, %rbx     ; 比较 %rbx - %rax，设置条件码setl %al           ; 如果 %rbx &lt; %rax（有符号），%al = 1，否则 = 0\n\n上述通过读取 RFLAGS 寄存器中的条件码位（如 ZF、SF、OF、CF）来判断是否成立。\n\n\n\n指令\n同义名\n效果\n设置条件\n\n\n\nsete D\nsetz\nD ← ZF\n相等 &#x2F; 零\n\n\nsetne D\nsetnz\nD ← ¬ZF\n不等 &#x2F; 非零\n\n\nsets D\n\nD ← SF\n负数\n\n\nsetns D\n\nD ← ¬SF\n非负数\n\n\nsetg D\nsetnle\nD ← (SF = OF) ∧ ¬ZF\n大于（有符号）\n\n\nsetge D\nsetnl\nD ← (SF = OF)\n大于等于（有符号）\n\n\nsetl D\nsetnge\nD ← SF ≠ OF\n小于（有符号）\n\n\nsetle D\nsetng\nD ← (SF ≠ OF) ∨ ZF\n小于等于（有符号）\n\n\nseta D\nsetnbe\nD ← ¬CF ∧ ¬ZF\n大于（无符号）\n\n\nsetae D\nsetnb\nD ← ¬CF\n大于等于（无符号）\n\n\nsetb D\nsetnae\nD ← CF\n小于（无符号）\n\n\nsetbe D\nsetna\nD ← CF ∨ ZF\n小于等于（无符号）\n\n\n跳转指令跳转指令的作用包括，实现条件判断（if &#x2F; else），实现循环（while &#x2F; for &#x2F; do while），实现函数跳转 &#x2F; 返回， 实现无条件跳转（goto）\n\n\n\n指令\n同义名\n跳转条件\n描述\n\n\n\njmp Label\n\n1\n直接跳转\n\n\njmp *Operand\n\n\n间接跳转\n\n\nje Label\njz\nZF\n相等 &#x2F; 零\n\n\njne Label\njnz\n¬ZF\n不相等 &#x2F; 非零\n\n\njs Label\n\nSF\n负数\n\n\njns Label\n\n¬SF\n非负数\n\n\njg Label\njnle\n(SF &#x3D; OF) ∧ ¬ZF\n大于（有符号）\n\n\njge Label\njnl\nSF &#x3D; OF\n大于等于（有符号）\n\n\njl Label\njnge\nSF ≠ OF\n小于（有符号）\n\n\njle Label\njng\n(SF ≠ OF) ∨ ZF\n小于等于（有符号）\n\n\nja Label\njnbe\n¬CF ∧ ¬ZF\n超过（无符号）\n\n\njae Label\njnb\n¬CF\n超过或相等（无符号≥）\n\n\njb Label\njnae\nCF\n低于（无符号）\n\n\njbe Label\njna\nCF ∨ ZF\n低于或相等（无符号≤）\n\n\n","categories":["《深入理解计算机系统》"],"tags":["汇编语言"]},{"title":"x86汇编学习(四)","url":"/2025/06/04/x86%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/","content":"数据对齐数据按对齐要求存放，可以让处理器和内存系统更高效地访问数据\n对齐的要求比如 64 位系统（x86-64），一个 double 或 long 类型的变量通常要求8字节对齐，也就是说，变量的地址必须是8的倍数。\n下表格列出了常见类型的对齐要求（K）：\n\n\n\nK\n类型\n\n\n\n1\nchar\n\n\n2\nshort\n\n\n4\nint, float\n\n\n8\nlong, double, char*\n\n\n对齐的实现（以结构体为例）编译器会自动插入填充字节（padding），确保每个成员的起始地址都满足其类型的对齐要求，整个结构体的大小也是最大对齐数的倍数\n举例\nstruct S1 &#123;    int i;    char c;    int j;&#125;;\n\n\n这里 int 要求4字节对齐，char 要求1字节对齐。\n如果没有填充，i（4字节）后面紧跟c（1字节），接着就是j。这样j的起始地址不是4的倍数，不符合对齐要求。\n编译器会在c和j之间插入3字节填充，使得j从8的倍数地址开始。\n结构体总大小也要满足最大对齐数的倍数。\n\n偏移 0    4   5     8内容 i |  c | 填充 | j\n\n注意：结构体 S1 的最大对齐值是4，所以整个结构体的对齐值就是4。\n内存越界引用和缓冲区溢出C 语言对数组的访问没有边界检查，如果写操作越界，不仅会破坏数据本身，还可能破坏栈上的局部变量和保存的状态信息（比如返回地址、寄存器值等）。\n如果程序使用了被破坏的状态，再执行比如函数返回（ret 指令），就会出错，甚至导致程序劫持（如攻击者可控制返回地址）。\n举例：\n/* Implementation of library function gets() */char *gets(char *s)&#123;    int c;    char *dest = s;    while ((c = getchar()) != &#x27;\\n&#x27; &amp;&amp; c != EOF)        *dest++ = c;    if (c == EOF &amp;&amp; dest == s)        /* No characters read */        return NULL;    *dest++ = &#x27;\\0&#x27;; /* Terminate string */    return s;&#125;/* Read input line and write it back */void echo()&#123;    char buf[8];    /* Way too small! */    gets(buf);    puts(buf);&#125;\n\n前面的代码实现了标准库函数 gets，并用它来说明该函数存在的严重缺陷。gets 会从标准输入读取一整行内容，直到遇到回车换行符或发生错误为止，然后把读到的字符串复制到参数 s 指定的位置，并在末尾添加一个 null 字符。在 echo 这个例子中，我们调用了 gets，让它从标准输入读取一行内容并输出到标准输出。\ngets 最大的问题在于，它无法判断为存放整个字符串预留的空间是否足够。在 echo 的演示代码中，缓冲区长度被故意设置得很小，只有 8 个字节。因此，只要输入的字符串长度超过 7 个字符（最后一位要留给结束符），就会发生越界写入的问题。\n对应的汇编代码如下：\nvoid echo()1  echo:2      subq $24, %rsp      # Allocate 24 bytes on stack3      movq %rsp, %rdi     # Compute buf as %rsp4      call gets           # Call gets5      movq %rsp, %rdi     # Compute buf as %rsp6      call puts           # Call puts7      addq $24, %rsp      # Deallocate stack space8      ret                 # Return\n\n该程序在栈上分配了 24 个字节。字符数组 buf 位于栈顶，可以看到，%rsp 被复制到 %rdi 作为调用 gets 和 puts 的参数。这个调用的参数和存储的返回指针之间的 16 字节是未被使用的。只要用户输入不超过 7 个字符，gets 返回的字符串（包括结尾的 null）就能够放进为 buf 分配的空间里。不过，长一些的字符串就会导致 gets 覆盖栈上存储的某些信息。随着字符串变长，下面的信息可能会被破坏：\n\n\n\n输入的字符串数量\n附加的被破坏的状态\n\n\n\n0~7\n无\n\n\n8~23\n未被使用的栈空间\n\n\n24~31\n返回地址\n\n\n32+\ncaller 中保存的状态\n\n\n只要输入的字符串长度不超过 23 个字符，一般不会导致严重的问题。但如果输入再长一些，返回地址以及更多保存的状态信息就可能被覆盖和破坏。如果返回地址被覆盖，当执行 ret 指令（第 8 行）时，程序可能会跳转到一个完全不可预料的位置，导致异常行为。这种内存越界写的问题在看 C 语言源码时是无法直接发现的，只有通过研究底层机器级别的程序，才能真正理解像 gets 这种函数在内存越界写时带来的危害。\n","categories":["《深入理解计算机系统》"],"tags":["汇编语言"]},{"title":"内核socket套接字的创建","url":"/2025/05/21/%E5%86%85%E6%A0%B8socket%E5%88%9B%E5%BB%BA/","content":"内核socket创建用户程序执行syscall指令，系统会从用户态陷入内核态并根据传入的系统调用号（例如在x86架构下socket系统调用号为41）从系统调用表中找到对应的处理函数，socekt（）系统调用对应的处理函数如下所示：\nSYSCALL_DEFINE3(socket, int, family, int, type, int, protocol)&#123; return __sys_socket(family, type, protocol);&#125;\n\n上述宏SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol)经过一系列展开后其实就是系统调用表中系统调用号41对应的处理函数\n上述__sys_socket函数定义如下：\n1.sock_create（）int __sys_socket(int family, int type, int protocol)&#123; struct socket *sock; int flags; //根据传入的参数创建socket sock = __sys_socket_create(family, type,       update_socket_protocol(family, type, protocol)); if (IS_ERR(sock))  return PTR_ERR(sock); //不关心低4bit sock的type flags = type &amp; ~SOCK_TYPE_MASK; if (SOCK_NONBLOCK != O_NONBLOCK &amp;&amp; (flags &amp; SOCK_NONBLOCK))  //清位之后置位  flags = (flags &amp; ~SOCK_NONBLOCK) | O_NONBLOCK; //将socket映射一个文件描述符号 return sock_map_fd(sock, flags &amp; (O_CLOEXEC | O_NONBLOCK));&#125;\n\n该函数主要做了两个事情，创建socekt和映射描述符fd。\n上面创建socket函数__sys_socket_create定义如下：\n2.__sys_socket_create（）static struct socket *__sys_socket_create(int family, int type, int protocol)&#123; struct socket *sock; int retval; /* Check the SOCK_* constants for consistency.  */ BUILD_BUG_ON(SOCK_CLOEXEC != O_CLOEXEC); BUILD_BUG_ON((SOCK_MAX | SOCK_TYPE_MASK) != SOCK_TYPE_MASK); BUILD_BUG_ON(SOCK_CLOEXEC &amp; SOCK_TYPE_MASK); BUILD_BUG_ON(SOCK_NONBLOCK &amp; SOCK_TYPE_MASK); //用户参数合法性检查，是否有非法标志位 if ((type &amp; ~SOCK_TYPE_MASK) &amp; ~(SOCK_CLOEXEC | SOCK_NONBLOCK))  return ERR_PTR(-EINVAL); type &amp;= SOCK_TYPE_MASK; //创建套接字 retval = sock_create(family, type, protocol, &amp;sock); if (retval &lt; 0)  return ERR_PTR(retval); return sock;&#125;\n\n上述sock_create为实际创建socket的函数，它包裹了__sock_create()如下所示：\nint sock_create(int family, int type, int protocol, struct socket **res)&#123; return __sock_create(current-&gt;nsproxy-&gt;net_ns, family, type, protocol, res, 0);&#125;\n\n可以看到__sock_create多带了一个参数current-&gt;nsproxy-&gt;net_ns  这个current是一个宏，用于获取当前进程的task_struct指针\ncurrent宏定义如下:\nstatic __always_inline struct task_struct *get_current(void)&#123; //这个pcpu_hot中有一个字段就是current_task也就是task_struct //this_cpu_read_stable()就是读取per_cpu变量的一个宏 return this_cpu_read_stable(pcpu_hot.current_task);//从per-cpu变量中获取当前的task_sturct结构&#125;\n\n上述current宏其实等同于指向一个task_struct的指针，而__sock_create(current-&gt;nsproxy-&gt;net_ns, family, type, protocol, res, 0);中参数current-&gt;nsproxy-&gt;net_ns就是指向一个具体的网络命名空间，为什么要传入这个网络命令空间作为参数？举个例子，如果进程属于某个容器的网络命名空间，创建的套接字必须关联到该容器的网络栈，而非宿主机的默认命名空间， 比如在创建docker进程的时候，就会设置sproxy-&gt;net_ns所属的网络命令空间。最终的目的一定是为了流量隔离。\n接下来看一下真正创建socket的函数__sock_create\n3.__sock_create()int __sock_create(struct net *net, int family, int type, int protocol,\t\t\t struct socket **res, int kern)&#123;\tint err;\tstruct socket *sock;\tconst struct net_proto_family *pf;\t//合法性检查\tif (family &lt; 0 || family &gt;= NPROTO)\t\treturn -EAFNOSUPPORT;\tif (type &lt; 0 || type &gt;= SOCK_MAX)\t\treturn -EINVAL;\t//过时的 PF_INET + SOCK_PACKET 参数组合转换为现代支持的 PF_PACKET 协议族\tif (family == PF_INET &amp;&amp; type == SOCK_PACKET) &#123;\t\tpr_info_once(&quot;%s uses obsolete (PF_INET,SOCK_PACKET)\\n&quot;,\t\t\t     current-&gt;comm);\t\tfamily = PF_PACKET;\t&#125;\t//安全相关的钩子\terr = security_socket_create(family, type, protocol, kern);\tif (err)\t\treturn err;\t//分配并初始化一个套接字对应的 inode 和socket 结构\tsock = sock_alloc();\tif (!sock) &#123;\t\tnet_warn_ratelimited(&quot;socket: no more sockets\\n&quot;);\t\treturn -ENFILE;\t//这里的type也是用户创建socket的type\tsock-&gt;type = type;\trcu_read_lock();\t//从sock_register数组中找到一个元素pf，这个pf中有一个create()回调函数，\t//这个回调函数就是family类型(比如AF_INET)需要的create函数。\tpf = rcu_dereference(net_families[family]);\terr = -EAFNOSUPPORT;\tif (!pf)\t\tgoto out_release;\t//增加引用计数？有些family可能是以模块方式加载的？？？\tif (!try_module_get(pf-&gt;owner))\t\tgoto out_release;\t/* Now protected by module ref count */\trcu_read_unlock();\t//如果用户指定的family类型是AF_INIT,那这个函数就是调用的inet_create()\terr = pf-&gt;create(net, sock, protocol, kern);\tif (err &lt; 0)\t\tgoto out_module_put;\tif (!try_module_get(sock-&gt;ops-&gt;owner))\t\tgoto out_module_busy;\t//减引用计数\tmodule_put(pf-&gt;owner);\t//安全模块相关\terr = security_socket_post_create(sock, family, type, protocol, kern);\tif (err)\t\tgoto out_sock_release;\t*res = sock;\treturn 0;out_module_busy:\terr = -EAFNOSUPPORT;out_module_put:\tsock-&gt;ops = NULL;\tmodule_put(pf-&gt;owner);out_sock_release:\tsock_release(sock);\treturn err;out_release:\trcu_read_unlock();\tgoto out_sock_release;&#125;EXPORT_SYMBOL(__sock_create);\n\n\n上述代码中通过调用sock_alloc()分配了inode和socket结构体，并对inode结构体进行初始化，比如设置唯一的inode编号等，具体代码如下：\nstruct socket *sock_alloc(void)&#123;\tstruct inode *inode;\tstruct socket *sock;\t//调用socket文件系统的超级块的ops申请一个inode，注意：socket结构体也是在这里分配的\tinode = new_inode_pseudo(sock_mnt-&gt;mnt_sb);\tif (!inode)\t\treturn NULL;\t//通过container_of拿到socket结构体 \tsock = SOCKET_I(inode);\tinode-&gt;i_ino = get_next_ino();//分配唯一的inode编号\tinode-&gt;i_mode = S_IFSOCK | S_IRWXUGO; //文件类型\tinode-&gt;i_uid = current_fsuid();\tinode-&gt;i_gid = current_fsgid();\tinode-&gt;i_op = &amp;sockfs_inode_ops;//绑定ops\treturn sock;&#125;\n\n上述代码通过调用new_inode_pseudo()创建了inode和socket，socket的获取通过宏SOCKET_I（container_of）返回socket其中sock_mnt是一个vfsmount(可以理解为一个挂载点)结构mnt_sb为一个超级块，在sock_init()中被挂载，sock_init()在start_kernel中会最终被调用到。\npf = rcu_dereference(net_families[family]); 这一行作用是根据用户传入的不同的协议族（比如AF_INET）来选择具体的回调函数，然后会调用pf-&gt;create(net, sock, protocol, kern); 这个-&gt;create() 就取决于family的类型。对于AF_INET类型的family，就是调用inet_create()，注册的过程由sock_register()实现，该函数就是将不同的family类型，注册到一个数组中(这个数组叫net_families)。对应的函数如下：\nint sock_register(const struct net_proto_family *ops)&#123;\tint err;\tif (ops-&gt;family &gt;= NPROTO) &#123;\t\tpr_crit(&quot;protocol %d &gt;= NPROTO(%d)\\n&quot;, ops-&gt;family, NPROTO);\t\treturn -ENOBUFS;\t&#125;\tspin_lock(&amp;net_family_lock);\tif (rcu_dereference_protected(net_families[ops-&gt;family],\t\t\t\t      lockdep_is_held(&amp;net_family_lock)))\t\terr = -EEXIST;\telse &#123;\t\t//这里注册了不同family类型到net_families数组中！\t\trcu_assign_pointer(net_families[ops-&gt;family], ops);\t\terr = 0;\t&#125;\tspin_unlock(&amp;net_family_lock);\tpr_info(&quot;NET: Registered %s protocol family\\n&quot;, pf_family_names[ops-&gt;family]);\treturn err;&#125;\n\n对于AF_INET(ipv4)协议族，上述注册的函数为inet_create()，在inet_init()中被调用，同样inet_init()也是最终被start_kernel()调用到。\n也就是说err = pf-&gt;create(net, sock, protocol, kern);会根据协议族的类型调用不同的create函数，同时传入用户制定的类型(TYPE)和协议做为参数，下面默认使用ipv4协议族进行举例，待分析函数就是inet_create()函数实现如下所示：\n也就是说err = pf-&gt;create(net, sock, protocol, kern);会根据协议族的类型调用不同的create函数，同时传入用户制定的类型(TYPE)和协议做为参数，下面使用ipv4协议族进行举例，对应的函数就是inet_create()，该函数其实主要处理了三个逻辑：\n\n根据用户制定协议从inetsw找到socket和sock对应的ops\n创建sock结构，并进行一系列的初始化（例如绑定sock的ops，这里不同的协议对应不同的ops）\n调用sock的init函数，完成对具体协议的初始化inet_create函数定义如下：\n\nstatic int inet_create(struct net *net, struct socket *sock, int protocol,\t\t       int kern)&#123;\tstruct sock *sk;\tstruct inet_protosw *answer;\tstruct inet_sock *inet;\tstruct proto *answer_prot;\tunsigned char answer_flags;\tint try_loading_module = 0;\tint err;\t\t//参数合法性检查\tif (protocol &lt; 0 || protocol &gt;= IPPROTO_MAX)\t\treturn -EINVAL;\t//初始化socket的状态\tsock-&gt;state = SS_UNCONNECTED;\t/* Look for the requested type/protocol pair. */lookup_protocol:\terr = -ESOCKTNOSUPPORT;\trcu_read_lock();\t//遍历inetsw[sock-&gt;type]这个元素的链表，找到protocol相同的元素，\tlist_for_each_entry_rcu(answer, &amp;inetsw[sock-&gt;type], list) &#123;\t\terr = 0;\t\t/* Check the non-wild match. */\t\t//精确匹配，用户指定的protocol和链表中的某个元素相同。\t\tif (protocol == answer-&gt;protocol) &#123;\t\t\tif (protocol != IPPROTO_IP)\t\t\t\tbreak;\t\t&#125; else &#123;\t\t\t/* Check for the two wild cases. */\t\t\t//如果用户指定的proto是0那就走这个分支，\t\t\t//比如type是SOCK_STREAM，proto=0 那answer关联的就是TCP\t\t\tif (IPPROTO_IP == protocol) &#123;\t\t\t\tprotocol = answer-&gt;protocol;\t\t\t\tbreak;\t\t\t&#125;\t\t\tif (IPPROTO_IP == answer-&gt;protocol)\t\t\t\tbreak;\t\t&#125;\t\terr = -EPROTONOSUPPORT;\t&#125;\t//错误的处理\tif (unlikely(err)) &#123;\t\tif (try_loading_module &lt; 2) &#123;\t\t\trcu_read_unlock();\t\t\t/*\t\t\t * Be more specific, e.g. net-pf-2-proto-132-type-1\t\t\t * (net-pf-PF_INET-proto-IPPROTO_SCTP-type-SOCK_STREAM)\t\t\t */\t\t\tif (++try_loading_module == 1)\t\t\t\trequest_module(&quot;net-pf-%d-proto-%d-type-%d&quot;,\t\t\t\t\t       PF_INET, protocol, sock-&gt;type);\t\t\t/*\t\t\t * Fall back to generic, e.g. net-pf-2-proto-132\t\t\t * (net-pf-PF_INET-proto-IPPROTO_SCTP)\t\t\t */\t\t\telse\t\t\t\trequest_module(&quot;net-pf-%d-proto-%d&quot;,\t\t\t\t\t       PF_INET, protocol);\t\t\tgoto lookup_protocol;\t\t&#125; else\t\t\tgoto out_rcu_unlock;\t&#125;\terr = -EPERM;\t//用户有权限才能创建raw socket套接字\tif (sock-&gt;type == SOCK_RAW &amp;&amp; !kern &amp;&amp;\t    !ns_capable(net-&gt;user_ns, CAP_NET_RAW))\t\tgoto out_rcu_unlock;\t//将上述找到的answer-&gt;ops赋值给socket的ops\tsock-&gt;ops = answer-&gt;ops;\t//将上述找到的answer-&gt;ops赋值给answer_prot，下面创建sock结构的时候会用到\tanswer_prot = answer-&gt;prot;\tanswer_flags = answer-&gt;flags;\trcu_read_unlock();\tWARN_ON(!answer_prot-&gt;slab);\terr = -ENOMEM;\t//注意： 这里申请一个sock结构，这个sock结构可以理解为传输层协议和socket之间的一个中间层\t//对上提供socket层的结构，\t//对下与具体的协议相关\t//kern 标识这个套接字是否是内核创建的\tsk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot, kern);\tif (!sk)\t\tgoto out;\terr = 0;\t//标识端口是否可以重用 这里raw 和icmp是设置了INET_PROTOSW_REUSE 这个标志位。\tif (INET_PROTOSW_REUSE &amp; answer_flags)\t\tsk-&gt;sk_reuse = SK_CAN_REUSE;\tinet = inet_sk(sk);\t//是否是一个面向连接套接字，对于TCP是有这个标志位的\tinet_assign_bit(IS_ICSK, sk, INET_PROTOSW_ICSK &amp; answer_flags);\tinet_clear_bit(NODEFRAG, sk);\t//如果是rawsocket就指定了端口号？\tif (SOCK_RAW == sock-&gt;type) &#123;\t\tinet-&gt;inet_num = protocol;\t\tif (IPPROTO_RAW == protocol)\t\t\tinet_set_bit(HDRINCL, sk);\t&#125;\t//根据系统参数决定是否开启mtu探测\tif (READ_ONCE(net-&gt;ipv4.sysctl_ip_no_pmtu_disc))\t\tinet-&gt;pmtudisc = IP_PMTUDISC_DONT;\telse\t\tinet-&gt;pmtudisc = IP_PMTUDISC_WANT;\t\t//设置ip_id字段\tatomic_set(&amp;inet-&gt;inet_id, 0);\t//这里初始化了上面申请的sock结构体的各个字段\tsock_init_data(sock, sk);\tsk-&gt;sk_destruct\t   = inet_sock_destruct;\t//这里记录了用户指定的协议\tsk-&gt;sk_protocol\t   = protocol;\tsk-&gt;sk_backlog_rcv = sk-&gt;sk_prot-&gt;backlog_rcv;\tsk-&gt;sk_txrehash = READ_ONCE(net-&gt;core.sysctl_txrehash);\t//初始化inet_sock的一些字段 单播/多播ttl，tos，管理多播的mc_list\tinet-&gt;uc_ttl\t= -1;   \tinet_set_bit(MC_LOOP, sk);\tinet-&gt;mc_ttl\t= 1;\tinet_set_bit(MC_ALL, sk);\tinet-&gt;mc_index\t= 0;\tinet-&gt;mc_list\t= NULL;\tinet-&gt;rcv_tos\t= 0;\t//tcp或者udp 应该不会走这个逻辑，因为还没有调用bind，inet_num此时应该为0\tif (inet-&gt;inet_num) &#123;\t\tinet-&gt;inet_sport = htons(inet-&gt;inet_num);\t\t/* Add to protocol hash chains. */\t\terr = sk-&gt;sk_prot-&gt;hash(sk);\t\tif (err) &#123;\t\t\tsk_common_release(sk);\t\t\tgoto out;\t\t&#125;\t&#125;\t//这里是特定协议的初始化逻辑\tif (sk-&gt;sk_prot-&gt;init) &#123;\t\terr = sk-&gt;sk_prot-&gt;init(sk);\t\tif (err) &#123;\t\t\tsk_common_release(sk);\t\t\tgoto out;\t\t&#125;\t&#125;\tif (!kern) &#123;\t\terr = BPF_CGROUP_RUN_PROG_INET_SOCK(sk);\t\tif (err) &#123;\t\t\tsk_common_release(sk);\t\t\tgoto out;\t\t&#125;\t&#125;out:\treturn err;out_rcu_unlock:\trcu_read_unlock();\tgoto out;&#125;\n\n上述代码首先根据用户指定的type和protocol类型从inewsw[]中找到匹配的socket和sock的ops，注意这里inewsw[]是一个数组，数组中的每个元素又是一个链表，其实可以理解成一个hash表，hash表的key是type，而protocol是用来寻找某个桶中的的具体的一个元素。上述的inet_sw数组中的元素是由inetsw_array[]中填充进来的，填充的过程在inet_init()函数中实现。inetsw_array[]数组的定义和填充inetsw[]的代码如下：\n//这个数组的作用就是把数组中的元素注册到inet_sw[]中static struct inet_protosw inetsw_array[] =&#123;\t&#123;\t\t.type =       SOCK_STREAM,\t\t.protocol =   IPPROTO_TCP,\t\t.prot =       &amp;tcp_prot,\t\t.ops =        &amp;inet_stream_ops,\t\t.flags =      INET_PROTOSW_PERMANENT |\t\t\t      INET_PROTOSW_ICSK,\t&#125;,\t&#123;\t\t.type =       SOCK_DGRAM,\t\t.protocol =   IPPROTO_UDP,\t\t.prot =       &amp;udp_prot,\t\t.ops =        &amp;inet_dgram_ops,\t\t.flags =      INET_PROTOSW_PERMANENT,       &#125;,       &#123;\t\t.type =       SOCK_DGRAM,\t\t.protocol =   IPPROTO_ICMP,\t\t.prot =       &amp;ping_prot,\t\t.ops =        &amp;inet_sockraw_ops,\t\t.flags =      INET_PROTOSW_REUSE,       &#125;,       &#123;\t       .type =       SOCK_RAW,\t       .protocol =   IPPROTO_IP,\t/* wild card */\t       .prot =       &amp;raw_prot,\t       .ops =        &amp;inet_sockraw_ops,\t       .flags =      INET_PROTOSW_REUSE,       &#125;&#125;;\n\n上述代码为inetsw_array[]数组，其中prot为socket的ops，用户态不同的系统调用会调用到socket的不同ops上。prot则为具体协议的ops。也就是说ops是socket关联的回调函数，prot为sock关联的回调函数，两者其实是密切相关的，可以理解为ops是用户与内核的一个桥梁或者中间层，而prot则是具体的实现。\n注册inetsw_array到inet_sw[]数组中的代码在inet_init()中，代码如下：\n//遍历inetsw_array数组中的元素后调用inet_register_protosw函数将元素插入到inetsw[]中\tfor (q = inetsw_array; q &lt; &amp;inetsw_array[INETSW_ARRAY_LEN]; ++q)\t\tinet_register_protosw(q);void inet_register_protosw(struct inet_protosw *p)&#123;\tstruct list_head *lh;\tstruct inet_protosw *answer;\tint protocol = p-&gt;protocol;\tstruct list_head *last_perm;\tspin_lock_bh(&amp;inetsw_lock);\t//合法性检查\tif (p-&gt;type &gt;= SOCK_MAX)\t\tgoto out_illegal;\t//last_perm保存的是一个socket-&gt;type中最后一个永久协议的位置\tlast_perm = &amp;inetsw[p-&gt;type];\tlist_for_each(lh, &amp;inetsw[p-&gt;type]) &#123;\t\tanswer = list_entry(lh, struct inet_protosw, list);\t\t/* Check only the non-wild match. */\t\t//不是永久协议的情况（TCP/UDP为永久协议）\t\tif ((INET_PROTOSW_PERMANENT &amp; answer-&gt;flags) == 0)\t\t\tbreak;\t\t//和永久协议的protocol一样\t\tif (protocol == answer-&gt;protocol)\t\t\tgoto out_permanent;\t\t//走到这里给永久协议赋值\t\tlast_perm = lh;\t&#125;\t//将新的协议注册到协议之后。\tlist_add_rcu(&amp;p-&gt;list, last_perm);out:\tspin_unlock_bh(&amp;inetsw_lock);\treturn;out_permanent:\tpr_err(&quot;Attempt to override permanent protocol %d\\n&quot;, protocol);\tgoto out;out_illegal:\tpr_err(&quot;Ignoring attempt to register invalid socket type %d\\n&quot;,\t       p-&gt;type);\tgoto out;&#125;\n","categories":["网络协议栈源码学习"],"tags":["socket"]},{"title":"socket I/O","url":"/2025/06/03/%E5%A5%97%E6%8E%A5%E5%AD%97IO/","content":"socket I&#x2F;O输出系统调用send、sendto 和 sendmsg 都是用于发送数据的系统调用，面向连接的协议通常使用send(例如tcp或者已经connect的udp)，而无连接的协议通常使用send_to而sendmsg支持发送时设置多个缓存区，也就是说一次调用可以发送多个数据包。\nsend系统调用用户态调用send的函数原型\n#include &lt;sys/socket.h&gt;ssize_t send(int sockfd, const void *buf, size_t len, int flags);\n上述参数解释如下：\n\n\n\n参数名\n类型\n描述\n注意事项\n\n\n\nsockfd\nint\n已连接的 socket 文件描述符\n必须是通过 connect() 建立连接的 TCP socket 或已连接的 UDP socket\n\n\nbuf\nconst void *\n待发送数据的缓冲区地址\n用户态指针，指向要发送的数据（如字符串、二进制数据等）\n\n\nlen\nsize_t\n要发送的数据长度（字节数）\n实际发送的数据量可能小于此值（需检查返回值）\n\n\nflags\nint\n控制发送行为的标志位\n多个标志可通过按位或 | 组合（如 MSG_DONTWAIT | MSG_NOSIGNAL）\n\n\nsend系统调用内核实现\nSYSCALL_DEFINE4(send, int, fd, void __user *, buff, size_t, len,\t\tunsigned int, flags)&#123;\treturn __sys_sendto(fd, buff, len, flags, NULL, 0);&#125;\n__sys_sendto实现如下所示：\nint __sys_sendto(int fd, void __user *buff, size_t len, unsigned int flags,\t\t struct sockaddr __user *addr,  int addr_len)&#123;\tstruct socket *sock;\tstruct sockaddr_storage address;//这个叫通用地址容器，目的就是兼容用户态传进来的不同结构，例如sock_addrin或者ll\tint err;\tstruct msghdr msg;\tstruct iovec iov;\tint fput_needed;\t//这里吧用户态的地址和长度记录到msg.msg_iter这个结构体中，后续内核会操作这个结构体，ITER_SOURCE 表示写\terr = import_single_range(ITER_SOURCE, buff, len, &amp;iov, &amp;msg.msg_iter);\tif (unlikely(err))\t\treturn err;\t//根据fd找到socekt结构体 从fdt中找到file从file的私有字段找到socket\tsock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);\tif (!sock)\t\tgoto out;\t//设置msg的其他字段\tmsg.msg_name = NULL;\tmsg.msg_control = NULL;\tmsg.msg_controllen = 0;\tmsg.msg_namelen = 0;\tmsg.msg_ubuf = NULL;\t//用户调用sendto时才走这个分支，因为addr不为空\tif (addr) &#123;\t\terr = move_addr_to_kernel(addr, addr_len, &amp;address);\t\tif (err &lt; 0)\t\t\tgoto out_put;\t\tmsg.msg_name = (struct sockaddr *)&amp;address;\t\tmsg.msg_namelen = addr_len;\t&#125;\tflags &amp;= ~MSG_INTERNAL_SENDMSG_FLAGS;\t//如果需要设置非阻塞\tif (sock-&gt;file-&gt;f_flags &amp; O_NONBLOCK)\t\tflags |= MSG_DONTWAIT;\tmsg.msg_flags = flags;\t//调用对应socekt的发函数\terr = __sock_sendmsg(sock, &amp;msg);out_put:\tfput_light(sock-&gt;file, fput_needed);out:\treturn err;&#125;\n\n\n上述代码主要工作就是申请了一个msg变量，并把用户态传进来的数据的地址和长度记录到msg变量的迭代器msg_iter中，并根据fd找到对应的socket套接字，然后调用__sock_sendmsg发送数据。import_single_range里面调用到iov_iter_ubuf来填充迭代器这个结构，填充这个结构的目的就是内核接下来会操作这个结构进行数据的拷贝。\nstatic inline void iov_iter_ubuf(struct iov_iter *i, unsigned int direction,\t\t\tvoid __user *buf, size_t count)&#123;\tWARN_ON(direction &amp; ~(READ | WRITE));\t*i = (struct iov_iter) &#123;\t\t.iter_type = ITER_UBUF, //标记为用户缓冲区类型\t\t.copy_mc = false,\t\t.user_backed = true, //标记为来自用户空间\t\t.data_source = direction,  //记录数据流向\t\t.ubuf = buf, //用户缓冲区指针\t\t.count = count, //数据长度\t\t.nr_segs = 1  //单段缓冲区，非聚合分散\t&#125;;&#125;\n\n__sock_sendmsg中的逻辑就是调用socket的ops函数，对于AF_INE类型的socket调用的send就是inet_sendmsg具体代码如下：\nstatic int __sock_sendmsg(struct socket *sock, struct msghdr *msg)&#123;\tint err = security_socket_sendmsg(sock, msg,\t\t\t\t\t  msg_data_left(msg));\treturn err ?: sock_sendmsg_nosec(sock, msg);&#125;//sock_sendmsg_nosec定义如下static inline int sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)&#123;\tint ret = INDIRECT_CALL_INET(READ_ONCE(sock-&gt;ops)-&gt;sendmsg, inet6_sendmsg,\t\t\t\t     inet_sendmsg, sock, msg,\t\t\t\t     msg_data_left(msg));\tBUG_ON(ret == -EIOCBQUEUED);\tif (trace_sock_send_length_enabled())\t\tcall_trace_sock_send_length(sock-&gt;sk, ret, 0);\treturn ret;&#125;\n在inet_sendmsg 中则会进一步调用socket所关联的sock结果的sendmsg，注意这里socket与sock的关联是在创建socket的时候根据协议和类型确定的，对于tcp调用的是tcp_sendmsg对于udp调用的是udp_sendmsg。\nsendto系统调用实现可以看到sendto系统调用与上面的send系统调用最终调用的都是__sys_sendto，区别就是sendto中的addr字段传入的不为空，在__sys_sendto会有由move_addr_to_kernel处理。\nSYSCALL_DEFINE6(sendto, int, fd, void __user *, buff, size_t, len,\t\tunsigned int, flags, struct sockaddr __user *, addr,\t\tint, addr_len)&#123;\treturn __sys_sendto(fd, buff, len, flags, addr, addr_len);&#125;\n\n//传入了用户态的地址空间，和地址长度int move_addr_to_kernel(void __user *uaddr, int ulen, struct sockaddr_storage *kaddr)&#123;\tif (ulen &lt; 0 || ulen &gt; sizeof(struct sockaddr_storage))\t\treturn -EINVAL;\tif (ulen == 0)\t\treturn 0;\t//将用户态的结构体copy到内核，这里的kaddr可以兼容所有的sockaddr的结构体128字节\tif (copy_from_user(kaddr, uaddr, ulen))\t\treturn -EFAULT;\t//安全相关\treturn audit_sockaddr(ulen, kaddr);&#125;\n\nsendmsg系统调用实现sendmsg送复杂网络消息​​的系统调用，支持多块数据（iovec）、目标地址、控制信息（如 cmsg）等高级功能，对应内核部分代码如下：\nSYSCALL_DEFINE3(sendmsg, int, fd, struct user_msghdr __user *, msg, unsigned int, flags)&#123;\treturn __sys_sendmsg(fd, msg, flags, true);&#125;long __sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned int flags,\t\t   bool forbid_cmsg_compat)&#123;\tint fput_needed, err;\tstruct msghdr msg_sys;\tstruct socket *sock;\tif (forbid_cmsg_compat &amp;&amp; (flags &amp; MSG_CMSG_COMPAT))\t\treturn -EINVAL;\t//根据fd查找对应的socket\tsock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);\tif (!sock)\t\tgoto out;\t//传入用户指定的msg和内核的msg\terr = ___sys_sendmsg(sock, msg, &amp;msg_sys, flags, NULL, 0);\tfput_light(sock-&gt;file, fput_needed);out:\treturn err;&#125;\n与sendto和send不同，sendmsg首先查找对应的socket，然后创建内核msg结构和传入用户的设置的msg结构，调用___sys_sendmsg发送：___sys_sendmsg函数中，主要就是把用户指定的msg信息，存到内核创建的msg_sys中\nstatic int ___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg,\t\t\t struct msghdr *msg_sys, unsigned int flags,\t\t\t struct used_address *used_address,\t\t\t unsigned int allowed_msghdr_flags)&#123;\tstruct sockaddr_storage address;\tstruct iovec iovstack[UIO_FASTIOV], *iov = iovstack;\tssize_t err;\tmsg_sys-&gt;msg_name = &amp;address;\t//将用户态的msg拷贝到内核态msg\terr = sendmsg_copy_msghdr(msg_sys, msg, flags, &amp;iov);\tif (err &lt; 0)\t\treturn err;\t//调用协议栈发送\terr = ____sys_sendmsg(sock, msg_sys, flags, used_address,\t\t\t\tallowed_msghdr_flags);\tkfree(iov);\treturn err;&#125;\n上述____sys_sendmsg中的逻辑为将用户设置的控制信息并保存到内核msg中，\nstatic int ____sys_sendmsg(struct socket *sock, struct msghdr *msg_sys,\t\t\t   unsigned int flags, struct used_address *used_address,\t\t\t   unsigned int allowed_msghdr_flags)&#123;\tunsigned char ctl[sizeof(struct cmsghdr) + 20]\t\t\t\t__aligned(sizeof(__kernel_size_t));\t/* 20 is size of ipv6_pktinfo */\tunsigned char *ctl_buf = ctl;\tint ctl_len;\tssize_t err;\terr = -ENOBUFS;\t//msg_controllen为用户msghdr控制字段的总长度\tif (msg_sys-&gt;msg_controllen &gt; INT_MAX)\t\tgoto out;\tflags |= (msg_sys-&gt;msg_flags &amp; allowed_msghdr_flags);\tctl_len = msg_sys-&gt;msg_controllen;\t//32位系统的处理逻辑\tif ((MSG_CMSG_COMPAT &amp; flags) &amp;&amp; ctl_len) &#123;\t\terr =\t\t    cmsghdr_from_user_compat_to_kern(msg_sys, sock-&gt;sk, ctl,\t\t\t\t\t\t     sizeof(ctl));\t\tif (err)\t\t\tgoto out;\t\tctl_buf = msg_sys-&gt;msg_control;\t\tctl_len = msg_sys-&gt;msg_controllen;\t&#125; else if (ctl_len) &#123;\t//64位的处理逻辑\t\tBUILD_BUG_ON(sizeof(struct cmsghdr) !=\t\t\t     CMSG_ALIGN(sizeof(struct cmsghdr)));\t\tif (ctl_len &gt; sizeof(ctl)) &#123;\t\t\tctl_buf = sock_kmalloc(sock-&gt;sk, ctl_len, GFP_KERNEL);\t\t\tif (ctl_buf == NULL)\t\t\t\tgoto out;\t\t&#125;\t\terr = -EFAULT;\t\t//这里的msg_control_user是用户态的指针所以用copy_from_user\t\tif (copy_from_user(ctl_buf, msg_sys-&gt;msg_control_user, ctl_len))\t\t\tgoto out_freectl;\t\tmsg_sys-&gt;msg_control = ctl_buf;\t\tmsg_sys-&gt;msg_control_is_user = false;\t&#125;\tflags &amp;= ~MSG_INTERNAL_SENDMSG_FLAGS;\tmsg_sys-&gt;msg_flags = flags;\t//设置非阻塞\tif (sock-&gt;file-&gt;f_flags &amp; O_NONBLOCK)\t\tmsg_sys-&gt;msg_flags |= MSG_DONTWAIT;\t/*\t * If this is sendmmsg() and current destination address is same as\t * previously succeeded address, omit asking LSM&#x27;s decision.\t * used_address-&gt;name_len is initialized to UINT_MAX so that the first\t * destination address never matches.\t */\tif (used_address &amp;&amp; msg_sys-&gt;msg_name &amp;&amp;\t    used_address-&gt;name_len == msg_sys-&gt;msg_namelen &amp;&amp;\t    !memcmp(&amp;used_address-&gt;name, msg_sys-&gt;msg_name,\t\t    used_address-&gt;name_len)) &#123;\t\terr = sock_sendmsg_nosec(sock, msg_sys);\t\tgoto out_freectl;\t&#125;\terr = __sock_sendmsg(sock, msg_sys);\t/*\t * If this is sendmmsg() and sending to current destination address was\t * successful, remember it.\t */\tif (used_address &amp;&amp; err &gt;= 0) &#123;\t\tused_address-&gt;name_len = msg_sys-&gt;msg_namelen;\t\tif (msg_sys-&gt;msg_name)\t\t\tmemcpy(&amp;used_address-&gt;name, msg_sys-&gt;msg_name,\t\t\t       used_address-&gt;name_len);\t&#125;out_freectl:\tif (ctl_buf != ctl)\t\tsock_kfree_s(sock-&gt;sk, ctl_buf, ctl_len);out:\treturn err;&#125;\n\n接收系统调用recv,recvfrom,recvmsg三个接收系统调用与发送系统调用类似，不同的地方就是数据流向是相反的。\n\n\n\n系统调用\n适用场景\n关键功能\n典型用途\n\n\n\nrecv\n已连接的套接字（如 TCP）\n- 从已建立连接的套接字接收数据- 不支持获取发送方地址\nTCP 数据接收\n\n\nrecvfrom\n无连接套接字（如 UDP）\n- 接收数据包- 可获取发送方地址（struct sockaddr）\nUDP 数据接收\n\n\nrecvmsg\n所有套接字（最通用）\n- 支持多缓冲区（struct iovec）- 支持控制信息（cmsg）- 可获取发送方地址\n高级场景：- 文件描述符传递- 接收 TTL&#x2F;接口信息\n\n\nrecv系统调用实现SYSCALL_DEFINE4(recv, int, fd, void __user *, ubuf, size_t, size,\t\tunsigned int, flags)&#123;\treturn __sys_recvfrom(fd, ubuf, size, flags, NULL, NULL);&#125;\nint __sys_recvfrom(int fd, void __user *ubuf, size_t size, unsigned int flags,\t\t   struct sockaddr __user *addr, int __user *addr_len)&#123;\tstruct sockaddr_storage address;\tstruct msghdr msg = &#123;\t\t/* Save some cycles and don&#x27;t copy the address if not needed */\t\t.msg_name = addr ? (struct sockaddr *)&amp;address : NULL,\t&#125;;\tstruct socket *sock;\tstruct iovec iov;\tint err, err2;\tint fput_needed;\t//将用户态指向的缓冲区地址，存到msg中\terr = import_single_range(ITER_DEST, ubuf, size, &amp;iov, &amp;msg.msg_iter);\tif (unlikely(err))\t\treturn err;\t//查找对应的socket\tsock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);\tif (!sock)\t\tgoto out;\tif (sock-&gt;file-&gt;f_flags &amp; O_NONBLOCK)\t\tflags |= MSG_DONTWAIT;\t//调用套接字的ops收包\terr = sock_recvmsg(sock, &amp;msg, flags);\t//recv系统调用传入的addr为空,如果不为空，会记录源数据包的源ip地址\tif (err &gt;= 0 &amp;&amp; addr != NULL) &#123;\t\terr2 = move_addr_to_user(&amp;address,\t\t\t\t\t msg.msg_namelen, addr, addr_len);\t\tif (err2 &lt; 0)\t\t\terr = err2;\t&#125;\tfput_light(sock-&gt;file, fput_needed);out:\treturn err;&#125;\nrecvfrom系统调用实现可获取发送方的 ​​IP 地址和端口​​，适用于 UDP 等无连接协议（每个数据包可能来自不同发送方）\nSYSCALL_DEFINE6(recvfrom, int, fd, void __user *, ubuf, size_t, size,\t\tunsigned int, flags, struct sockaddr __user *, addr,\t\tint __user *, addr_len)&#123;\treturn __sys_recvfrom(fd, ubuf, size, flags, addr, addr_len);&#125;\n与recv一样最终都调用到了__sys_recvfrom，不同的地方在于传入的add不为空，用户可以拿到数据包的源ip地址\nrecvmsg系统调用实现SYSCALL_DEFINE3(recvmsg, int, fd, struct user_msghdr __user *, msg,\t\tunsigned int, flags)&#123;\treturn __sys_recvmsg(fd, msg, flags, true);&#125;\n\n上述__sys_recvmsg与发送系统调用sendmsg类似，主要工作就是将数据包拷贝拷贝到用户的指定的缓冲区，以及数据包的源ip地址，和数据包的控制信息。\nstatic int ____sys_recvmsg(struct socket *sock, struct msghdr *msg_sys,\t\t\t   struct user_msghdr __user *msg,\t\t\t   struct sockaddr __user *uaddr,\t\t\t   unsigned int flags, int nosec)&#123;\tstruct compat_msghdr __user *msg_compat =\t\t\t\t\t(struct compat_msghdr __user *) msg;\tint __user *uaddr_len = COMPAT_NAMELEN(msg);\tstruct sockaddr_storage addr;\tunsigned long cmsg_ptr;\tint len;\tssize_t err;\tmsg_sys-&gt;msg_name = &amp;addr;\tcmsg_ptr = (unsigned long)msg_sys-&gt;msg_control;\tmsg_sys-&gt;msg_flags = flags &amp; (MSG_CMSG_CLOEXEC|MSG_CMSG_COMPAT);\t/* We assume all kernel code knows the size of sockaddr_storage */\tmsg_sys-&gt;msg_namelen = 0;\tif (sock-&gt;file-&gt;f_flags &amp; O_NONBLOCK)\t\tflags |= MSG_DONTWAIT;\tif (unlikely(nosec))\t\terr = sock_recvmsg_nosec(sock, msg_sys, flags);\telse\t//收包逻辑，调用收包函数\t\terr = sock_recvmsg(sock, msg_sys, flags);\tif (err &lt; 0)\t\tgoto out;\t//这里是接收数据包的长度\tlen = err;\t//拷贝源ip地址到用户态的uaddr(把下面的addr拷贝到了uaddr)\tif (uaddr != NULL) &#123;\t\terr = move_addr_to_user(&amp;addr,\t\t\t\t\tmsg_sys-&gt;msg_namelen, uaddr,\t\t\t\t\tuaddr_len);\t\tif (err &lt; 0)\t\t\tgoto out;\t&#125;\t//更新用户态的标志位，比如消息截断等标志（收一部分）\terr = __put_user((msg_sys-&gt;msg_flags &amp; ~MSG_CMSG_COMPAT),\t\t\t COMPAT_FLAGS(msg));\tif (err)\t\tgoto out;\tif (MSG_CMSG_COMPAT &amp; flags)\t\terr = __put_user((unsigned long)msg_sys-&gt;msg_control - cmsg_ptr,\t\t\t\t &amp;msg_compat-&gt;msg_controllen);\telse\t\terr = __put_user((unsigned long)msg_sys-&gt;msg_control - cmsg_ptr,\t\t\t\t &amp;msg-&gt;msg_controllen);\tif (err)\t\tgoto out;\terr = len;out:\treturn err;&#125;","categories":["网络协议栈源码学习"],"tags":["socket"]},{"title":"处理器体系结构","url":"/2025/06/05/%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89/","content":"处理器体系结构一个处理器支持的指令和指令的字节级编码称为它的指令集体系结构(Instruction-Set Architecture, ISA) \n本章将简要介绍处理器硬件的设计，学习一个硬件系统执行某种 ISA指令的方式，以更好地理解计算机是如何工作的。\n本章首先定义一个简单的指令集，作为处理器实现的运行示例。因为受 x86-64 指令集的启发，它被俗称为 “x86”, 所以我们称我们的指令集为 “Y86-64” 指令集。 与 x86-64 相比， Y86-64 指令集的数据类型、指令和寻址方式都要少一些。它的字节级编码也比较简单，虽然 Y86-64 指令集很简单，它仍然足够完整，能让我们写一些处理整数的程序。\nY86-64 的寄存器\n寄存器：Y86-64 有 15 个通用寄存器（与 x86-64 类似），如 %rax、%rsp、%rbp 等，每个存储 64 位数据。%rsp 主要用作栈指针。\n\n条件码：ZF、SF、OF 用于保存最近计算的结果信息。\n\n程序计数器（PC）：存储当前将要执行的指令地址。\n\n\nY86-64 指令\ny86-64 的 movq 指令分成了 4 个不同的指令：irmovq、rrmovq、mrmovq 和 rmmovq，分别显示地指明源和目的的格式。源可以是立即数（i）、寄存器（r）或内存（m）。指令名字的第一个字母就表明了源的类型，目前可以是寄存器（r）或内存（m）。指令名字的第二个字母指明了目的的类型。它决定如何实现数据传送时，显式地指明数据传送的路径。\n有 4 个整数操作指令，如图它们是 addq、subq、andq 和 xorq。它们只对寄存器数据进行操作，而 Y86-64 还允许对内存数据进行这些操作。这些指令会设置 3 个条件码 ZF、SF 和 OF（零、符号和溢出）。\n7 个跳转指令是 jmp、jle、jl、je、jne、jge 和 jg。根据分支指令的类型和条件代码的设置来选择分支。分支条件和 x86-64 的一样）。\n有 6 个条件传送指令：cmovle、cmovl、cmove、cmovne、cmovge 和 cmovg。这些指令的格式与寄存器-寄存器传送指令 rrmovq 一样，但是只有当条件码满足所需的要求时，才会更新目的寄存器的值。\ncall 指令将返回地址入栈，然后跳到目的地址。ret 指令从栈中调用出返回。\npushq 和 popq 指令实现了入栈和出栈，和 x86-64 中一样。\nY86-64 只有一条与主机操作相关的指令 halt。x86-64 的应用程序不允许使用这条指令，因为它会导致整个系统停止运行。对于 Y86-64 来说，执行 halt 指令会导致处理器终止，并将状态设置为 HLT。\n\n指令和对应的编码如下所示：\n\n\n\n指令\n字节 0\n字节 1\n字节 2\n字节 3\n字节 4\n字节 5\n字节 6\n字节 7\n字节 8\n字节 9\n\n\n\nhalt\n00\n\n\n\n\n\n\n\n\n\n\n\nnop\n10\n\n\n\n\n\n\n\n\n\n\n\nrrmovq rA, rB\n20\nrA rB\n\n\n\n\n\n\n\n\n\n\nirmovq V, rB\n30\nF rB\nV\nV\nV\nV\nV\nV\nV\nV\n\n\nrmmovq rA, D(rB)\n40\nrA rB\nD\nD\nD\nD\nD\nD\nD\nD\n\n\nmrmovq D(rB), rA\n50\nrA rB\nD\nD\nD\nD\nD\nD\nD\nD\n\n\nOPq rA, rB\n6 fn\nrA rB\n\n\n\n\n\n\n\n\n\n\njXX Dest\n7 fn\nDest\nDest\nDest\nDest\nDest\nDest\nDest\nDest\nDest\n\n\ncmovXX rA, rB\n2 fn\nrA rB\n\n\n\n\n\n\n\n\n\n\ncall Dest\n80\nDest\nDest\nDest\nDest\nDest\nDest\nDest\nDest\nDest\n\n\nret\n90\n\n\n\n\n\n\n\n\n\n\n\npushq rA\nA0\nrA F\n\n\n\n\n\n\n\n\n\n\npopq rA\nB0\nrA F\n\n\n\n\n\n\n\n\n\n\n说明：\n\nrA, rB 表示寄存器编号（各4位）。\nF 表示无效寄存器编号。\nfn 表示功能码&#x2F;条件码。\nV 表示立即数（8字节）。\nD 表示位移（8字节）。\nDest 表示目标地址（8字节）。\n\n有的指令只有一个字节长，而有的需要操作数的指令编码就更长一些。\nRISC 和 CISC 指令集\n\n\n特性\nCISC\n早期的 RISC\n\n\n\n指令数量\n指令数量很多。Intel 描述全套指令的文档有 1200 多页。\n指令数量少得多，通常少于 100 个。\n\n\n延迟执行的指令\n有些指令的延迟很长，如从内存复制块、复杂地址传递等。\n没有较长延迟的指令，有些早期 RISC 甚至没有整数乘除法指令，需用其他方式实现。\n\n\n指令长度\n编码是可变长度的，x86-64 的指令长度可以是 1~15 字节。**\n编码是固定长度的，通常所有指令都是 4 字节。\n\n\n地址操作方式\n地址操作方式丰富，支持多种寻址模式，如偏移+基址+变址寄存器+缩放因子组合。\n简单寻址方式，通常只有基址加偏移寻址。\n\n\n内存和寄存器操作\n支持对内存和寄存器数据进行算术和逻辑运算。\n通常只能对寄存器数据进行算术和逻辑运算。与内存交互需使用 load&#x2F;store 指令，属于 load&#x2F;store 架构。\n\n\n程序级细节可见性\n对机器级程序来说实现细节不可见，ISA 抽象了程序之间执行顺序的细节。\n机器级程序实现细节可见，有些 RISC 禁止特定指令序列，必须满足约束条件后才可执行。\n\n\n条件码\n有条件码作为副产品（如 ZF、SF、OF），用于条件分支检测。\n没有条件码，需要通过测试指令将结果放入普通寄存器，再基于此判断。\n\n\n过程链接\n使用栈传参和返回地址，栈被用来存储过程参数和返回地址。\n使用大量寄存器进行参数传递与返回，避免对内存引用。通常有 32 个以上寄存器。\n\n\nRISC 和 CISC 和核心区别如下:设计理念不同：\n\nRISC 追求“简单指令 + 快速流水线”\nCISC 追求“复杂指令 + 高表达能力 + 更节省代码空间”\n\n指令执行粒度不同：\n\nRISC 一条指令只做一件事（例如：加法只能寄存器之间）\nCISC 一条指令可以做多件事（例如：内存中的数+寄存器的数→再写回内存）\n\n是否 Load&#x2F;Store 架构：\n\nRISC：运算只能在寄存器之间，访问内存要用专门的 load/store\nCISC：可以直接对内存进行加减乘除等操作（如 add [eax], ebx）\n\n举个例子对比：\nRISC 指令：\nLDR r0, [r1]LDR r2, [r3]ADD r4, r0, r2STR r4, [r5]\n\n需要 4 条指令把内存中两个值相加后写回。\n\nCISC 指令（x86）：\nADD [eax], ebx\n\n一条指令就可以把内存中一个值和寄存器相加，并写回内存。\n\n\n指令处理**在处理一条指令时，可以将其操作组织为一系列固定的处理阶段，**每个阶段执行特定功能，有助于形成统一的执行顺序，充分利用硬件资源。各阶段及其简要说明如下：\n取指\n使用 PC（程序计数器）作为地址，从内存中读取指令字节。\n提取出指令的：\n操作码（icode）\n功能码（ifun）\n目标寄存器编号（rA, rB，如果指令需要）\n立即数（valC，如果指令包含立即数）\n\n\n\n译码根据 rA、rB 字段，从寄存器堆中读取源操作数：\n\nvalA = R[rA]\nvalB = R[rB]\n\n上面的valA 和valB是ALU的两个输入\n执行执行算术&#x2F;逻辑操作：\n\n加法、减法、位移、比较……\n\n计算地址（如内存访问地址）：\n\nvalE = valB + valC（例如内存偏移地址）\n\n计算条件分支是否成立（对条件跳转指令）\n访存\n如果是读（如 mrmovq，popq）：\nvalM = Mem[valE]\n\n\n如果是写（如 rmmovq，pushq）：\nMem[valE] = valA\n\n\n\n写回将结果写入目标寄存器\n根据指令类型，将 valE 或 valM 写入 rA 或 rB：\n\n如：R[rB] = valE 或 R[rA] = valM\n\n更新 PC更新程序计数器 PC，为下一条指令准备\n举例：\naddq %rax, %rbx 的执行流程如下：\n\n\n\n阶段\n操作说明\n\n\n\n取指\n从 PC 位置取出 addq 指令\n\n\n译码\n读出 rax → valA，rbx → valB\n\n\n执行\nALU 执行 valE &#x3D; valA + valB\n\n\n访存\n无操作\n\n\n写回\n将结果 valE 写入 rbx（目的寄存器）\n\n\n更新 PC\nPC &#x3D; valP\n\n\nmrmovq 8(%rbp), %rax 的执行流程如下\n\n\n\n阶段\n动作说明\n\n\n\n取指（Fetch）\n从内存中读取当前指令的字节内容：包括 icode（为 mrmovq）、ifun、rB（即 rbp）、rA（即 rax）和立即数 valC = 8，并计算下一条指令地址 valP = PC + 指令长度。\n\n\n译码（Decode）\n从寄存器文件中读出： - valB = R[rbp]（基地址） - valA 不使用（但可能会读取）\n\n\n执行（Execute）\n用 ALU 计算内存地址： - valE = valB + valC = R[rbp] + 8\n\n\n访存（Memory）\n从内存地址 valE 读取 8 字节数据： - valM = Mem[valE]\n\n\n写回（Write Back）\n将 valM 写入目的寄存器： - R[rax] = valM\n\n\n更新 PC（PC Update）\nPC = valP，准备执行下一条指令。\n\n\n流水线流水线（Pipeline）**是一种**提高指令吞吐率（吞吐量）*的技术，核心思想就是将指令的执行过程划分成若干个阶段，让*多条指令同时在不同阶段执行，从而**并行化处理流程，类似工业生产线。\n常见的流水线阶段（以经典的五级流水线为例）：\n\n\n\n阶段缩写\n阶段名称\n英文全称\n功能说明\n\n\n\nIF\n取指阶段\nInstruction Fetch\n从内存中读取指令\n\n\nID\n译码阶段\nInstruction Decode\n分析指令含义，读取寄存器操作数\n\n\nEX\n执行阶段\nExecute\n运算、地址计算或条件判断\n\n\nMEM\n访存阶段\nMemory Access\n对数据内存进行读&#x2F;写操作（如load&#x2F;store）\n\n\nWB\n写回阶段\nWrite Back\n将计算结果写回寄存器\n\n\n假设我们有三条指令：I1、I2、I3，它们的流水线执行如下：\n\n\n\n周期\nI1\nI2\nI3\n\n\n\n1\nIF\n\n\n\n\n2\nID\nIF\n\n\n\n3\nEX\nID\nIF\n\n\n4\nMEM\nEX\nID\n\n\n5\nWB\nMEM\nEX\n\n\n6\n\nWB\nMEM\n\n\n7\n\n\nWB\n\n\n流水线的局限性不一致划分：\n流水线各阶段所需时间不同，导致不能统一设定短时钟周期的问题。\n举例：\n设想设计一个 5 阶段流水线，划分如下：\n\n\n\n阶段\n功能\n延迟（ps）\n\n\n\nIF\n取指\n80\n\n\nID\n译码\n60\n\n\nEX\n执行（ALU）\n180\n\n\nMEM\n访存\n100\n\n\nWB\n写回\n40\n\n\n\n由于 EX 最慢，占用了 180ps；\n所以整个流水线的最短时钟周期 &#x3D; 180ps（必须以最慢阶段为限）；\n然而其他阶段（例如 WB 只要 40ps）却浪费了大量时间 → 这就是“不一致划分”。\n\n流水线太长，性能反而下降：\n分支惩罚严重扩大（Branch Penalty ↑）分支预测失败时，需要清空整个流水线，流水线越深，浪费越多。\n\n比如：\n5级流水线：预测失败，丢掉5条指令\n20级流水线：预测失败，丢掉20条指令\n\n\n\n带反馈的流水线系统在流水线系统中，指令从头到尾的执行并不总是严格按照顺序完成\n虽然每条指令在流水线中依次经过取指、译码、执行等阶段，但由于依赖关系或跳转，某些指令会被暂停、重排或撤销，不一定严格顺序完成\n比如：\n\n分支指令：需要执行阶段判断是否跳转 → 才知道下一条指令取哪里\n数据依赖：当前指令需要前一条指令的计算结果 → 必须等它先完成\n\n举例：\n1: add r1, r2, r3     ; r1 = r2 + r32: sub r4, r1, r5     ; r4 = r1 - r5\n\n\n第二条指令 依赖第一条指令的执行结果 r1；\n如果你流水线太快地推进，就可能在 r1 还没写回时，sub 就读到了旧值或错值；\n所以需要一种 机制把 r1 的新值反馈给第二条指令 → 这就是数据前递的一种反馈。\n\n\n\n\n周期\n指令1（add）\n指令2（sub）\n问题说明\n\n\n\n1\nIF\n\n\n\n\n2\nID\nIF\n\n\n\n3\nEX\nID\n❗r1 尚未计算出来，sub 读不到新值\n\n\n4\nMEM\nEX\n❌ sub 用错值执行\n\n\n5\nWB\nMEM\n\n\n\n带反馈的方法：\n\n在 add 的 EX 阶段算出 r1 的值；\n直接从 EX 阶段前递到 sub 的 EX 阶段使用，绕过寄存器文件；\n不用等到 WB 阶段再写回 → 提前“反馈”给下条指令。\n\n\n\n\n周期\n指令1（add）\n指令2（sub）\n说明\n\n\n\n1\nIF\n\n\n\n\n2\nID\nIF\n\n\n\n3\nEX\nID\n\n\n\n4\nMEM\nEX (用前递)\n✅ 从 add 的 EX 阶段取值\n\n\n5\nWB\nMEM\n\n\n\n流水线冒险*当多条指令在流水线中*同时执行时，由于它们之间存在某些冲突或依赖关系**，导致流水线无法按原计划推进，甚至必须暂停、插入空周期或重新执行。\n\n\n\n类型\n全称\n说明\n\n\n\n1️⃣ 数据冒险（Data Hazard）\n指令之间有数据依赖\n后面的指令使用前面指令尚未计算出的结果\n\n\n2️⃣ 控制冒险（Control Hazard）\n与跳转&#x2F;分支指令相关\n分支结果未确定时，无法决定取哪条指令\n\n\n\n\n\n\n\n数据冒险：\nadd r1, r2, r3    ; r1 = r2 + r3sub r4, r1, r5    ; r4 = r1 - r5  ← 依赖上面 r1 的结果\n\n\n如果 sub 提前执行，会用到错误的 r1 → 数据冒险\n解决方法：数据前递（Forwarding）、暂停（Stall）（好像就是插入气泡）\n\n控制冒险（Control Hazard）asm复制编辑beq r1, r2, label  ; 如果相等则跳转add r3, r4, r5      ; 跳 or 不跳？影响下一条指令是否执行\n\n\n如果跳转条件尚未判断完成 → 无法确定下一条指令 → 控制冒险\n解决方法：分支预测、分支延迟槽、清空流水线\n\n","categories":["《深入理解计算机系统》"],"tags":["处理器体系结构"]},{"title":"网卡硬件各组件","url":"/2025/05/23/%E7%BD%91%E5%8D%A1%E7%A1%AC%E4%BB%B6%E6%A8%A1%E5%9D%97/","content":"网卡核心硬件组成现代有线以太网卡中，MAC、PHY、DMA、PCIe 是网卡最核心的硬件模块，这些模块构成了数据通信的基础框架。以下是它们的详细分工和协作关系，具体的架构图如下所示：\nPHYPHY 层属于 OSI 物理层（Layer 1），主要负责 数字信号 ↔ 模拟信号 的转换，具体包括：\n\n链路管理\n\n\n自动协商​​：与对端设备协商速率（如10&#x2F;100&#x2F;1000 Mbps）和双工模式。\n链路检测​​：监测连接状态（如网线是否插入）。\n\n\n信号转换​\n\n\n数模转换​​：将MAC层生成的数字信号转换为适合线缆（如双绞线、光纤）传输的模拟信号（如电信号或光信号）。\n模数转换​​：将接收到的模拟信号还原为数字信号供上层处理。\n\n\n物理介质适配​\n\n支持不同介质标准（如以太网的RJ-45接口、光纤接口），适应电压、阻抗等物理特性,例如：100BASE-TX（双绞线）、1000BASE-SX（光纤）等。\n\n编码与解码\n\n使用特定编码方案（如曼彻斯特编码、PAM4）以提高抗干扰能力，确保信号完整性。\nMAC\n发送数据时​​，计算 ​​CRC（循环冗余校验）​​，确保数据完整性。\n接收数据时​​：\n从 PHY 层接收原始比特流，解析成以太网帧。\n检查​目标MAC地址​​（仅接收发给本机、广播或组播的帧）。\n校验 ​​FCS​​，丢弃损坏的帧。\n\n\n流量控制：使用 ​​PAUSE 帧（IEEE 802.3x）​​ 通知对端设备暂停发送，防止缓冲区溢出。\n\nDMA数据直接传输，网卡通过DMA引擎直接读写主机内存\nRSSRSS 是一种由 网卡硬件实现 的多队列技术，主要用于 提升多核 CPU 的网络数据包处理性能。网卡硬件将流量分散到多个接收队列（RX Queues），每个队列绑定不同CPU核心。\nTSOTSO 是一种由 网卡硬件实现 的优化技术，旨在 将TCP数据包的分片（Segmentation）任务从CPU转移到网卡，从而大幅降低CPU负载并提升网络吞吐量。\nPCIe\n提供网卡与CPU&#x2F;内存的物理通道，决定最大带宽（如100G需PCIe 4.0 x8）。\n支持DMA、MSI-X中断，优化响应速度\n\n","categories":["其他"],"tags":["网卡"]}]