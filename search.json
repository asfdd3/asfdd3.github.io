[{"title":"内核socket套接字的创建","url":"/2025/05/21/%E5%86%85%E6%A0%B8socket%E5%88%9B%E5%BB%BA/","content":"内核socket创建用户程序执行syscall指令，系统会从用户态陷入内核态并根据传入的系统调用号（例如在x86架构下socket系统调用号为41）从系统调用表中找到对应的处理函数，socekt（）系统调用对应的处理函数如下所示：\nSYSCALL_DEFINE3(socket, int, family, int, type, int, protocol)&#123; return __sys_socket(family, type, protocol);&#125;\n\n上述宏SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol)经过一系列展开后其实就是系统调用表中系统调用号41对应的处理函数\n上述__sys_socket函数定义如下：\n1.sock_create（）int __sys_socket(int family, int type, int protocol)&#123; struct socket *sock; int flags; //根据传入的参数创建socket sock = __sys_socket_create(family, type,       update_socket_protocol(family, type, protocol)); if (IS_ERR(sock))  return PTR_ERR(sock); //不关心低4bit sock的type flags = type &amp; ~SOCK_TYPE_MASK; if (SOCK_NONBLOCK != O_NONBLOCK &amp;&amp; (flags &amp; SOCK_NONBLOCK))  //清位之后置位  flags = (flags &amp; ~SOCK_NONBLOCK) | O_NONBLOCK; //将socket映射一个文件描述符号 return sock_map_fd(sock, flags &amp; (O_CLOEXEC | O_NONBLOCK));&#125;\n\n该函数主要做了两个事情，创建socekt和映射描述符fd。\n上面创建socket函数__sys_socket_create定义如下：\n2.__sys_socket_create（）static struct socket *__sys_socket_create(int family, int type, int protocol)&#123; struct socket *sock; int retval; /* Check the SOCK_* constants for consistency.  */ BUILD_BUG_ON(SOCK_CLOEXEC != O_CLOEXEC); BUILD_BUG_ON((SOCK_MAX | SOCK_TYPE_MASK) != SOCK_TYPE_MASK); BUILD_BUG_ON(SOCK_CLOEXEC &amp; SOCK_TYPE_MASK); BUILD_BUG_ON(SOCK_NONBLOCK &amp; SOCK_TYPE_MASK); //用户参数合法性检查，是否有非法标志位 if ((type &amp; ~SOCK_TYPE_MASK) &amp; ~(SOCK_CLOEXEC | SOCK_NONBLOCK))  return ERR_PTR(-EINVAL); type &amp;= SOCK_TYPE_MASK; //创建套接字 retval = sock_create(family, type, protocol, &amp;sock); if (retval &lt; 0)  return ERR_PTR(retval); return sock;&#125;\n\n上述sock_create为实际创建socket的函数，它包裹了__sock_create()如下所示：\nint sock_create(int family, int type, int protocol, struct socket **res)&#123; return __sock_create(current-&gt;nsproxy-&gt;net_ns, family, type, protocol, res, 0);&#125;\n\n可以看到__sock_create多带了一个参数current-&gt;nsproxy-&gt;net_ns  这个current是一个宏，用于获取当前进程的task_struct指针\ncurrent宏定义如下:\nstatic __always_inline struct task_struct *get_current(void)&#123; //这个pcpu_hot中有一个字段就是current_task也就是task_struct //this_cpu_read_stable()就是读取per_cpu变量的一个宏 return this_cpu_read_stable(pcpu_hot.current_task);//从per-cpu变量中获取当前的task_sturct结构&#125;\n\n上述current宏其实等同于指向一个task_struct的指针，而__sock_create(current-&gt;nsproxy-&gt;net_ns, family, type, protocol, res, 0);中参数current-&gt;nsproxy-&gt;net_ns就是指向一个具体的网络命名空间，为什么要传入这个网络命令空间作为参数？举个例子，如果进程属于某个容器的网络命名空间，创建的套接字必须关联到该容器的网络栈，而非宿主机的默认命名空间， 比如在创建docker进程的时候，就会设置sproxy-&gt;net_ns所属的网络命令空间。最终的目的一定是为了流量隔离。\n接下来看一下真正创建socket的函数__sock_create\n3.__sock_create()int __sock_create(struct net *net, int family, int type, int protocol,\t\t\t struct socket **res, int kern)&#123;\tint err;\tstruct socket *sock;\tconst struct net_proto_family *pf;\t//合法性检查\tif (family &lt; 0 || family &gt;= NPROTO)\t\treturn -EAFNOSUPPORT;\tif (type &lt; 0 || type &gt;= SOCK_MAX)\t\treturn -EINVAL;\t//过时的 PF_INET + SOCK_PACKET 参数组合转换为现代支持的 PF_PACKET 协议族\tif (family == PF_INET &amp;&amp; type == SOCK_PACKET) &#123;\t\tpr_info_once(&quot;%s uses obsolete (PF_INET,SOCK_PACKET)\\n&quot;,\t\t\t     current-&gt;comm);\t\tfamily = PF_PACKET;\t&#125;\t//安全相关的钩子\terr = security_socket_create(family, type, protocol, kern);\tif (err)\t\treturn err;\t//分配并初始化一个套接字对应的 inode 和socket 结构\tsock = sock_alloc();\tif (!sock) &#123;\t\tnet_warn_ratelimited(&quot;socket: no more sockets\\n&quot;);\t\treturn -ENFILE;\t//这里的type也是用户创建socket的type\tsock-&gt;type = type;\trcu_read_lock();\t//从sock_register数组中找到一个元素pf，这个pf中有一个create()回调函数，\t//这个回调函数就是family类型(比如AF_INET)需要的create函数。\tpf = rcu_dereference(net_families[family]);\terr = -EAFNOSUPPORT;\tif (!pf)\t\tgoto out_release;\t//增加引用计数？有些family可能是以模块方式加载的？？？\tif (!try_module_get(pf-&gt;owner))\t\tgoto out_release;\t/* Now protected by module ref count */\trcu_read_unlock();\t//如果用户指定的family类型是AF_INIT,那这个函数就是调用的inet_create()\terr = pf-&gt;create(net, sock, protocol, kern);\tif (err &lt; 0)\t\tgoto out_module_put;\tif (!try_module_get(sock-&gt;ops-&gt;owner))\t\tgoto out_module_busy;\t//减引用计数\tmodule_put(pf-&gt;owner);\t//安全模块相关\terr = security_socket_post_create(sock, family, type, protocol, kern);\tif (err)\t\tgoto out_sock_release;\t*res = sock;\treturn 0;out_module_busy:\terr = -EAFNOSUPPORT;out_module_put:\tsock-&gt;ops = NULL;\tmodule_put(pf-&gt;owner);out_sock_release:\tsock_release(sock);\treturn err;out_release:\trcu_read_unlock();\tgoto out_sock_release;&#125;EXPORT_SYMBOL(__sock_create);\n\n\n上述代码中通过调用sock_alloc()分配了inode和socket结构体，并对inode结构体进行初始化，比如设置唯一的inode编号等，具体代码如下：\nstruct socket *sock_alloc(void)&#123;\tstruct inode *inode;\tstruct socket *sock;\t//调用socket文件系统的超级块的ops申请一个inode，注意：socket结构体也是在这里分配的\tinode = new_inode_pseudo(sock_mnt-&gt;mnt_sb);\tif (!inode)\t\treturn NULL;\t//通过container_of拿到socket结构体 \tsock = SOCKET_I(inode);\tinode-&gt;i_ino = get_next_ino();//分配唯一的inode编号\tinode-&gt;i_mode = S_IFSOCK | S_IRWXUGO; //文件类型\tinode-&gt;i_uid = current_fsuid();\tinode-&gt;i_gid = current_fsgid();\tinode-&gt;i_op = &amp;sockfs_inode_ops;//绑定ops\treturn sock;&#125;\n\n上述代码通过调用new_inode_pseudo()创建了inode和socket，socket的获取通过宏SOCKET_I（container_of）返回socket其中sock_mnt是一个vfsmount(可以理解为一个挂载点)结构mnt_sb为一个超级块，在sock_init()中被挂载，sock_init()在start_kernel中会最终被调用到。\npf = rcu_dereference(net_families[family]); 这一行作用是根据用户传入的不同的协议族（比如AF_INET）来选择具体的回调函数，然后会调用pf-&gt;create(net, sock, protocol, kern); 这个-&gt;create() 就取决于family的类型。对于AF_INET类型的family，就是调用inet_create()，注册的过程由sock_register()实现，该函数就是将不同的family类型，注册到一个数组中(这个数组叫net_families)。对应的函数如下：\nint sock_register(const struct net_proto_family *ops)&#123;\tint err;\tif (ops-&gt;family &gt;= NPROTO) &#123;\t\tpr_crit(&quot;protocol %d &gt;= NPROTO(%d)\\n&quot;, ops-&gt;family, NPROTO);\t\treturn -ENOBUFS;\t&#125;\tspin_lock(&amp;net_family_lock);\tif (rcu_dereference_protected(net_families[ops-&gt;family],\t\t\t\t      lockdep_is_held(&amp;net_family_lock)))\t\terr = -EEXIST;\telse &#123;\t\t//这里注册了不同family类型到net_families数组中！\t\trcu_assign_pointer(net_families[ops-&gt;family], ops);\t\terr = 0;\t&#125;\tspin_unlock(&amp;net_family_lock);\tpr_info(&quot;NET: Registered %s protocol family\\n&quot;, pf_family_names[ops-&gt;family]);\treturn err;&#125;\n\n对于AF_INET(ipv4)协议族，上述注册的函数为inet_create()，在inet_init()中被调用，同样inet_init()也是最终被start_kernel()调用到。\n也就是说err = pf-&gt;create(net, sock, protocol, kern);会根据协议族的类型调用不同的create函数，同时传入用户制定的类型(TYPE)和协议做为参数，下面默认使用ipv4协议族进行举例，待分析函数就是inet_create()函数实现如下所示：\n也就是说err = pf-&gt;create(net, sock, protocol, kern);会根据协议族的类型调用不同的create函数，同时传入用户制定的类型(TYPE)和协议做为参数，下面使用ipv4协议族进行举例，对应的函数就是inet_create()，该函数其实主要处理了三个逻辑：\n\n根据用户制定协议从inetsw找到socket和sock对应的ops\n创建sock结构，并进行一系列的初始化（例如绑定sock的ops，这里不同的协议对应不同的ops）\n调用sock的init函数，完成对具体协议的初始化inet_create函数定义如下：\n\nstatic int inet_create(struct net *net, struct socket *sock, int protocol,\t\t       int kern)&#123;\tstruct sock *sk;\tstruct inet_protosw *answer;\tstruct inet_sock *inet;\tstruct proto *answer_prot;\tunsigned char answer_flags;\tint try_loading_module = 0;\tint err;\t\t//参数合法性检查\tif (protocol &lt; 0 || protocol &gt;= IPPROTO_MAX)\t\treturn -EINVAL;\t//初始化socket的状态\tsock-&gt;state = SS_UNCONNECTED;\t/* Look for the requested type/protocol pair. */lookup_protocol:\terr = -ESOCKTNOSUPPORT;\trcu_read_lock();\t//遍历inetsw[sock-&gt;type]这个元素的链表，找到protocol相同的元素，\tlist_for_each_entry_rcu(answer, &amp;inetsw[sock-&gt;type], list) &#123;\t\terr = 0;\t\t/* Check the non-wild match. */\t\t//精确匹配，用户指定的protocol和链表中的某个元素相同。\t\tif (protocol == answer-&gt;protocol) &#123;\t\t\tif (protocol != IPPROTO_IP)\t\t\t\tbreak;\t\t&#125; else &#123;\t\t\t/* Check for the two wild cases. */\t\t\t//如果用户指定的proto是0那就走这个分支，\t\t\t//比如type是SOCK_STREAM，proto=0 那answer关联的就是TCP\t\t\tif (IPPROTO_IP == protocol) &#123;\t\t\t\tprotocol = answer-&gt;protocol;\t\t\t\tbreak;\t\t\t&#125;\t\t\tif (IPPROTO_IP == answer-&gt;protocol)\t\t\t\tbreak;\t\t&#125;\t\terr = -EPROTONOSUPPORT;\t&#125;\t//错误的处理\tif (unlikely(err)) &#123;\t\tif (try_loading_module &lt; 2) &#123;\t\t\trcu_read_unlock();\t\t\t/*\t\t\t * Be more specific, e.g. net-pf-2-proto-132-type-1\t\t\t * (net-pf-PF_INET-proto-IPPROTO_SCTP-type-SOCK_STREAM)\t\t\t */\t\t\tif (++try_loading_module == 1)\t\t\t\trequest_module(&quot;net-pf-%d-proto-%d-type-%d&quot;,\t\t\t\t\t       PF_INET, protocol, sock-&gt;type);\t\t\t/*\t\t\t * Fall back to generic, e.g. net-pf-2-proto-132\t\t\t * (net-pf-PF_INET-proto-IPPROTO_SCTP)\t\t\t */\t\t\telse\t\t\t\trequest_module(&quot;net-pf-%d-proto-%d&quot;,\t\t\t\t\t       PF_INET, protocol);\t\t\tgoto lookup_protocol;\t\t&#125; else\t\t\tgoto out_rcu_unlock;\t&#125;\terr = -EPERM;\t//用户有权限才能创建raw socket套接字\tif (sock-&gt;type == SOCK_RAW &amp;&amp; !kern &amp;&amp;\t    !ns_capable(net-&gt;user_ns, CAP_NET_RAW))\t\tgoto out_rcu_unlock;\t//将上述找到的answer-&gt;ops赋值给socket的ops\tsock-&gt;ops = answer-&gt;ops;\t//将上述找到的answer-&gt;ops赋值给answer_prot，下面创建sock结构的时候会用到\tanswer_prot = answer-&gt;prot;\tanswer_flags = answer-&gt;flags;\trcu_read_unlock();\tWARN_ON(!answer_prot-&gt;slab);\terr = -ENOMEM;\t//注意： 这里申请一个sock结构，这个sock结构可以理解为传输层协议和socket之间的一个中间层\t//对上提供socket层的结构，\t//对下与具体的协议相关\t//kern 标识这个套接字是否是内核创建的\tsk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot, kern);\tif (!sk)\t\tgoto out;\terr = 0;\t//标识端口是否可以重用 这里raw 和icmp是设置了INET_PROTOSW_REUSE 这个标志位。\tif (INET_PROTOSW_REUSE &amp; answer_flags)\t\tsk-&gt;sk_reuse = SK_CAN_REUSE;\tinet = inet_sk(sk);\t//是否是一个面向连接套接字，对于TCP是有这个标志位的\tinet_assign_bit(IS_ICSK, sk, INET_PROTOSW_ICSK &amp; answer_flags);\tinet_clear_bit(NODEFRAG, sk);\t//如果是rawsocket就指定了端口号？\tif (SOCK_RAW == sock-&gt;type) &#123;\t\tinet-&gt;inet_num = protocol;\t\tif (IPPROTO_RAW == protocol)\t\t\tinet_set_bit(HDRINCL, sk);\t&#125;\t//根据系统参数决定是否开启mtu探测\tif (READ_ONCE(net-&gt;ipv4.sysctl_ip_no_pmtu_disc))\t\tinet-&gt;pmtudisc = IP_PMTUDISC_DONT;\telse\t\tinet-&gt;pmtudisc = IP_PMTUDISC_WANT;\t\t//设置ip_id字段\tatomic_set(&amp;inet-&gt;inet_id, 0);\t//这里初始化了上面申请的sock结构体的各个字段\tsock_init_data(sock, sk);\tsk-&gt;sk_destruct\t   = inet_sock_destruct;\t//这里记录了用户指定的协议\tsk-&gt;sk_protocol\t   = protocol;\tsk-&gt;sk_backlog_rcv = sk-&gt;sk_prot-&gt;backlog_rcv;\tsk-&gt;sk_txrehash = READ_ONCE(net-&gt;core.sysctl_txrehash);\t//初始化inet_sock的一些字段 单播/多播ttl，tos，管理多播的mc_list\tinet-&gt;uc_ttl\t= -1;   \tinet_set_bit(MC_LOOP, sk);\tinet-&gt;mc_ttl\t= 1;\tinet_set_bit(MC_ALL, sk);\tinet-&gt;mc_index\t= 0;\tinet-&gt;mc_list\t= NULL;\tinet-&gt;rcv_tos\t= 0;\t//tcp或者udp 应该不会走这个逻辑，因为还没有调用bind，inet_num此时应该为0\tif (inet-&gt;inet_num) &#123;\t\tinet-&gt;inet_sport = htons(inet-&gt;inet_num);\t\t/* Add to protocol hash chains. */\t\terr = sk-&gt;sk_prot-&gt;hash(sk);\t\tif (err) &#123;\t\t\tsk_common_release(sk);\t\t\tgoto out;\t\t&#125;\t&#125;\t//这里是特定协议的初始化逻辑\tif (sk-&gt;sk_prot-&gt;init) &#123;\t\terr = sk-&gt;sk_prot-&gt;init(sk);\t\tif (err) &#123;\t\t\tsk_common_release(sk);\t\t\tgoto out;\t\t&#125;\t&#125;\tif (!kern) &#123;\t\terr = BPF_CGROUP_RUN_PROG_INET_SOCK(sk);\t\tif (err) &#123;\t\t\tsk_common_release(sk);\t\t\tgoto out;\t\t&#125;\t&#125;out:\treturn err;out_rcu_unlock:\trcu_read_unlock();\tgoto out;&#125;\n\n上述代码首先根据用户指定的type和protocol类型从inewsw[]中找到匹配的socket和sock的ops，注意这里inewsw[]是一个数组，数组中的每个元素又是一个链表，其实可以理解成一个hash表，hash表的key是type，而protocol是用来寻找某个桶中的的具体的一个元素。上述的inet_sw数组中的元素是由inetsw_array[]中填充进来的，填充的过程在inet_init()函数中实现。inetsw_array[]数组的定义和填充inetsw[]的代码如下：\n//这个数组的作用就是把数组中的元素注册到inet_sw[]中static struct inet_protosw inetsw_array[] =&#123;\t&#123;\t\t.type =       SOCK_STREAM,\t\t.protocol =   IPPROTO_TCP,\t\t.prot =       &amp;tcp_prot,\t\t.ops =        &amp;inet_stream_ops,\t\t.flags =      INET_PROTOSW_PERMANENT |\t\t\t      INET_PROTOSW_ICSK,\t&#125;,\t&#123;\t\t.type =       SOCK_DGRAM,\t\t.protocol =   IPPROTO_UDP,\t\t.prot =       &amp;udp_prot,\t\t.ops =        &amp;inet_dgram_ops,\t\t.flags =      INET_PROTOSW_PERMANENT,       &#125;,       &#123;\t\t.type =       SOCK_DGRAM,\t\t.protocol =   IPPROTO_ICMP,\t\t.prot =       &amp;ping_prot,\t\t.ops =        &amp;inet_sockraw_ops,\t\t.flags =      INET_PROTOSW_REUSE,       &#125;,       &#123;\t       .type =       SOCK_RAW,\t       .protocol =   IPPROTO_IP,\t/* wild card */\t       .prot =       &amp;raw_prot,\t       .ops =        &amp;inet_sockraw_ops,\t       .flags =      INET_PROTOSW_REUSE,       &#125;&#125;;\n\n上述代码为inetsw_array[]数组，其中prot为socket的ops，用户态不同的系统调用会调用到socket的不同ops上。prot则为具体协议的ops。也就是说ops是socket关联的回调函数，prot为sock关联的回调函数，两者其实是密切相关的，可以理解为ops是用户与内核的一个桥梁或者中间层，而prot则是具体的实现。\n注册inetsw_array到inet_sw[]数组中的代码在inet_init()中，代码如下：\n//遍历inetsw_array数组中的元素后调用inet_register_protosw函数将元素插入到inetsw[]中\tfor (q = inetsw_array; q &lt; &amp;inetsw_array[INETSW_ARRAY_LEN]; ++q)\t\tinet_register_protosw(q);void inet_register_protosw(struct inet_protosw *p)&#123;\tstruct list_head *lh;\tstruct inet_protosw *answer;\tint protocol = p-&gt;protocol;\tstruct list_head *last_perm;\tspin_lock_bh(&amp;inetsw_lock);\t//合法性检查\tif (p-&gt;type &gt;= SOCK_MAX)\t\tgoto out_illegal;\t//last_perm保存的是一个socket-&gt;type中最后一个永久协议的位置\tlast_perm = &amp;inetsw[p-&gt;type];\tlist_for_each(lh, &amp;inetsw[p-&gt;type]) &#123;\t\tanswer = list_entry(lh, struct inet_protosw, list);\t\t/* Check only the non-wild match. */\t\t//不是永久协议的情况（TCP/UDP为永久协议）\t\tif ((INET_PROTOSW_PERMANENT &amp; answer-&gt;flags) == 0)\t\t\tbreak;\t\t//和永久协议的protocol一样\t\tif (protocol == answer-&gt;protocol)\t\t\tgoto out_permanent;\t\t//走到这里给永久协议赋值\t\tlast_perm = lh;\t&#125;\t//将新的协议注册到协议之后。\tlist_add_rcu(&amp;p-&gt;list, last_perm);out:\tspin_unlock_bh(&amp;inetsw_lock);\treturn;out_permanent:\tpr_err(&quot;Attempt to override permanent protocol %d\\n&quot;, protocol);\tgoto out;out_illegal:\tpr_err(&quot;Ignoring attempt to register invalid socket type %d\\n&quot;,\t       p-&gt;type);\tgoto out;&#125;\n","categories":["网络协议栈源码学习"],"tags":["socket"]},{"title":"VFS虚拟文件系统","url":"/2025/05/19/VFS%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/","content":"VFS(虚拟文件系统)1.什么是VFSLinux 需要支持多种不同的文件系统（因为不同的文件系统有不同的特点），同时还要为用户提供一组统一的接口，因此要实现这个目的，就要将对各种不同文件系统和管理纳入到一个统一的框架中，也就是同一组系统调用，对各种不同的文件系统进行操作，这就是存在VFS的目的。\n这样，就可以对用户程序隐去各种不同文件系统的细节，为用户程序提供一个统一的、抽象的、虚拟的文件系统，这就是所谓“虚拟文件系统” - VFS（Virtual Filesystem Switch）。这个抽象层由一组标准的、抽象的文件操作构成，以系统调用的形式提供于用户程序，如read（）、write（）、lseek（）等等。这样，用户程序就可以 把所有的文件都看作一致的、抽象的“VFS文件”，通过这些系统调用对文件进行操作，而无需关心具体的文件属于什么文件系统以及具体文件系统的设计和实现,也就是说VFS是一个内核软件层，使应用程序与具体的文件系统解耦。\n举一个例子：在编写应用程序时，会经常使用到write（）系统调用，也就是向一个文件中写入数据。函数的原型为 ssize_t write(int fd, const void *buf, size_t count); 用户程序调用write（f, &amp;buf, len）的含义为向文件描述符为f的文件中，写入len个字节数据，。下图为write（）将数据写入到设备上的宏观流程。我们看到首先通过虚拟文件系统VFS，然后根据不同文件系统的write（）方法将数据写入物理设备上，宏观的调用流程如下图所示：\n\n2.VFS 整体架构虚拟文件系统作为内核中的一个抽象层，起到一个中间层的作用，对上(应用程序)提供统一接口，应用程序只需使用标准的文件操作（如 open、read、write1），无需关心底层是哪种文件系统（EXT4、NTFS、FAT等），对下为各种具体的文件系统（如 ext4、XFS 等）提供了统一的接口（其实就是实现不同文件系统的ops集合），VFS在内核中的整体架构如下所示。\n\n\n\n上述图片为VFS整体架构图，图片中各个组件作用大概如下：\n\nAPP：用户程序通过系统调用读写文件\nPage Cache：缓存文件的数据内容，例如次读取文件时从磁盘加载到页缓存，后续直接读缓存，避免磁盘I&#x2F;O。\nDirectory cache：缓存文件路径到Dentry的映射，减少频繁解析路径的开销。\nInode缓存：缓存文件的元数据（权限、大小、数据块位置等）\nBuffer Cache：缓存磁盘块的原始数据（已逐步被Page Cache取代，但在某些场景仍用于块设备操作）\n磁盘文件系统（ext2&#x2F;ext3&#x2F;ext4）：\next2：早期非日志式文件系统，简单但易崩溃损坏。\next3：增加日志功能，提升崩溃恢复能力。\next4：支持更大文件&#x2F;分区、延迟分配等高级特性。\n\n\n伪文件系统：\nproc：虚拟文件系统，动态暴露内核状态（如 &#x2F;proc&#x2F;cpuinfo）\nsysfs：提供设备&#x2F;驱动信息的统一接口（如 &#x2F;sys&#x2F;class）\n\n\n\n3.VFS关键数据结构VFS中包含着向物理文件系统转换的一系列数据结构，Linux中VFS层依靠四个主要的数据结构来述其结构信息，分别为超级块、索引结点、目录项和文件对象。这四个数据结构作用如下：\n3.1 Superblock（超级块）\n功能：超级块(块指的是存储和管理数据的基本单位)对象由各自的文件系统实现，用来存储文件系统的信息，如块大小、块数量等。这个对象对应为文件系统超级块或者文件系统控制块，它存储在磁盘特定的扇区上。不是基于磁盘的文件系统临时生成超级块，并保存在内存中，注意：所有超级块对象都以双向循环链表的形式链接在一起被管理。\n\n用途： \n\n超级块与物理文件系统一一对应。\n在挂载时初始化，帮助管理文件系统。\n\n\n\n管理超级块的结构体如下所示：\nstruct super_block &#123;    struct list_head    s_list;               // 指向链表的指针    dev_t               s_dev;                // 设备标识符    unsigned long       s_blocksize;          // 以字节为单位的块大小    loff_t              s_maxbytes;           // 文件大小上限    struct file_system_type    *s_type;       // 文件系统类型    const struct super_operations    *s_op;   // SuperBlock 操作函数，write_inode、put_inode 等    const struct dquot_operations    *dq_op;  // 磁盘限额函数    struct dentry        *s_root;             // 根目录&#125;\n\n3.2 Inode(索引节点)\n功能：每个文件都有一个唯一的inode，存储了文件的元数据，如文件大小、权限、访问时间等。它是文件系统中文件的抽象表示，不包含文件名。\n特点：inode存储在磁盘中（伪文件系统除外），在需要的时候会被加载到内存中，具体情况如下：inode 是文件系统的元数据结构，直接存储在磁盘上，用于长期保存文件的元信息（如权限、大小、块位置等）例如在Ext4文件系统中，inode集中存放在磁盘的固定区域。当访问某个文件时，会根据具体的磁盘上的inode(也就是磁盘中的inode, 比如ext4_inode_info)，来填充VFS的创建的inode(用私有指针指一下)。\n\nVFS管理的inode结构如下所示：\nstruct inode &#123;    umode_t                 i_mode;          // 文件权限及类型    kuid_t                  i_uid;           // user id    kgid_t                  i_gid;           // group id    const struct inode_operations    *i_op;  // inode 操作函数，如 create，mkdir，lookup，rename 等    struct super_block      *i_sb;           // 所属的 SuperBlock    loff_t                  i_size;          // 文件大小    struct timespec         i_atime;         // 文件最后访问时间    struct timespec         i_mtime;         // 文件最后修改时间    struct timespec         i_ctime;         // 文件元数据最后修改时间（包括文件名称）    const struct file_operations    *i_fop;  // 文件操作函数，open、write 等    void                    *i_private;      // 文件系统的私有数据&#125;\n\n3.3 Dentry(目录项)Dentry的核心作用是在内存中建立文件名（路径）与 inode 之间的高效映射。每个 Dentry 代表路径中一个特定部分。对于“&#x2F;bin&#x2F;ls”、“&#x2F;”、“bin”和“ls”都是目录项对象。前面是两个目录，最后一个是普通文件。在路径中， 包括普通文件在内，每一个部分都是目录项对象。目录项是描述文件的逻辑属性，只存在于内存中，举个例子，当调用open()函数打开一个文件时，内核会第一时间根据文件路径到 DEntry Cache 里面寻找相应的 DEntry，找到了就直接构造一个file对象并返回。如果该文件不在缓存中，那么 VFS 会根据找到的最近目录一级一级地向下加载，直到找到相应的文件。期间 VFS 会缓存所有被加载生成的dentry。注意:一个 INode 可能被多个 DEntry 所关联，即相当于为某一文件创建了多个文件路径.\nVFS管理的Dentry结构如下所示：\nstruct dentry &#123;    struct dentry *d_parent;     // 父目录    struct qstr d_name;          // 文件名称    struct inode *d_inode;       // 关联的 inode    struct list_head d_child;    // 父目录中的子目录和文件    struct list_head d_subdirs;  // 当前目录中的子目录和文件&#125;\n\n3.4 file 文件对象虚拟文件系统最后一个主要对象是文件对象，文件对象表示进程已打开的文件，每个进程都持有一个fd[]数组，数组里面存放的是指向file结构体的指针，同一进程的不同fd可以指向同一个file对象，file是内核中的数据结构，表示一个被进程打开的文件，和进程相关联。当应用程序调用open()函数的时候，VFS 就会创建相应的file对象。注意： file会通过Dentry找到inode，file的ops集合（read，write等）其实就是inode的i_fops; 这样感觉就实现了进程和文件系统之间的解耦。\nfile结构如下所示：\nstruct file &#123;    struct path                   f_path;    struct inode                  *f_inode;    const struct file_operations  *f_op;    unsigned int                  f_flags;    fmode_t                       f_mode;    loff_t                        f_pos;    struct fown_struct            f_owner;&#125;\n\n下图为上述四个关键数据结构的关系图：\n\n4.挂载4.1 什么叫挂载挂载（Mounting） 是将存储设备（如硬盘、U盘）或文件系统（如Ext4、NTFS）关联到Linux目录树中某个目录（称为挂载点）的过程。挂载后，访问该目录实际指向目标设备或文件系统的内容，而原目录下的文件会被临时隐藏。例如，将U盘挂载到&#x2F;mnt&#x2F;usb后，访问此目录即访问U盘数据，卸载后恢复原目录内容。内核通过虚拟文件系统（VFS）管理挂载表，动态路由路径解析，实现对多文件系统的统一访问。简言之，挂载是让外部存储“接入”目录树的机制，用户通过目录操作文件，无需关心物理设备细节。\n挂载是在用户态发起mount命令，该命令执行的时候需要指定文件系统的类型（例如Ext2）和文件系统数据的位置（也就是dev）。通过这些关键信息，VFS就可以完成Ext2文件系统的初始化，并将其关联到当前已经存在的文件系统当中，也就是建立起下面所示的文件系统树。\n\n如上图所示，该系统根文件系统是Ext4文件系统，而在其&#x2F;mnt目录下面又分别挂载了Ext4文件系统和XFS文件系统。最后形成了一个由多个文件系统组成的文件系统树。\n4.2 挂载点 挂载点（Mount Point）是 Linux系统中用于将外部存储设备或文件系统接入到目录树的一个空目录。通过挂载操作，该目录会成为访问目标文件系统的入口，原有内容会被临时隐藏，转而显示被挂载设备或文件系统的内容。\n一个挂载点用一个vfsmount来表示，属于VFS层的一部分，在用户执行mount系统调用的时候会被创建，它记录了文件系统实例与目录树的关联关系，是挂载机制的核心实现，作用如下：\n\n关联挂载点与超级块：记录被挂载的超级块，其实就是知道被挂载的是哪个文件系统\n支持路径解析：当用户访问路径时，VFS 通过 vfsmount 确定目标文件系统的位置。例如，当访问&#x2F;mnt&#x2F;data&#x2F;file.txt时VFS 发现 &#x2F;mnt&#x2F;data 是挂载点（进而可以拿到超级块的信息）进而调用目标文件系统的方法继续查找要操作的文件。\n\nvfsmount结构如下所示：\nstruct vfsmount &#123;\tstruct dentry *mnt_root;\t//挂载的目录\tstruct super_block *mnt_sb;\t//指向超级块\tint mnt_flags;\tstruct mnt_idmap *mnt_idmap;&#125; __randomize_layout;\n","categories":["文件系统学习"],"tags":["VFS"]},{"title":"IPSec","url":"/2025/05/18/ipsec/","content":"IPSec1.IPSec 简介起源随着Internet的发展，越来越多的企业直接通过Internet进行互联，但由于IP协议未考虑安全性，而且Internet上有大量的不可靠用户和网络设备，所以用户业务数据要穿越这些未知网络，根本无法保证数据的安全性，数据易被伪造、篡改或窃取。因此，迫切需要一种兼容IP协议的通用的网络安全方案。为了解决上述问题，IPSec（Internet Protocol Security）应运而生。IPSec是对IP的安全性补充，其工作在IP层，为IP网络通信提供透明的安全服务。\n定义IPSec是IETF（Internet Engineering Task Force）制定的一组开放的网络安全协议。它并不是一个单独的协议，而是一系列为IP网络提供安全性的协议和服务的集合，包括认证头AH（Authentication Header）和封装安全载荷ESP（Encapsulating SecurityPayload）两个安全协议、密钥交换和用于验证及加密的一些算法等。通过这些协议，在两个设备之间建立一条IPSec隧道。数据通过IPSec隧道进行转发，实现保护数据的安全性。\n受益IPSec通过加密与验证等方式，从以下几个方面保障了用户业务数据在Internet中的安全传输：\n\n数据来源验证：接收方验证发送方身份是否合法。\n数据加密：发送方对数据进行加密，以密文的形式在Internet上传送，接收方对接收的加密数据进行解密后处理或直接转发。\n数据完整性：接收方对接收的数据进行验证，以判定报文是否被篡改。\n抗重放：接收方拒绝旧的或重复的数据包，防止恶意用户通过重复发送捕获到的数据包所进行的攻击。\n\n2.IPSec原理描述2.1IPSec 协议框架2.1.1安全联盟安全联盟SA（Security Association）是通信对等体间对某些要素的协定，它描述了对等体间如何利用安全服务（例如加密）进行安全的通信。这些要素包括对等体间使用何种安全协议、要保护的数据流特征、对等体间传输的数据的封装模式、协议采用的加密和验证算法，以及用于数据安全转换、传输的密钥和SA的生存周期等。IPSec安全传输数据的前提是在IPSec对等体（即运行IPSec协议的两个端点）之间成功建立安全联盟。IPSec安全联盟简称IPSec SA，由一个三元组来唯一标识，这个三元组包括安全参数索引SPI（Security Parameter Index）、目的IP地址和使用的安全协议号（AH或ESP）。其中，SPI是为唯一标识SA而生成的一个32位比特的数值，它被封装在AH和ESP头中。IPSec SA是单向的逻辑连接，通常成对建立（Inbound和Outbound）。因此两个IPSec对等体之间的双向通信，最少需要建立一对IPSec SA形成一个安全互通的IPSec隧道，分别对两个方向的数据流进行安全保护。另外，IPSec SA的个数还与安全协议相关。如果只使用AH或ESP来保护两个对等体之间的流量，则对等体之间就有两个SA，每个方向上一个。如果对等体同时使用了AH和ESP，那么对等体之间就需要四个SA，每个方向上两个，分别对应AH和ESP。建立IPSec SA有两种方式：手工方式和IKE方式。二者的主要差异如表所示。\n\n\n\n对比项\n手工方式建立IPSec SA\nIKE方式自动建立IPSec SA\n\n\n\n加密&#x2F;验证密钥管理\n手工配置、手动刷新，易出错\n通过DH算法动态生成并自动刷新\n\n\n密钥管理成本\n高（需人工维护所有节点密钥）\n低（自动协商和轮换）\n\n\nSPI（安全参数索引）\n手工配置\n随机生成\n\n\n生存周期\n无限制，SA永久存在（除非手动删除）\n由生存周期参数控制，SA自动过期和重建\n\n\n安全性\n低（静态密钥易被破解，无前向保密）\n高（动态密钥、支持PFS、抗重放攻击）\n\n\n适用场景\n小型网络、临时测试环境\n中小型至大型网络、生产环境\n\n\n2.1.2安全协议IPSec使用认证头AH（Authentication Header）和封装安全载荷ESP EncapsulatingSecurity Payload）两种IP传输层协议来提供认证或加密等安全服务。\n\nAH协议：AH仅支持认证功能，不支持加密功能。AH在每一个数据包的标准IP报头后面添加一个AH报文头。AH对数据包和认证密钥进行Hash计算，接收方收到带有计算结果的数据包后，执行同样的Hash计算并与原计算结果比较，传输过程中对数据的任何更改将使计算结果无效，这样就提供了数据来源认证和数据完整性校验。AH协议的完整性验证范围为整个IP报文。\n\nESP协议：ESP支持认证和加密功能。ESP在每一个数据包的标准IP报头后面添加一个ESP报文头，并在数据包后面追加一个ESP尾（ESP Trailer和ESP Auth data）。与AH不同的是，ESP将数据中的有效载荷进行加密后再封装到数据包中，以保证数据的机密性，但ESP没有对IP头的内容进行保护，除非IP头被封装在ESP内部（采用隧道模式）。\n\n\nAH协议与ESP协议的比较如下所示：\n\n\n\n安全特性\nAH (认证头)\nESP (封装安全载荷)\n\n\n\n协议号\n51\n50\n\n\n数据完整性校验\n支持（验证整个IP报文）\n支持（传输模式：不验证IP头；隧道模式：验证整个IP报文）\n\n\n数据源验证\n支持\n支持\n\n\n数据加密\n不支持\n支持\n\n\n防报文重放攻击\n支持\n支持\n\n\nNAT-T (NAT穿越)\n不支持\n支持\n\n\nAH报文头结构\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| 下一个头部 (8 bits) | 载荷长度 (8 bits) |  保留 (16 bits)         |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                   安全参数索引 (SPI, 32 bits)                   |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                   序列号 (Sequence Number, 32 bits)            |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                                                               ||                认证数据 (可变长度，32 bits的整数倍)               ||                                                               |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n AH 报文头字段含义\n\n\n\n字段名\n长度\n含义\n\n\n\n下一头部\n8 bits\n标识 AH 报文头后面的负载类型： - 传输模式：被保护的上层协议（TCP&#x2F;UDP）或 ESP 协议编号 - 隧道模式：IP 协议或 ESP 协议编号（当 AH 与 ESP 同时使用时，下一头部为 ESP 报文头）\n\n\n负载长度\n8 bits\n以 32 比特为单位的 AH 报文头长度减 2（缺省值：4）\n\n\n保留字段\n16 bits\n保留将来使用，缺省为 0\n\n\nSPI\n32 bits\nIPSec 安全参数索引，唯一标识安全联盟（SA）\n\n\n序列号\n32 bits\n从 1 开始的单向递增计数器，防止重放攻击\n\n\n认证数据\n变长字段（32 比特整数倍，通常 96 bits）\n包含完整性校验值（ICV），用于接收方校验数据完整性。认证算法：- ✅ 推荐：SHA2、SM3- ⚠️ 不安全：MD5、SHA1（存在安全隐患）\n\n\nESP 报文结构\n+-----------------------------------------------+ &lt;-- ESP头部| 安全参数索引（SPI）                              |+-----------------------------------------------+| 序列号                                         |+-----------------------------------------------+ &lt;-- 加密部分开始|                                               || 负载数据（Payload，变长）                        ||                                               |+-----------------------------------------------+| 填充字段（0～255字节 Padding）                   |+-----------------------------------------------+| 填充长度（1B） | 下一头部（1B）                   |+-----------------------------------------------+ &lt;-- ESP尾部（加密部分结束）|                                               || 认证数据（ICV，完整性校验值，变长                  ||                                               |+-----------------------------------------------+ &lt;-- ESP认证部分\n\n ESP 报文头字段含义\n\n\n\n字段名\n长度\n含义\n\n\n\nSPI\n32 bits\nIPSec 安全参数索引，唯一标识安全联盟（SA）\n\n\n序列号\n32 bits\n从 1 开始的单向递增计数器，防止重放攻击\n\n\n负载数据\n变长\n原始 IP 报文中的可变长度数据内容（保护内容类型由下一头部字段标识）\n\n\n填充字段\n0-255 字节\n用于补齐加密算法要求的块长度\n\n\n填充长度\n8 bits\n表示填充字段的字节数（0 表示无填充）\n\n\n下一头部\n8 bits\n标识下一个负载类型：- 传输模式：上层协议编号（如 TCP&#x3D;6&#x2F;UDP&#x3D;17）- 隧道模式：IP 协议（IPv4&#x3D;4&#x2F;IPv6&#x3D;41）\n\n\n认证数据\n变长\n完整性校验值（ICV），需 32 位对齐\n\n\n2.1.3封装模式封装模式是指将AH或ESP相关的字段插入到原始IP报文中，以实现对报文的认证和加密，封装模式有传输模式和隧道模式两种。\n传输模式\n在传输模式中，AH头或ESP头被插入到IP头与传输层协议头之间，保护TCP&#x2F;UDP&#x2F;ICMP负载。由于传输模式未添加额外的IP头，所以原始报文中的IP地址在加密后报文的IP头中可见。以TCP报文为例，原始报文经过传输模式封装后，报文格式如下所示。\n\n隧道模式\n在隧道模式下，AH头或ESP头被插到原始IP头之前，另外生成一个新的报文头放到AH头或ESP头之前，保护IP头和负载。以TCP报文为例，原始报文经隧道模式封装后的报文结构如下图所示。\n\n隧道模式下，与AH协议相比，ESP协议的完整性验证范围不包括新IP头，无法保证新IP头的安全。\n传输模式和隧道模式比较\n传输模式和隧道模式的区别在于：\n\n从安全性来讲，隧道模式优于传输模式。它可以完全地对原始IP数据包进行验证和加密。隧道模式下可以隐藏内部IP地址，协议类型和端口。\n从性能来讲，隧道模式因为有一个额外的IP头，所以它将比传输模式占用更多带宽。\n从场景来讲，传输模式主要应用于两台主机或一台主机和一台VPN网关之间通信；隧道模式主要应用于两台VPN网关之间或一台主机与一台VPN网关之间的通信。当安全协议同时采用AH和ESP时，AH和ESP协议必须采用相同的封装模式。\n\n2.1.4 加密和验证IPSec提供了两种安全机制：加密和验证。加密机制保证数据的机密性，防止数据在传输过程中被窃听；验证机制能保证数据真实可靠，防止数据在传输过程中被仿冒和篡改。\n加密\nIPSec采用对称加密算法对数据进行加密和解密。如下图所示，数据发送方和接收方使用相同的密钥进行加密、解密。\n用于加密和解密的对称密钥可以手工配置，也可以通过IKE协议自动协商生成。常用的对称加密算法包括：数据加密标准DES（Data Encryption Standard）、3DES（Triple Data Encryption Standard）、先进加密标准AES（Advanced EncryptionStandard）国密算法（SM1和SM4）。其中，DES和3DES算法安全性低，存在安全风险，不推荐使用。\n验证\nIPSec的加密功能，无法验证解密后的信息是否是原始发送的信息或完整。IPSec采用HMAC（Keyed-Hash Message Authentication Code）功能，比较完整性校验值ICV进行数据包完整性和真实性验证。通常情况下，加密和验证通常配合使用。如图所示，在IPSec发送方，加密后的报文通过验证算法和对称密钥生成完整性校验值ICV，IP报文和完整性校验值ICV同时发给对端；在IPSec接收方，使用相同的验证算法和对称密钥对加密报文进行处理，同样得到完整性校验值ICV，然后比较完整性校验值ICV进行数据完整性和真实性验证，验证不通过的报文直接丢弃，验证通过的报文再进行解密。\n\n同加密一样，用于验证的对称密钥也可以手工配置，或者通过IKE协议自动协商生成。常用的验证算法包括：消息摘要MD5（Message Digest 5）、安全散列算法SHA1（Secure Hash Algorithm 1）、SHA2、国密算法SM3（Senior Middle 3）。其中，MD5、SHA1算法安全性低，存在安全风险，不推荐使用。\n2.1.5  密钥交换使用对称密钥进行加密、验证时，如何安全地共享密钥是一个很重要的问题。有两种方法解决这个问题：\n\n带外共享密钥在发送、接收设备上手工配置静态的加密、验证密钥。双方通过带外共享的方式（例如通过电话或邮件方式）保证密钥一致性。这种方式的缺点是安全性低，可扩展性差，在点到多点组网中配置密钥的工作量成倍增加。另外，为提升网络安全性需要周期性修改密钥，这种方式下也很难实施。\n使用一个安全的密钥分发协议通过IKE协议自动协商密钥。IKE采用DH算法在不安全的网络上安全地分发密钥。这种方式配置简单，可扩展性好，特别是在大型动态的网络环境下此优点更加突出。同时，通信双方通过交换密钥交换材料来计算共享的密钥，即使第三方截获了双方用于计算密钥的所有交换数据，也无法计算出真正的密钥，这样极大地提高了安全性。\n\nIKE 协议因特网密钥交换IKE（Internet Key Exchange）协议建立在Internet安全联盟和密钥管理协议ISAKMP定义的框架上，是基于UDP（User Datagram Protocol）的应用层协议。它为IPSec提供了自动协商密钥、建立IPSec安全联盟的服务，能够简化IPSec的配置和维护工作。IKE与IPSec的关系如图所示，对等体之间建立一个IKE SA完成身份验证和密钥信息交换后，在IKE SA的保护下，根据配置的AH&#x2F;ESP安全协议等参数协商出一对IPSecSA。此后，对等体间的数据将在IPSec隧道中加密传输。IKE SA是一个双向的逻辑连接，两个对等体间只建立一个IKE SA。\n\nIKE安全机制\nIKE具有一套自保护机制，可以在网络上安全地认证身份、分发密钥、建立IPSec SA：\n\n身份认证身份认证确认通信双方的身份（对等体的IP地址或名称），包括预共享密钥PSK（pre-shared key）认证、数字证书RSA（rsa-signature）认证和数字信封认证。在预共享密钥认证中，通信双方采用共享的密钥对报文进行Hash计算，判断双方的计算结果是否相同。如果相同，则认证通过；否则认证失败。当有1个对等体对应多个对等体时，需要为每个对等体配置预共享的密钥。该方法在小型网络中容易建立，但安全性较低。在数字证书认证中，通信双方使用CA证书进行数字证书合法性验证，双方各有自己的公钥（网络上传输）和私钥（自己持有）。发送方对原始报文进行Hash计算，并用自己的私钥对报文计算结果进行加密，生成数字签名。接收方使用发送方的公钥对数字签名进行解密，并对报文进行Hash计算，判断计算结果与解密后的结果是否相同。如果相同，则认证通过；否则认证失败。使用数字证书安全性高，但需要CA来颁发数字证书，适合在大型网络中使用。在数字信封认证中，发送方首先随机产生一个对称密钥，使用接收方的公钥对此对称密钥进行加密（被公钥加密的对称密钥称为数字信封），发送方用对称密钥加密报文，同时用自己的私钥生成数字签名。接收方用自己的私钥解密数字信封得到对称密钥，再用对称密钥解密报文，同时根据发送方的公钥对数字签名进行解密，验证发送方的数字签名是否正确。如果正确，则认证通过；否则认证失败。数字信封认证用于设备需要符合国家密码管理局要求时使用，此认证方法只能在IKEv1的主模式协商过程中支持。IKE支持的认证算法有：MD5、SHA1、SHA2-256、SHA2-384、SHA2-512、SM3。\n\n身份保护身份数据在密钥产生之后加密传送，实现了对身份数据的保护。IKE支持的加密算法有：DES、3DES、AES-128、AES-192、AES-256、SM1和SM4。\n\nDHDH是一种公共密钥交换方法，它用于产生密钥材料，并通过ISAKMP消息在发送和接收设备之间进行密钥材料交换。然后，两端设备各自计算出完全相同的对称密钥。该对称密钥用于计算加密和验证的密钥。在任何时候，通信双方都不交换真正的密钥。DH密钥交换是IKE的精髓所在。\n\nPFS完善的前向安全性PFS（Perfect Forward Secrecy）通过执行一次额外的DH交换，确保即使IKE SA中使用的密钥被泄露，IPSec SA中使用的密钥也不会受到损害。\n\n\n2.2IPSec 基本原理IPSec通过在IPSec对等体间建立双向安全联盟形成一个安全互通的IPSec隧道，并通过定义IPSec保护的数据流将要保护的数据引入该IPSec隧道，然后对流经IPSec隧道的数据通过安全协议进行加密和验证，进而实现在Internet上安全传输指定的数据。IPSec安全联盟可以手工建立，也可以通过IKEv1或IKEv2协议自动协商建立。本文重点介绍如何定义IPSec保护的数据流、IKE自动协商建立安全联盟的过程。\n2.2.1 定义 IPSec 保护的数据流IPSec是基于定义的感兴趣流触发对特定数据的保护，至于什么样的数据是需要IPSec保护的，可以通过以下两种方式定义。其中IPSec感兴趣流即需要IPSec保护的数据流。\n\nACL方式手工方式和IKE自动协商方式建立的IPSec隧道是由ACL来指定要保护的数据流范围，筛选出需要进入IPSec隧道的报文，ACL规则允许（permit）的报文将被保护，未匹配任何permit规则的报文将不被保护。这种方式可以利用ACL的丰富配置功能，根据IP地址、端口、协议类型等对报文进行过滤进而灵活制定IPSec的保护方法。\n路由方式通过IPSec虚拟隧道接口建立IPSec隧道，将所有路由到IPSec虚拟隧道接口的报文都进行IPSec保护，根据该路由的目的地址确定哪些数据流需要IPSec保护。其中IPSec虚拟隧道接口是一种三层逻辑接口。路由方式具有以下优点：\n通过路由将需要IPSec保护的数据流引到虚拟隧道接口，不需使用ACL定义待\n加&#x2F;解密的流量特征，简化了IPSec配置的复杂性。\n支持动态路由协议。\n通过GRE over IPSec支持对组播流量的保护。\n\n\n\n2.2.2 IKEv1 协商安全联盟的过程IKEv1 协商阶段1\nIKEv1协商阶段1的目的是建立IKE SA。IKE SA建立后对等体间的所有ISAKMP（一个框架 IKE是一种实现）消息都将通过加密和验证，这条安全通道可以保证IKEv1第二阶段的协商能够安全进行。IKEv1协商阶段1支持两种协商模式：主模式（Main Mode）和野蛮模式（AggressiveMode）。主模式包含三次双向交换，用到了六条ISAKMP信息，协商过程如下图所示。这三次交换分别是：\n\n消息①和②用于提议交换发起方发送一个或多个IKE安全提议，响应方查找最先匹配的IKE安全提议，并将这个IKE安全提议回应给发起方。匹配的原则为协商双方具有相同的加密算法、认证算法、认证方法和DH组标识。\n消息③和④用于密钥信息交换\n双方交换DH(一种密钥交换算法，不暴露私钥的情况下，计算出一个共享密钥)公共值和nonce(一个随机值)值，用于IKE SA的认证和加密密钥在这个阶段产生。消息⑤和⑥用于身份和认证信息交换（双方使用生成的密钥发送信息），双方进行身份认证和对整个主模式交换内容的认证。\n\n野蛮模式只用到三条信息，前两条消息①和②用于协商IKE安全提议，交换DH公共值、必需的辅助信息以及身份信息并且消息②中还包括响应方发送身份信息供发起方认证，消息③用于响应方认证发起方。IKEv1协商阶段1的协商过程如下图所示。\n\n与主模式相比，野蛮模式减少了交换信息的数目，提高了协商的速度，但是没有对身份信息进行加密保护。\nIKEv1 协商阶段 2\nIKEv1协商阶段2的目的就是建立用来安全传输数据的IPSec SA，并为数据传输衍生出密钥。这一阶段采用快速模式（Quick Mode）。该模式使用IKEv1协商阶段1中生成的密钥对ISAKMP消息的完整性和身份进行验证，并对ISAKMP消息进行加密，故保证了交换的安全性。IKEv1协商阶段2的协商过程如下图所示。\n\nIKEv1协商阶段2通过三条ISAKMP消息完成双方IPSec SA的建立：\n\n协商发起方发送本端的安全参数和身份认证信息。安全参数包括被保护的数据流和IPSec安全提议等需要协商的参数。身份认证信息包括第一阶段计算出的密钥和第二阶段产生的密钥材料等，可以再次认证对等体。\n协商响应方发送确认的安全参数和身份认证信息并生成新的密钥。IPSec SA数据传输需要的加密、验证密钥由第一阶段产生的密钥、SPI、协议等参数衍生得出，以保证每个IPSec SA都有自己独一无二的密钥。如果启用PFS，则需要再次应用DH算法计算出一个共享密钥，然后参与上述计算，因此在参数协商时要为PFS协商DH密钥组。\n发送方发送确认信息，确认与响应方可以通信，协商结束。\n\n2.2.3 IKEv2 协商安全联盟的过程采用IKEv2协商安全联盟比IKEv1协商过程要简化的多。要建立一对IPSec SA，IKEv1需要经历两个阶段：“主模式＋快速模式”或者“野蛮模式＋快速模式”，前者至少需要交换9条消息，后者也至少需要6条消息。而IKEv2正常情况使用2次交换共4条消息就可以完成一对IPSec SA的建立，如果要求建立的IPSec SA大于一对时，每一对IPSec SA只需额外增加1次创建子SA交换，也就是2条消息就可以完成。IKEv2定义了三种交换：初始交换（Initial Exchanges）、创建子SA交换（Create_Child_SA Exchange）以及通知交换（Informational Exchange）。\n初始交换\n正常情况下，IKEv2通过初始交换就可以完成第一对IPSec SA的协商建立。IKEv2初始交换对应IKEv1的第一阶段，初始交换包含两次交换四条消息，如下图所示。\n消息①和②属于第一次交换（称为IKE_SA_INIT交换），以明文方式完成IKE SA的参数协商，包括协商加密和验证算法，交换临时随机数和DH交换。IKE_SA_INIT交换后生成一个共享密钥材料，通过这个共享密钥材料可以衍生出IPSec SA的所有密钥。消息③和④属于第二次交换（称为IKE_AUTH交换），以加密方式完成身份认证、对前两条信息的认证和IPSec SA的参数协商。IKEv2支持RSA签名认证、预共享密钥认证以及扩展认证方法EAP（Extensible Authentication Protocol）。发起者通过在消息3中省去认证载荷来表明需要使用EAP认证。\n创建子 SA 交换\n当一个IKE SA需要创建多对IPSec SA时，需要使用创建子SA交换来协商多于一对的IPSec SA。另外，创建子SA交换还可以用于IKE SA的重协商。创建子SA交换包含一个交换两条消息，对应IKEv1协商阶段2，交换的发起者可以是初始交换的协商发起方，也可以是初始交换的协商响应方。创建子SA交换必须在初始交换完成后进行，交换消息由初始交换协商的密钥进行保护。类似于IKEv1，如果启用PFS，创建子SA交换需要额外进行一次DH交换，生成新的密钥材料。生成密钥材料后，子SA的所有密钥都从这个密钥材料衍生出来。\n通知交换\n运行IKE协商的两端有时会传递一些控制信息，例如错误信息或者通告信息，这些信息在IKEv2中是通过通知交换完成的，如下图所示。通知交换必须在IKE SA保护下进行，也就是说通知交换只能发生在初始交换之后。控制信息可能是IKE SA的，那么通知交换必须由该IKE SA来保护进行；也可能是某子SA的，那么该通知交换必须由生成该子SA的IKE SA来保护进行。\n\n","categories":["网络协议学习"],"tags":["IPSec"]},{"title":"socket系统调用","url":"/2025/05/13/socket%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/","content":"简介socket 是网络编程中最基本的系统调用之一，用于创建一个网络通信的“端点”（即套接字，socket）。\n一、函数原型int socket(int domain, int type, int protocol);\n\n\n\n\n参数\n说明\n\n\n\ndomain\n协议族，比如：AF_INET 表示 IPv4\n\n\ntype\n套接字类型，比如：SOCK_STREAM 表示 TCP\n\n\nprotocol\n指定使用的协议，通常填 0 让系统自动选择\n\n\n二、函数调用流程用户态程序调用 socket()        ↓glibc 中封装的socket接口        ↓内部通过 syscall 指令        ↓进入内核，执行 sys_socket()\n三、代码分析1. glibc层代码分析代码位置：glibc-2.40\\sysdeps\\unix\\sysv\\linux\\socket.c\nint __socket (int fd, int type, int domain)&#123;#ifdef __ASSUME_SOCKET_SYSCALL //是否支持单独的系统调用号，肯定支持  return INLINE_SYSCALL_CALL (socket, fd, type, domain);#else\t//32位的处理器会走这个分支  return SOCKETCALL (socket, fd, type, domain);#endif&#125;libc_hidden_def (__socket)//暴露给外部程序的符号为socket() 其实是__socket()的别名weak_alias (__socket, socket)\n\n用户应用程序调用socket()实际调用的的是上述glibc中的__socket，在__socket中 INLINE_SYSCALL_CALL宏经过一系列展开后变成宏__INLINE_SYSCALL4 ，这个宏会进一步再展开，如下所示：\n#define __INLINE_SYSCALL4(name, a1, a2, a3, a4) \\  INLINE_SYSCALL (name, 4, a1, a2, a3, a4)\n\n上述的INLINE_SYSCALL 展开，结果如下所示：\n#define INLINE_SYSCALL(name, nr, args...)\t\t\t\t\\  (&#123;\t//sc_ret为系统调用的返回值    long int sc_ret = INTERNAL_SYSCALL (name, nr, args);\t//对返回值好像要简单检查一下    __glibc_unlikely (INTERNAL_SYSCALL_ERROR_P (sc_ret))\t\t\\    ? SYSCALL_ERROR_LABEL (INTERNAL_SYSCALL_ERRNO (sc_ret))\t\t\\    : sc_ret;\t\t\t\t\t\t\t\t\\  &#125;)\n\nINTERNAL_SYSCALL 进一步在展开，会变成了internal_syscall3\n这里举个例子，例如，未展开前为INTERNAL_SYSCALL(socket, 3, AF_INET, SOCK_STREAM, 0) 展开后会变成\ninternal_syscall3(__NR_socket, AF_INET, SOCK_STREAM, 0)，如果在x86架构中宏__NR_socket为41\n在glibc-2.40\\sysdeps\\unix\\sysv\\linux\\x86_64\\64\\arch-syscall.h 中有定义\n#define __NR_socket 41\n\n总之，上述宏经过一系列展开后变成了如下函数，其中number为系统调用号，arg1, arg2, arg3 为传入的参数\n#define internal_syscall3(number, arg1, arg2, arg3)\t\t\t\\(&#123;\t\t\t\t\t\t\t\t\t\\    unsigned long int resultvar;\t\t\t\t\t\\    TYPEFY (arg3, __arg3) = ARGIFY (arg3);\t\t\t \t\\    TYPEFY (arg2, __arg2) = ARGIFY (arg2);\t\t\t \t\\    TYPEFY (arg1, __arg1) = ARGIFY (arg1);\t\t\t \t\\    register TYPEFY (arg3, _a3) asm (&quot;rdx&quot;) = __arg3;\t\t\t\\    register TYPEFY (arg2, _a2) asm (&quot;rsi&quot;) = __arg2;\t\t\t\\    register TYPEFY (arg1, _a1) asm (&quot;rdi&quot;) = __arg1;\t\t\t\\    asm volatile (\t\t\t\t\t\t\t\\    &quot;syscall\\n\\t&quot;\t\t\t\t\t\t\t\\    : &quot;=a&quot; (resultvar)\t\t\t\t\t\t\t\\    : &quot;0&quot; (number), &quot;r&quot; (_a1), &quot;r&quot; (_a2), &quot;r&quot; (_a3)\t\t\t\\    : &quot;memory&quot;, REGISTERS_CLOBBERED_BY_SYSCALL);\t\t\t\\    (long int) resultvar;\t\t\t\t\t\t\\&#125;)\n\n上述代码的作用是将系统调用号和 3 个参数分别放入规定的寄存器（RAX, RDI, RSI, RDX），然后执行 syscall 指令，并将返回值保存到 resultvar：\n“memory”, REGISTERS_CLOBBERED_BY_SYSCALL 的意思是告诉编译器不要优化这段代码\n下面附上x86-64 Linux 的 syscall 调用约定传参的寄存器\n\n\n\n参数\n寄存器\n\n\n\nsyscall 编号\nRAX\n\n\n参数1\nRDI\n\n\n参数2\nRSI\n\n\n参数3\nRDX\n\n\n参数4\nR10\n\n\n参数5\nR8\n\n\n参数6\nR9\n\n\n2.内核代码分析执行上述syscall指令后CPU 会根据 MSR 寄存器（Model Specific Registers）跳转到系统调用函数，例如，x86架构则会进入到系统调用的统一入口函数entry_SYSCALL_64\nentry_SYSCALL_64函数的注册（也就把地址写入MSR寄存器）在syscall_init中完成代码如下：\nvoid syscall_init(void)&#123;\twrmsr(MSR_STAR, 0, (__USER32_CS &lt;&lt; 16) | __KERNEL_CS);\t//把entry_SYSCALL_64 的地址写入MSR_LSTAR寄存器\twrmsrl(MSR_LSTAR, (unsigned long)entry_SYSCALL_64); \t...&#125;\n\n上述syscall_init 函数在start_kernel（）中被调用\n接下里看一下entry_SYSCALL_64的逻辑，\nSYM_CODE_START(entry_SYSCALL_64)\tUNWIND_HINT_EMPTY\t//这个是切换GS寄存器，这个寄存器是访问per-cpu变量的基址task_struct结构就依赖这个寄存器间接获得\tswapgs\t/* tss.sp2 is scratch space. */\t//将当前栈指针保存\tmovq\t%rsp, PER_CPU_VAR(cpu_tss_rw + TSS_sp2)\t//切换页表\tSWITCH_TO_KERNEL_CR3 scratch_reg=%rsp\t//切换当前栈指针到当前 CPU 的内核栈顶指针\tmovq\tPER_CPU_VAR(cpu_current_top_of_stack), %rspSYM_INNER_LABEL(entry_SYSCALL_64_safe_stack, SYM_L_GLOBAL)\t/* Construct struct pt_regs on stack */\t//把用户态的一些信息入栈（貌似就是pt_regs）\tpushq\t$__USER_DS\t\t\t\t/* pt_regs-&gt;ss */\tpushq\tPER_CPU_VAR(cpu_tss_rw + TSS_sp2)\t/* pt_regs-&gt;sp */\tpushq\t%r11\t\t\t\t\t/* pt_regs-&gt;flags */\tpushq\t$__USER_CS\t\t\t\t/* pt_regs-&gt;cs */\tpushq\t%rcx\t\t\t\t\t/* pt_regs-&gt;ip */SYM_INNER_LABEL(entry_SYSCALL_64_after_hwframe, SYM_L_GLOBAL)\t//这里存了系统调用号\tpushq\t%rax\t\t\t\t\t/* pt_regs-&gt;orig_ax */\t//其他寄存器的信息继续保存到栈中\tPUSH_AND_CLEAR_REGS rax=$-ENOSYS\t/* IRQs are off. */\t//把系统调用号放入 rdi → 作为函数的第 1 个参数\tmovq\t%rax, %rdi\t//把 pt_regs 地址放入 rsi → 作为第 2 个参数\tmovq\t%rsp, %rsi\t//调用do_syscall_64\tcall\tdo_syscall_64\t\t/* returns with IRQs disabled */\t...\tSYM_CODE_END(entry_SYSCALL_64)\n\n在用户执行 syscall 指令后，CPU 跳转到entry_SYSCALL_64，完成从用户态到内核态的切换、栈构造、参数准备，并调用 C 函数 do_syscall_64() 来处理系统调用。\n接下来看一下上述汇编代码中调用do_syscall_64 代码位于arch\\x86\\entry\\common.c中\n#ifdef CONFIG_X86_64__visible noinstr void do_syscall_64(unsigned long nr, struct pt_regs *regs)&#123;\t//这里开启了中断（进入系统调用前要先关中断在哪里没找到，好像sycall后会自动关）追踪，安全相关\tnr = syscall_enter_from_user_mode(regs, nr);\t//禁止插桩，\tinstrumentation_begin();\t//检查系统调用号是否在合法范围\tif (likely(nr &lt; NR_syscalls)) &#123;\t\tnr = array_index_nospec(nr, NR_syscalls);\t\t//nr存的是系统调用好，从系统调用表中找到对应的处理函数，然后将\t\t//返回值存入到regs-&gt;ax寄存器\t\tregs-&gt;ax = sys_call_table[nr](regs);        //32位#ifdef CONFIG_X86_X32_ABI\t&#125; else if (likely((nr &amp; __X32_SYSCALL_BIT) &amp;&amp;\t\t\t  (nr &amp; ~__X32_SYSCALL_BIT) &lt; X32_NR_syscalls)) &#123;\t\tnr = array_index_nospec(nr &amp; ~__X32_SYSCALL_BIT,\t\t\t\t\tX32_NR_syscalls);\t\tregs-&gt;ax = x32_sys_call_table[nr](regs);#endif\t&#125;\tinstrumentation_end();\tsyscall_exit_to_user_mode(regs);&#125;#endif\n\n上述代码中最关键的就是regs-&gt;ax = sys_call_table[nr](regs)找到对应的系统调用函数，并传入pt_regs，pt_regs保存了参数和用户的一些信息。\nsys_call_table[]就是一个函数指针，每个元素指向具体的函数实现，定义如下所示:\nasmlinkage const sys_call_ptr_t sys_call_table[__NR_syscall_max+1] = &#123;\t/*\t * Smells like a compiler bug -- it doesn&#x27;t work\t * when the &amp; below is removed.\t */\t[0 ... __NR_syscall_max] = &amp;__x64_sys_ni_syscall,//下面这个头文件貌似是编译生成的，include进来后就替换了上面的默认值#include &lt;asm/syscalls_64.h&gt;&#125;;\n\n上述 &lt;asm/syscalls_64.h&gt;是在编译过程中生成的，具体的流程如下：\nsyscall_64.tbl   ↓（作为输入）syscalltbl.sh 脚本   ↓（生成）syscalls_64.h   ↓（#include）用于填充 sys_call_table[]\n上述流程在\\arch\\x86\\entry\\syscalls中有体现。下面展示了部分syscall_64.tbl中的内容\n0\tcommon\tread\t\t\tsys_read1\tcommon\twrite\t\t\tsys_write2\tcommon\topen\t\t\tsys_open3\tcommon\tclose\t\t\tsys_close·········41\tcommon\tsocket\t\t\tsys_socket·········440\tcommon\tprocess_madvise\t\tsys_process_madvise\n\n系统调用号 41 对应的函数指针在 sys_call_table[]被syscalltbl.sh 处理后，最终指向 __x64_sys_socket 这个函数，而这个函数和SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol) 宏展开后是一个函数！\n","categories":["网络协议栈源码学习"],"tags":["socket"]},{"title":"sock的创建与初始化","url":"/2025/05/24/sock%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96/","content":"以IPv4协议族为例，当用户态执行socket系统调用后，会调用到inet_create(),在inet_create()中会创建与socket关联的sock结构体，具体代码如下：\nstatic int inet_create(struct net *net, struct socket *sock, int protocol,\t\t       int kern)&#123;    .....\t//注意： 这里申请一个sock结构，这个sock结构可以理解为传输层协议和socket之间的一个中间层\t//对上提供socket层的结构，\t//对下与具体的协议相关\t//kern 标识这个套接字是否是内核创建的\tsk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot, kern);\tif (!sk)\t\tgoto out;    .....\t//这里初始化了上面申请的sock结构体的各个字段\tsock_init_data(sock, sk);    .....&#125;\n\nsk_alloc()上述sk_alloc()其实就是使用slab分配其分配了prot-&gt;size大小的的内存，也就是说分配了一个比sock结构体size还要大的内存，举个例子，如果是TCP协议，则分配的大小为sizeof(tcp_sock),也就是说tcp_sock内嵌了sock结构体，类似继承的关系，关系如下图所示：\n\n接下来具体看一下sk_alloc()的实现：\nstruct sock *sk_alloc(struct net *net, int family, gfp_t priority,\t\t      struct proto *prot, int kern)&#123;\tstruct sock *sk;\t//调用slab 分配一个sk结构体，注意这个结构体的大小取决与prot参数的size字段\t//__GFP_ZERO表示为内存申请后需要清零的标志位\tsk = sk_prot_alloc(prot, priority | __GFP_ZERO, family);\tif (sk) &#123;\t\t//设置协议族\t\tsk-&gt;sk_family = family;\t\t/*\t\t * See comment in struct sock definition to understand\t\t * why we need sk_prot_creator -acme\t\t */\t\t//这里很关键，将具体协议的prot关联到了sock上\t\tsk-&gt;sk_prot = sk-&gt;sk_prot_creator = prot;\t\t//记录是否是内核创建的\t\tsk-&gt;sk_kern_sock = kern;\t\tsock_lock_init(sk);\t\t//如果是用户进程创建的，就增加网络命名空间的引用计数\t\tsk-&gt;sk_net_refcnt = kern ? 0 : 1;\t\t//更新当前core上所有活跃套接字的引用计数。\t\tif (likely(sk-&gt;sk_net_refcnt)) &#123;\t\t\tget_net_track(net, &amp;sk-&gt;ns_tracker, priority);\t\t\tsock_inuse_add(net, 1);\t\t&#125; else &#123;\t\t\t__netns_tracker_alloc(net, &amp;sk-&gt;ns_tracker,\t\t\t\t\t      false, priority);\t\t&#125;\t\t//将sock与网络命名空间关联\t\tsock_net_set(sk, net);\t\t//发送缓冲区引用计数加1\t\trefcount_set(&amp;sk-&gt;sk_wmem_alloc, 1);\t\tmem_cgroup_sk_alloc(sk);\t\tcgroup_sk_alloc(&amp;sk-&gt;sk_cgrp_data);\t\tsock_update_classid(&amp;sk-&gt;sk_cgrp_data);\t\tsock_update_netprioidx(&amp;sk-&gt;sk_cgrp_data);\t\tsk_tx_queue_clear(sk);\t&#125;\treturn sk;&#125;\n\n上述代码中调用sk_prot_alloc() 根据不同的prot(也就是不同的协议)申请sock，同时设置了__GFP_ZERO 标志，表示需要将申请的内存memset，sk_prot_alloc() 的具体实现如下：\nstatic struct sock *sk_prot_alloc(struct proto *prot, gfp_t priority,\t\tint family)&#123;\tstruct sock *sk;\tstruct kmem_cache *slab;\t//从slab分配器中拿一个结构体，这个slabchace是inet_init中初始化的\tslab = prot-&gt;slab;\tif (slab != NULL) &#123;\t\tsk = kmem_cache_alloc(slab, priority &amp; ~__GFP_ZERO);\t\tif (!sk)\t\t\treturn sk;\t\t//是否需要memset，可以看到这里的大小是objsize\t\tif (want_init_on_alloc(priority))\t\t\tsk_prot_clear_nulls(sk, prot-&gt;obj_size);\t&#125; else\t//如果没使用slab就用kmalloc，kamlloc不也是slab吗？\t\tsk = kmalloc(prot-&gt;obj_size, priority);\tif (sk != NULL) &#123;\t\t//安全相关\t\tif (security_sk_alloc(sk, family, priority))\t\t\tgoto out_free;\t\t//增加引用计数\t\tif (!try_module_get(prot-&gt;owner))\t\t\tgoto out_free_sec;\t&#125;\treturn sk;out_free_sec:\tsecurity_sk_free(sk);out_free:\tif (slab != NULL)\t\tkmem_cache_free(slab, sk);\telse\t\tkfree(sk);\treturn NULL;&#125;\n\n从上述代码可知是通过slab = prot-&gt;slab;获取了一个slab对象，这个slab管理的结构体大小是inet_init()中调用proto_register()创建slab时候确定的，具体函数如下所示：\nint proto_register(struct proto *prot, int alloc_slab)&#123;\t......\tif (alloc_slab) &#123;\t\tprot-&gt;slab = kmem_cache_create_usercopy(prot-&gt;name,\t\t\t\t\tprot-&gt;obj_size, 0,\t\t\t\t\tSLAB_HWCACHE_ALIGN | SLAB_ACCOUNT |\t\t\t\t\tprot-&gt;slab_flags,\t\t\t\t\tprot-&gt;useroffset, prot-&gt;usersize,\t\t\t\t\tNULL);\t&#125;\t.......&#125;\n\n可以看到在上面创建slab缓存时，指定的size大小为prot-&gt;obj_size，例如tcp协议的obj_size则为sizeof(tcp_sock)结构体的大小。注意到上述创建slab缓存使用的接口是kmem_cache_create_usercopy，这个usercopy的意义是允许指定对象拷贝到用户空间的内存区域。prot-&gt;useroffset指的是对象中允许拷贝到用户空间的数据区域的偏移。prot-&gt;usersize指的是允许拷贝到用户空间的数据区域的大小。（tcp等协议这个字段好像都是空）\nsock_init_data()上述创建了sock结构体后紧接着就会调用sock_init_data完成初始化，sock_init_data中先从socket结构体中关联的inode中获取uid然后调用sock_init_data_uid()完成初始化，上述两个函数的代码如下：\nvoid sock_init_data(struct socket *sock, struct sock *sk)&#123;\t//注意：这里的uid是在创建socket和inode的时候设置的\t//i_uid用于表示与该 inode 关联的文件或对象的所有者用户ID\tkuid_t uid = sock ?\t\tSOCK_INODE(sock)-&gt;i_uid :\t\tmake_kuid(sock_net(sk)-&gt;user_ns, 0);\tsock_init_data_uid(sock, sk, uid);&#125;\n\nvoid sock_init_data_uid(struct socket *sock, struct sock *sk, kuid_t uid)&#123;\tsk_init_common(sk);\tsk-&gt;sk_send_head\t=\tNULL;\ttimer_setup(&amp;sk-&gt;sk_timer, NULL, 0);\tsk-&gt;sk_allocation\t=\tGFP_KERNEL;\t//设置接收和发送默认缓冲区大小\tsk-&gt;sk_rcvbuf\t\t=\tREAD_ONCE(sysctl_rmem_default);\tsk-&gt;sk_sndbuf\t\t=\tREAD_ONCE(sysctl_wmem_default);\t//即使是udp也设置状态为TCP_CLOSE\tsk-&gt;sk_state\t\t=\tTCP_CLOSE;\t//好像跟内存分配相关\tsk-&gt;sk_use_task_frag\t=\ttrue;\t//这里关联了sock与socket\tsk_set_socket(sk, sock);\tsock_set_flag(sk, SOCK_ZAPPED);\tif (sock) &#123;\t\t//设置用户配置的type类型给sock\t\tsk-&gt;sk_type\t=\tsock-&gt;type;\t\t//初始化套接字的等待队列\t\tRCU_INIT_POINTER(sk-&gt;sk_wq, &amp;sock-&gt;wq);\t\tsock-&gt;sk\t=\tsk;\t&#125; else &#123;\t\tRCU_INIT_POINTER(sk-&gt;sk_wq, NULL);\t&#125;\t//设置sock的uid\tsk-&gt;sk_uid\t=\tuid;\t\t//锁相关，没看太懂\trwlock_init(&amp;sk-&gt;sk_callback_lock);\tif (sk-&gt;sk_kern_sock)\t\tlockdep_set_class_and_name(\t\t\t&amp;sk-&gt;sk_callback_lock,\t\t\taf_kern_callback_keys + sk-&gt;sk_family,\t\t\taf_family_kern_clock_key_strings[sk-&gt;sk_family]);\telse\t\tlockdep_set_class_and_name(\t\t\t&amp;sk-&gt;sk_callback_lock,\t\t\taf_callback_keys + sk-&gt;sk_family,\t\t\taf_family_clock_key_strings[sk-&gt;sk_family]);\tsk-&gt;sk_state_change\t=\tsock_def_wakeup; //唤醒睡眠的进程，比如tcp状态发生改变的时候调用\tsk-&gt;sk_data_ready\t=\tsock_def_readable; //软中断收到数据包，唤醒睡眠的进程\tsk-&gt;sk_write_space\t=\tsock_def_write_space;//有写的空间，唤醒,好像几乎不会被调用\tsk-&gt;sk_error_report\t=\tsock_def_error_report;\tsk-&gt;sk_destruct\t\t=\tsock_def_destruct; //销毁套接字的回调\tsk-&gt;sk_frag.page\t=\tNULL;\tsk-&gt;sk_frag.offset\t=\t0;\tsk-&gt;sk_peek_off\t\t=\t-1;  //peek的偏移量\tsk-&gt;sk_peer_pid \t=\tNULL; //对端的进程id，同一个主机上才有吧？\tsk-&gt;sk_peer_cred\t=\tNULL; //也是对端的信息\tspin_lock_init(&amp;sk-&gt;sk_peer_lock);\tsk-&gt;sk_write_pending\t=\t0;  //写缓存区没有空间了\tsk-&gt;sk_rcvlowat\t\t=\t1;  //唤醒相关的水位线？1表示一个字节也唤醒\tsk-&gt;sk_rcvtimeo\t\t=\tMAX_SCHEDULE_TIMEOUT; //设置接收的超时时间 全F\tsk-&gt;sk_sndtimeo\t\t=\tMAX_SCHEDULE_TIMEOUT; ////设置发送的超时时间 全F\tsk-&gt;sk_stamp = SK_DEFAULT_STAMP;#if BITS_PER_LONG==32\tseqlock_init(&amp;sk-&gt;sk_stamp_seq);#endif\tatomic_set(&amp;sk-&gt;sk_zckey, 0);#ifdef CONFIG_NET_RX_BUSY_POLL\tsk-&gt;sk_napi_id\t\t=\t0;\tsk-&gt;sk_ll_usec\t\t=\tREAD_ONCE(sysctl_net_busy_read);#endif\tsk-&gt;sk_max_pacing_rate = ~0UL;  //发送速率相关，tcp拥塞控制的时候会用到bbr算法会用到\tsk-&gt;sk_pacing_rate = ~0UL;\tWRITE_ONCE(sk-&gt;sk_pacing_shift, 10);\tsk-&gt;sk_incoming_cpu = -1;   //记录属于哪个cpu\tsk_rx_queue_clear(sk);\t/*\t * Before updating sk_refcnt, we must commit prior changes to memory\t * (Documentation/RCU/rculist_nulls.rst for details)\t */\tsmp_wmb();\trefcount_set(&amp;sk-&gt;sk_refcnt, 1);\tatomic_set(&amp;sk-&gt;sk_drops, 0);&#125;EXPORT_SYMBOL(sock_init_data_uid);\n\n上述代码主要做了如下几个个事情，调用sk_init_common 初始化sock的接受队列和发送队列，这个错误队列好像是ip层收到icmp的错误报文，会放到这个错误队列中。\nstatic void sk_init_common(struct sock *sk)&#123;\t//初始化接收，发送和错误队列。\tskb_queue_head_init(&amp;sk-&gt;sk_receive_queue);\tskb_queue_head_init(&amp;sk-&gt;sk_write_queue);\tskb_queue_head_init(&amp;sk-&gt;sk_error_queue);\trwlock_init(&amp;sk-&gt;sk_callback_lock);\t//锁相关没太懂\tlockdep_set_class_and_name(&amp;sk-&gt;sk_receive_queue.lock,\t\t\taf_rlock_keys + sk-&gt;sk_family,\t\t\taf_family_rlock_key_strings[sk-&gt;sk_family]);\tlockdep_set_class_and_name(&amp;sk-&gt;sk_write_queue.lock,\t\t\taf_wlock_keys + sk-&gt;sk_family,\t\t\taf_family_wlock_key_strings[sk-&gt;sk_family]);\tlockdep_set_class_and_name(&amp;sk-&gt;sk_error_queue.lock,\t\t\taf_elock_keys + sk-&gt;sk_family,\t\t\taf_family_elock_key_strings[sk-&gt;sk_family]);\tlockdep_set_class_and_name(&amp;sk-&gt;sk_callback_lock,\t\t\taf_callback_keys + sk-&gt;sk_family,\t\t\taf_family_clock_key_strings[sk-&gt;sk_family]);&#125;\n\n然后在sock_init_data_uid()中初始化了接收缓冲区和发送缓冲区的大小，将socket的sock字段指向当前的sock结构，然后注册唤醒进程睡眠的相关函数，例如收包的唤醒函数，有空间可写的回调函数，tcp状态发生改变的回调函数。\n","categories":["网络协议栈源码学习"],"tags":["socket"]},{"title":"套接字层socket、sock、文件系统之间的关系","url":"/2025/05/21/socket_sock_file_%E6%A6%82%E5%BF%B5/","content":"1.概念内核套接字层（socket layer）是 Linux 网络协议栈中承上启下的一层，负责将用户空间的 socket API（如 socket(), bind(), send(), recv() 等）与内核中的协议栈对接，其核心作用在于实现应用层与传输层协议之间的解耦，为应用程序提供一种统一且抽象的网络通信方式，套接字机制最初由 BSD UNIX 引入，现已广泛应用于各类网络编程环境中。\n套接字层（sockets）在整个网络协议栈中的位置如下图所示：\n\n2.关键数据结构套接字层使用的关键数据结构以及作用如下：\n2.1struct socket作用：是用户空间 socket 文件描述符在内核中的抽象\n核心字段如下所示：\nstruct socket &#123;    socket_state          state;     // 套接字状态    short                 type;      // SOCK_STREAM、SOCK_DGRAM 等    struct sock          *sk;        // 指向内核协议栈的 sock 结构    const struct proto_ops *ops;     // 指向协议操作函数表，如 inet_stream_ops    ...&#125;;\n\n\n\n2.2 struct sock作用：表示一个连接或一个套接字的协议控制块（protocol control block），协议相关逻辑都在这里实现\n核心字段（以 TCP 为例）：\nstruct sock &#123;    struct socket        *sk_socket;    // 回指到 struct socket    struct proto         *sk_prot;      // 协议操作（如 tcp_prot）    struct sk_buff_head   sk_receive_queue; // 接收队列    struct sk_buff_head   sk_write_queue;   // 发送队列    int                   sk_state;     // TCP 状态，如 ESTABLISHED 等    ...&#125;;\n\n2.3 、struct proto_ops作用：socket 操作函数表，对应 socket() 返回的文件描述符上的各种操作，如 send(), recv(), bind()\n核心字段：\nstruct proto_ops &#123;    int (*release)(struct socket *);    int (*bind)(struct socket *, struct sockaddr *, int);    int (*connect)(struct socket *, struct sockaddr *, int, int);    int (*sendmsg)(struct socket *, struct msghdr *, size_t);    int (*recvmsg)(struct socket *, struct msghdr *, size_t, int);    ...&#125;;\n\n2.4  struct proto作用：proto 是 面向传输层抽象设计的接口，把具体协议（TCP、UDP）与上层逻辑解耦，让上层只调用函数指针，而不用管协议细节\nstruct proto &#123;    struct sock *(*alloc)(struct net *, struct socket *, int, gfp_t);    void (*close)(struct sock *sk, long timeout);    int  (*connect)(struct sock *sk, struct sockaddr *uaddr, int addr_len);    int  (*sendmsg)(struct sock *sk, struct msghdr *msg, size_t len);    int  (*recvmsg)(struct sock *sk, struct msghdr *msg, size_t len, int noblock, int flags, int *addr_len);    ...&#125;;\n\n2.5struct file虽不专属于 socket 层，但与 socket 强相关。\n每个 socket 在内核中表现为一个文件，用户空间调用 socket() 后返回的文件描述符 fd 会指向一个 struct file，其 private_data 就是 &#96;struct socket\n2.6 整体关系图下图展示了上述结构体的关系图，其中task_struct对应一个进程，其files指向file_struct结构，该结构的主要功能是管理fd_arry 里面的每个fd对应一个打开的文件，其中的private指针指向的是I&#x2F;O对象的专有数据，对于socket层而言，就是socket结构，socket中的ops可以理解为用户态系统调用的实现。而sock的prot则是根据协议类型，进一步更为具体的实现。\n\n","categories":["网络协议栈源码学习"],"tags":["socket"]},{"title":"网卡硬件各组件","url":"/2025/05/23/%E7%BD%91%E5%8D%A1%E7%A1%AC%E4%BB%B6%E6%A8%A1%E5%9D%97/","content":"网卡核心硬件组成现代有线以太网卡中，MAC、PHY、DMA、PCIe 是网卡最核心的硬件模块，这些模块构成了数据通信的基础框架。以下是它们的详细分工和协作关系，具体的架构图如下所示：\nPHYPHY 层属于 OSI 物理层（Layer 1），主要负责 数字信号 ↔ 模拟信号 的转换，具体包括：\n\n链路管理\n\n\n自动协商​​：与对端设备协商速率（如10&#x2F;100&#x2F;1000 Mbps）和双工模式。\n链路检测​​：监测连接状态（如网线是否插入）。\n\n\n信号转换​\n\n\n数模转换​​：将MAC层生成的数字信号转换为适合线缆（如双绞线、光纤）传输的模拟信号（如电信号或光信号）。\n模数转换​​：将接收到的模拟信号还原为数字信号供上层处理。\n\n\n物理介质适配​\n\n支持不同介质标准（如以太网的RJ-45接口、光纤接口），适应电压、阻抗等物理特性,例如：100BASE-TX（双绞线）、1000BASE-SX（光纤）等。\n\n编码与解码\n\n使用特定编码方案（如曼彻斯特编码、PAM4）以提高抗干扰能力，确保信号完整性。\nMAC\n发送数据时​​，计算 ​​CRC（循环冗余校验）​​，确保数据完整性。\n接收数据时​​：\n从 PHY 层接收原始比特流，解析成以太网帧。\n检查​目标MAC地址​​（仅接收发给本机、广播或组播的帧）。\n校验 ​​FCS​​，丢弃损坏的帧。\n\n\n流量控制：使用 ​​PAUSE 帧（IEEE 802.3x）​​ 通知对端设备暂停发送，防止缓冲区溢出。\n\nDMA数据直接传输，网卡通过DMA引擎直接读写主机内存\nRSSRSS 是一种由 网卡硬件实现 的多队列技术，主要用于 提升多核 CPU 的网络数据包处理性能。网卡硬件将流量分散到多个接收队列（RX Queues），每个队列绑定不同CPU核心。\nTSOTSO 是一种由 网卡硬件实现 的优化技术，旨在 将TCP数据包的分片（Segmentation）任务从CPU转移到网卡，从而大幅降低CPU负载并提升网络吞吐量。\nPCIe\n提供网卡与CPU&#x2F;内存的物理通道，决定最大带宽（如100G需PCIe 4.0 x8）。\n支持DMA、MSI-X中断，优化响应速度\n\n","categories":["其他"],"tags":["网卡"]}]